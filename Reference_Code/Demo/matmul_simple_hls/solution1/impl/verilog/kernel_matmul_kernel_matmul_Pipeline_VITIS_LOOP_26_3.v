// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_matmul_kernel_matmul_Pipeline_VITIS_LOOP_26_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        select_ln17_1,
        vec_local_address0,
        vec_local_ce0,
        vec_local_q0,
        phi_mul,
        i_mat,
        sum_out,
        sum_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [31:0] m_axi_gmem1_0_WDATA;
output  [3:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [31:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input  [31:0] select_ln17_1;
output  [9:0] vec_local_address0;
output   vec_local_ce0;
input  [31:0] vec_local_q0;
input  [61:0] phi_mul;
input  [63:0] i_mat;
output  [31:0] sum_out;
output   sum_out_ap_vld;

reg ap_idle;
reg m_axi_gmem1_0_ARVALID;
reg m_axi_gmem1_0_RREADY;
reg sum_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone_grp1_done_reg;
reg    ap_block_pp0_stage0_subdone_grp1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_subdone_grp2_done_reg;
reg    ap_block_pp0_stage0_subdone_grp2;
wire   [0:0] icmp_ln26_fu_158_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_AR;
wire    ap_block_pp0_stage0_grp1;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage0_grp2;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
reg   [9:0] j_1_reg_255;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] j_1_reg_255_pp0_iter1_reg;
reg   [9:0] j_1_reg_255_pp0_iter2_reg;
reg   [9:0] j_1_reg_255_pp0_iter3_reg;
reg   [9:0] j_1_reg_255_pp0_iter4_reg;
reg   [9:0] j_1_reg_255_pp0_iter5_reg;
reg   [9:0] j_1_reg_255_pp0_iter6_reg;
reg   [9:0] j_1_reg_255_pp0_iter7_reg;
reg   [9:0] j_1_reg_255_pp0_iter8_reg;
reg   [0:0] icmp_ln26_reg_260;
reg   [0:0] icmp_ln26_reg_260_pp0_iter1_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter2_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter3_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter4_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter5_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter6_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter7_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter8_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter9_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter10_reg;
reg   [0:0] icmp_ln26_reg_260_pp0_iter11_reg;
reg   [63:0] gmem1_addr_reg_264;
reg   [31:0] gmem1_addr_read_reg_275;
reg    ap_block_pp0_stage0_11001_grp2;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] mul_reg_290;
wire   [63:0] zext_ln26_fu_219_p1;
wire    ap_block_pp0_stage0_grp0;
wire  signed [63:0] sext_ln29_fu_204_p1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001_grp1;
reg   [31:0] sum_fu_74;
wire   [31:0] grp_fu_132_p2;
reg   [31:0] ap_sig_allocacmp_sum_load;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [9:0] j_fu_78;
wire   [9:0] add_ln26_fu_164_p2;
reg   [9:0] ap_sig_allocacmp_j_1;
wire    ap_block_pp0_stage0_01001_grp0;
reg    vec_local_ce0_local;
wire   [31:0] grp_fu_136_p1;
wire   [31:0] zext_ln26_2_fu_154_p1;
wire   [61:0] zext_ln26_1_fu_170_p1;
wire   [61:0] add_ln29_fu_174_p2;
wire   [63:0] shl_ln2_fu_180_p3;
wire   [63:0] add_ln29_1_fu_188_p2;
wire   [61:0] trunc_ln3_fu_194_p4;
reg    grp_fu_132_ce;
reg    grp_fu_136_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 sum_fu_74 = 32'd0;
#0 j_fu_78 = 10'd0;
#0 ap_done_reg = 1'b0;
end

kernel_matmul_fadd_32ns_32ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_sum_load),
    .din1(mul_reg_290),
    .ce(grp_fu_132_ce),
    .dout(grp_fu_132_p2)
);

kernel_matmul_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(vec_local_q0),
    .din1(grp_fu_136_p1),
    .ce(grp_fu_136_ce),
    .dout(grp_fu_136_p2)
);

kernel_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
            ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp1)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp2)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_158_p2 == 1'd0))) begin
            j_fu_78 <= add_ln26_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_78 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_fu_74 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter13 == 1'b1)) begin
            sum_fu_74 <= grp_fu_132_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln26_reg_260_pp0_iter10_reg <= icmp_ln26_reg_260_pp0_iter9_reg;
        icmp_ln26_reg_260_pp0_iter11_reg <= icmp_ln26_reg_260_pp0_iter10_reg;
        icmp_ln26_reg_260_pp0_iter2_reg <= icmp_ln26_reg_260_pp0_iter1_reg;
        icmp_ln26_reg_260_pp0_iter3_reg <= icmp_ln26_reg_260_pp0_iter2_reg;
        icmp_ln26_reg_260_pp0_iter4_reg <= icmp_ln26_reg_260_pp0_iter3_reg;
        icmp_ln26_reg_260_pp0_iter5_reg <= icmp_ln26_reg_260_pp0_iter4_reg;
        icmp_ln26_reg_260_pp0_iter6_reg <= icmp_ln26_reg_260_pp0_iter5_reg;
        icmp_ln26_reg_260_pp0_iter7_reg <= icmp_ln26_reg_260_pp0_iter6_reg;
        icmp_ln26_reg_260_pp0_iter8_reg <= icmp_ln26_reg_260_pp0_iter7_reg;
        icmp_ln26_reg_260_pp0_iter9_reg <= icmp_ln26_reg_260_pp0_iter8_reg;
        j_1_reg_255_pp0_iter2_reg <= j_1_reg_255_pp0_iter1_reg;
        j_1_reg_255_pp0_iter3_reg <= j_1_reg_255_pp0_iter2_reg;
        j_1_reg_255_pp0_iter4_reg <= j_1_reg_255_pp0_iter3_reg;
        j_1_reg_255_pp0_iter5_reg <= j_1_reg_255_pp0_iter4_reg;
        j_1_reg_255_pp0_iter6_reg <= j_1_reg_255_pp0_iter5_reg;
        j_1_reg_255_pp0_iter7_reg <= j_1_reg_255_pp0_iter6_reg;
        j_1_reg_255_pp0_iter8_reg <= j_1_reg_255_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        gmem1_addr_reg_264 <= sext_ln29_fu_204_p1;
        icmp_ln26_reg_260 <= icmp_ln26_fu_158_p2;
        icmp_ln26_reg_260_pp0_iter1_reg <= icmp_ln26_reg_260;
        j_1_reg_255 <= ap_sig_allocacmp_j_1;
        j_1_reg_255_pp0_iter1_reg <= j_1_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg))) begin
        gmem1_addr_read_reg_275 <= m_axi_gmem1_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        mul_reg_290 <= grp_fu_136_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln26_fu_158_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_78;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp0))) begin
        ap_sig_allocacmp_sum_load = grp_fu_132_p2;
    end else begin
        ap_sig_allocacmp_sum_load = sum_fu_74;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg))) begin
        gmem1_blk_n_AR = m_axi_gmem1_0_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg))) begin
        gmem1_blk_n_R = m_axi_gmem1_0_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        grp_fu_132_ce = 1'b1;
    end else begin
        grp_fu_132_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        grp_fu_136_ce = 1'b1;
    end else begin
        grp_fu_136_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg))) begin
        m_axi_gmem1_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg))) begin
        m_axi_gmem1_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (icmp_ln26_reg_260_pp0_iter11_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        sum_out_ap_vld = 1'b1;
    end else begin
        sum_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        vec_local_ce0_local = 1'b1;
    end else begin
        vec_local_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_164_p2 = (ap_sig_allocacmp_j_1 + 10'd1);

assign add_ln29_1_fu_188_p2 = (shl_ln2_fu_180_p3 + i_mat);

assign add_ln29_fu_174_p2 = (zext_ln26_1_fu_170_p1 + phi_mul);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (m_axi_gmem1_0_RVALID == 1'b0)) | ((m_axi_gmem1_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((m_axi_gmem1_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (m_axi_gmem1_0_RVALID == 1'b0));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (m_axi_gmem1_0_RVALID == 1'b0)) | ((m_axi_gmem1_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp1 = ((m_axi_gmem1_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp2 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (m_axi_gmem1_0_RVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign grp_fu_136_p1 = gmem1_addr_read_reg_275;

assign icmp_ln26_fu_158_p2 = ((zext_ln26_2_fu_154_p1 == select_ln17_1) ? 1'b1 : 1'b0);

assign m_axi_gmem1_0_ARADDR = gmem1_addr_reg_264;

assign m_axi_gmem1_0_ARBURST = 2'd0;

assign m_axi_gmem1_0_ARCACHE = 4'd0;

assign m_axi_gmem1_0_ARID = 1'd0;

assign m_axi_gmem1_0_ARLEN = 64'd1;

assign m_axi_gmem1_0_ARLOCK = 2'd0;

assign m_axi_gmem1_0_ARPROT = 3'd0;

assign m_axi_gmem1_0_ARQOS = 4'd0;

assign m_axi_gmem1_0_ARREGION = 4'd0;

assign m_axi_gmem1_0_ARSIZE = 3'd0;

assign m_axi_gmem1_0_ARUSER = 1'd0;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_WDATA = 32'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 4'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign sext_ln29_fu_204_p1 = $signed(trunc_ln3_fu_194_p4);

assign shl_ln2_fu_180_p3 = {{add_ln29_fu_174_p2}, {2'd0}};

assign sum_out = sum_fu_74;

assign trunc_ln3_fu_194_p4 = {{add_ln29_1_fu_188_p2[63:2]}};

assign vec_local_address0 = zext_ln26_fu_219_p1;

assign vec_local_ce0 = vec_local_ce0_local;

assign zext_ln26_1_fu_170_p1 = ap_sig_allocacmp_j_1;

assign zext_ln26_2_fu_154_p1 = ap_sig_allocacmp_j_1;

assign zext_ln26_fu_219_p1 = j_1_reg_255_pp0_iter8_reg;

endmodule //kernel_matmul_kernel_matmul_Pipeline_VITIS_LOOP_26_3
