// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_kernel_mhsa_Pipeline_VITIS_LOOP_19_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_input_address0,
        current_input_ce0,
        current_input_q0,
        current_input_8_address0,
        current_input_8_ce0,
        current_input_8_q0,
        current_input_9_address0,
        current_input_9_ce0,
        current_input_9_q0,
        current_input_10_address0,
        current_input_10_ce0,
        current_input_10_q0,
        current_input_11_address0,
        current_input_11_ce0,
        current_input_11_q0,
        current_input_12_address0,
        current_input_12_ce0,
        current_input_12_q0,
        current_input_13_address0,
        current_input_13_ce0,
        current_input_13_q0,
        current_input_14_address0,
        current_input_14_ce0,
        current_input_14_q0,
        sum_local_out,
        sum_local_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] current_input_address0;
output   current_input_ce0;
input  [31:0] current_input_q0;
output  [6:0] current_input_8_address0;
output   current_input_8_ce0;
input  [31:0] current_input_8_q0;
output  [6:0] current_input_9_address0;
output   current_input_9_ce0;
input  [31:0] current_input_9_q0;
output  [6:0] current_input_10_address0;
output   current_input_10_ce0;
input  [31:0] current_input_10_q0;
output  [6:0] current_input_11_address0;
output   current_input_11_ce0;
input  [31:0] current_input_11_q0;
output  [6:0] current_input_12_address0;
output   current_input_12_ce0;
input  [31:0] current_input_12_q0;
output  [6:0] current_input_13_address0;
output   current_input_13_ce0;
input  [31:0] current_input_13_q0;
output  [6:0] current_input_14_address0;
output   current_input_14_ce0;
input  [31:0] current_input_14_q0;
output  [31:0] sum_local_out;
output   sum_local_out_ap_vld;

reg ap_idle;
reg sum_local_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln19_fu_214_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln19_reg_358;
reg   [0:0] icmp_ln19_reg_358_pp0_iter1_reg;
wire   [2:0] trunc_ln19_fu_220_p1;
reg   [2:0] trunc_ln19_reg_362;
wire   [0:0] icmp_ln21_fu_278_p2;
reg   [0:0] icmp_ln21_reg_407;
reg   [0:0] icmp_ln21_reg_407_pp0_iter1_reg;
wire   [31:0] v_fu_289_p19;
reg   [31:0] v_reg_412;
wire   [63:0] zext_ln18_fu_234_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] sum_local_fu_76;
wire   [31:0] grp_fu_328_p4;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [9:0] i_6_fu_80;
wire   [9:0] add_ln19_fu_208_p2;
reg   [9:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
reg    current_input_ce0_local;
reg    current_input_8_ce0_local;
reg    current_input_9_ce0_local;
reg    current_input_10_ce0_local;
reg    current_input_11_ce0_local;
reg    current_input_12_ce0_local;
reg    current_input_13_ce0_local;
reg    current_input_14_ce0_local;
wire   [6:0] lshr_ln3_fu_224_p4;
wire   [31:0] v_fu_289_p17;
reg   [31:0] grp_fu_328_p1;
reg   [31:0] grp_fu_328_p2;
reg   [0:0] grp_fu_328_p3;
reg    grp_fu_328_in_valid;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] v_fu_289_p1;
wire   [2:0] v_fu_289_p3;
wire   [2:0] v_fu_289_p5;
wire   [2:0] v_fu_289_p7;
wire  signed [2:0] v_fu_289_p9;
wire  signed [2:0] v_fu_289_p11;
wire  signed [2:0] v_fu_289_p13;
wire  signed [2:0] v_fu_289_p15;
wire   [31:0] grp_fu_328_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 sum_local_fu_76 = 32'd0;
#0 i_6_fu_80 = 10'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U203(
    .din0(current_input_q0),
    .din1(current_input_8_q0),
    .din2(current_input_9_q0),
    .din3(current_input_10_q0),
    .din4(current_input_11_q0),
    .din5(current_input_12_q0),
    .din6(current_input_13_q0),
    .din7(current_input_14_q0),
    .def(v_fu_289_p17),
    .sel(trunc_ln19_reg_362),
    .dout(v_fu_289_p19)
);

kernel_mhsa_fmacc_32ns_32ns_32ns_1ns_32_2_primitive_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .DWIDTH( 32 ),
    .OUTPUT_DATA_WIDTH( 32 ))
fmacc_32ns_32ns_32ns_1ns_32_2_primitive_dsp_1_U204(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_a_data(grp_fu_328_p1),
    .in_b_data(grp_fu_328_p2),
    .in_last(grp_fu_328_p3),
    .in_valid(grp_fu_328_in_valid),
    .out_data(grp_fu_328_p4)
);

kernel_mhsa_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_6_fu_80 <= add_ln19_fu_208_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_6_fu_80 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            sum_local_fu_76 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            sum_local_fu_76 <= grp_fu_328_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln19_reg_358 <= icmp_ln19_fu_214_p2;
        icmp_ln19_reg_358_pp0_iter1_reg <= icmp_ln19_reg_358;
        icmp_ln21_reg_407 <= icmp_ln21_fu_278_p2;
        icmp_ln21_reg_407_pp0_iter1_reg <= icmp_ln21_reg_407;
        trunc_ln19_reg_362 <= trunc_ln19_fu_220_p1;
        v_reg_412 <= v_fu_289_p19;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 10'd0;
    end else begin
        ap_sig_allocacmp_i = i_6_fu_80;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_10_ce0_local = 1'b1;
    end else begin
        current_input_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_11_ce0_local = 1'b1;
    end else begin
        current_input_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_12_ce0_local = 1'b1;
    end else begin
        current_input_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_13_ce0_local = 1'b1;
    end else begin
        current_input_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_14_ce0_local = 1'b1;
    end else begin
        current_input_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_8_ce0_local = 1'b1;
    end else begin
        current_input_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_9_ce0_local = 1'b1;
    end else begin
        current_input_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_ce0_local = 1'b1;
    end else begin
        current_input_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_328_in_valid = 1'b1;
    end else begin
        grp_fu_328_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_328_p1 = v_reg_412;
    end else begin
        grp_fu_328_p1 = 32'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_328_p2 = v_reg_412;
    end else begin
        grp_fu_328_p2 = 32'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_328_p3 = icmp_ln21_reg_407_pp0_iter1_reg;
    end else begin
        grp_fu_328_p3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (icmp_ln19_reg_358_pp0_iter1_reg == 1'd1))) begin
        sum_local_out_ap_vld = 1'b1;
    end else begin
        sum_local_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_208_p2 = (ap_sig_allocacmp_i + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign current_input_10_address0 = zext_ln18_fu_234_p1;

assign current_input_10_ce0 = current_input_10_ce0_local;

assign current_input_11_address0 = zext_ln18_fu_234_p1;

assign current_input_11_ce0 = current_input_11_ce0_local;

assign current_input_12_address0 = zext_ln18_fu_234_p1;

assign current_input_12_ce0 = current_input_12_ce0_local;

assign current_input_13_address0 = zext_ln18_fu_234_p1;

assign current_input_13_ce0 = current_input_13_ce0_local;

assign current_input_14_address0 = zext_ln18_fu_234_p1;

assign current_input_14_ce0 = current_input_14_ce0_local;

assign current_input_8_address0 = zext_ln18_fu_234_p1;

assign current_input_8_ce0 = current_input_8_ce0_local;

assign current_input_9_address0 = zext_ln18_fu_234_p1;

assign current_input_9_ce0 = current_input_9_ce0_local;

assign current_input_address0 = zext_ln18_fu_234_p1;

assign current_input_ce0 = current_input_ce0_local;

assign icmp_ln19_fu_214_p2 = ((ap_sig_allocacmp_i == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_278_p2 = ((add_ln19_fu_208_p2 == 10'd768) ? 1'b1 : 1'b0);

assign lshr_ln3_fu_224_p4 = {{ap_sig_allocacmp_i[9:3]}};

assign sum_local_out = sum_local_fu_76;

assign trunc_ln19_fu_220_p1 = ap_sig_allocacmp_i[2:0];

assign v_fu_289_p17 = 'bx;

assign zext_ln18_fu_234_p1 = lshr_ln3_fu_224_p4;

endmodule //kernel_mhsa_kernel_mhsa_Pipeline_VITIS_LOOP_19_1
