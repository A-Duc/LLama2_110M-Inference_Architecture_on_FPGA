// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_load_vec (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        vec,
        vec_stream_din,
        vec_stream_full_n,
        vec_stream_write,
        vec_stream_num_data_valid,
        vec_stream_fifo_cap
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [63:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [31:0] m_axi_gmem0_0_WDATA;
output  [3:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [63:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [31:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [12:0] m_axi_gmem0_0_RFIFONUM;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
input  [63:0] vec;
output  [31:0] vec_stream_din;
input   vec_stream_full_n;
output   vec_stream_write;
input  [7:0] vec_stream_num_data_valid;
input  [7:0] vec_stream_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_gmem0_0_ARVALID;
reg m_axi_gmem0_0_RREADY;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_state14;
reg    vec_stream_blk_n;
reg   [63:0] vec_read_reg_242;
reg    ap_block_state1;
wire   [3:0] trunc_ln15_fu_206_p1;
reg    ap_block_state14;
wire   [9:0] add_ln15_4_fu_214_p2;
reg   [9:0] add5_in_reg_110;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_138_p2;
wire   [0:0] icmp_ln15_fu_219_p2;
reg   [3:0] j_reg_119;
wire  signed [63:0] sext_ln17_fu_171_p1;
reg   [9:0] i_fu_80;
wire   [9:0] add_ln13_fu_225_p2;
reg    vec_stream_write_local;
wire   [11:0] shl_ln_fu_144_p3;
wire   [63:0] zext_ln17_fu_152_p1;
wire   [63:0] add_ln17_fu_156_p2;
wire   [61:0] trunc_ln_fu_161_p4;
wire   [4:0] zext_ln15_fu_190_p1;
wire   [4:0] add_ln15_fu_200_p2;
wire   [9:0] zext_ln15_5_fu_210_p1;
reg   [13:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
#0 i_fu_80 = 10'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_138_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln15_fu_219_p2 == 1'd0) & (1'b0 == ap_block_state14))) begin
        add5_in_reg_110 <= add_ln15_4_fu_214_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_138_p2 == 1'd1))) begin
        add5_in_reg_110 <= i_fu_80;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        i_fu_80 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln15_fu_219_p2 == 1'd1) & (1'b0 == ap_block_state14))) begin
        i_fu_80 <= add_ln13_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln15_fu_219_p2 == 1'd0) & (1'b0 == ap_block_state14))) begin
        j_reg_119 <= trunc_ln15_fu_206_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_138_p2 == 1'd1))) begin
        j_reg_119 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        vec_read_reg_242 <= vec;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state14)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem0_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_138_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem0_blk_n_AR = m_axi_gmem0_0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gmem0_blk_n_R = m_axi_gmem0_0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_138_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem0_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem0_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14))) begin
        m_axi_gmem0_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        vec_stream_blk_n = vec_stream_full_n;
    end else begin
        vec_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14))) begin
        vec_stream_write_local = 1'b1;
    end else begin
        vec_stream_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_138_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem0_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln15_fu_219_p2 == 1'd1) & (1'b0 == ap_block_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln15_fu_219_p2 == 1'd0) & (1'b0 == ap_block_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_225_p2 = (i_fu_80 + 10'd16);

assign add_ln15_4_fu_214_p2 = (i_fu_80 + zext_ln15_5_fu_210_p1);

assign add_ln15_fu_200_p2 = (zext_ln15_fu_190_p1 + 5'd1);

assign add_ln17_fu_156_p2 = (zext_ln17_fu_152_p1 + vec_read_reg_242);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((m_axi_gmem0_0_RVALID == 1'b0) | (vec_stream_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln13_fu_138_p2 = ((i_fu_80 < 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_219_p2 = ((add_ln15_fu_200_p2 == 5'd16) ? 1'b1 : 1'b0);

assign m_axi_gmem0_0_ARADDR = sext_ln17_fu_171_p1;

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLEN = 64'd1;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_AWADDR = 64'd0;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 32'd0;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_AWVALID = 1'b0;

assign m_axi_gmem0_0_BREADY = 1'b0;

assign m_axi_gmem0_0_WDATA = 32'd0;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 4'd0;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign m_axi_gmem0_0_WVALID = 1'b0;

assign sext_ln17_fu_171_p1 = $signed(trunc_ln_fu_161_p4);

assign shl_ln_fu_144_p3 = {{add5_in_reg_110}, {2'd0}};

assign start_out = real_start;

assign trunc_ln15_fu_206_p1 = add_ln15_fu_200_p2[3:0];

assign trunc_ln_fu_161_p4 = {{add_ln17_fu_156_p2[63:2]}};

assign vec_stream_din = m_axi_gmem0_0_RDATA;

assign vec_stream_write = vec_stream_write_local;

assign zext_ln15_5_fu_210_p1 = add_ln15_fu_200_p2;

assign zext_ln15_fu_190_p1 = j_reg_119;

assign zext_ln17_fu_152_p1 = shl_ln_fu_144_p3;

endmodule //kernel_mhsa_load_vec
