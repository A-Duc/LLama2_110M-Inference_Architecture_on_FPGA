// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_kernel_mhsa_Pipeline_VITIS_LOOP_126_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln126,
        att_11_address0,
        att_11_ce0,
        att_11_we0,
        att_11_d0,
        att_10_address0,
        att_10_ce0,
        att_10_we0,
        att_10_d0,
        att_9_address0,
        att_9_ce0,
        att_9_we0,
        att_9_d0,
        att_8_address0,
        att_8_ce0,
        att_8_we0,
        att_8_d0,
        att_7_address0,
        att_7_ce0,
        att_7_we0,
        att_7_d0,
        att_6_address0,
        att_6_ce0,
        att_6_we0,
        att_6_d0,
        att_5_address0,
        att_5_ce0,
        att_5_we0,
        att_5_d0,
        att_4_address0,
        att_4_ce0,
        att_4_we0,
        att_4_d0,
        att_3_address0,
        att_3_ce0,
        att_3_we0,
        att_3_d0,
        att_2_address0,
        att_2_ce0,
        att_2_we0,
        att_2_d0,
        att_1_address0,
        att_1_ce0,
        att_1_we0,
        att_1_d0,
        att_address0,
        att_ce0,
        att_we0,
        att_d0,
        h
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [32:0] select_ln126;
output  [8:0] att_11_address0;
output   att_11_ce0;
output   att_11_we0;
output  [31:0] att_11_d0;
output  [8:0] att_10_address0;
output   att_10_ce0;
output   att_10_we0;
output  [31:0] att_10_d0;
output  [8:0] att_9_address0;
output   att_9_ce0;
output   att_9_we0;
output  [31:0] att_9_d0;
output  [8:0] att_8_address0;
output   att_8_ce0;
output   att_8_we0;
output  [31:0] att_8_d0;
output  [8:0] att_7_address0;
output   att_7_ce0;
output   att_7_we0;
output  [31:0] att_7_d0;
output  [8:0] att_6_address0;
output   att_6_ce0;
output   att_6_we0;
output  [31:0] att_6_d0;
output  [8:0] att_5_address0;
output   att_5_ce0;
output   att_5_we0;
output  [31:0] att_5_d0;
output  [8:0] att_4_address0;
output   att_4_ce0;
output   att_4_we0;
output  [31:0] att_4_d0;
output  [8:0] att_3_address0;
output   att_3_ce0;
output   att_3_we0;
output  [31:0] att_3_d0;
output  [8:0] att_2_address0;
output   att_2_ce0;
output   att_2_we0;
output  [31:0] att_2_d0;
output  [8:0] att_1_address0;
output   att_1_ce0;
output   att_1_we0;
output  [31:0] att_1_d0;
output  [8:0] att_address0;
output   att_ce0;
output   att_we0;
output  [31:0] att_d0;
input  [3:0] h;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln126_fu_288_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln126_fu_294_p1;
reg   [9:0] t_fu_82;
wire   [9:0] add_ln126_fu_278_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_t_1;
wire   [3:0] h_read_read_fu_86_p2;
reg    att_10_we0_local;
reg    att_10_ce0_local;
reg    att_9_we0_local;
reg    att_9_ce0_local;
reg    att_8_we0_local;
reg    att_8_ce0_local;
reg    att_7_we0_local;
reg    att_7_ce0_local;
reg    att_6_we0_local;
reg    att_6_ce0_local;
reg    att_5_we0_local;
reg    att_5_ce0_local;
reg    att_4_we0_local;
reg    att_4_ce0_local;
reg    att_3_we0_local;
reg    att_3_ce0_local;
reg    att_2_we0_local;
reg    att_2_ce0_local;
reg    att_1_we0_local;
reg    att_1_ce0_local;
reg    att_we0_local;
reg    att_ce0_local;
reg    att_11_we0_local;
reg    att_11_ce0_local;
wire   [32:0] zext_ln126_1_fu_284_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 t_fu_82 = 10'd0;
#0 ap_done_reg = 1'b0;
end

kernel_mhsa_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln126_fu_288_p2 == 1'd0)) begin
            t_fu_82 <= add_ln126_fu_278_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_fu_82 <= 10'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_t_1 = t_fu_82;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd10))) begin
        att_10_ce0_local = 1'b1;
    end else begin
        att_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd10))) begin
        att_10_we0_local = 1'b1;
    end else begin
        att_10_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(h_read_read_fu_86_p2 == 4'd0) & ~(h_read_read_fu_86_p2 == 4'd1) & ~(h_read_read_fu_86_p2 == 4'd2) & ~(h_read_read_fu_86_p2 == 4'd3) & ~(h_read_read_fu_86_p2 == 4'd4) & ~(h_read_read_fu_86_p2 == 4'd5) & ~(h_read_read_fu_86_p2 == 4'd6) & ~(h_read_read_fu_86_p2 == 4'd7) & ~(h_read_read_fu_86_p2 == 4'd8) & ~(h_read_read_fu_86_p2 == 4'd9) & ~(h_read_read_fu_86_p2 == 4'd10) & (icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        att_11_ce0_local = 1'b1;
    end else begin
        att_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(h_read_read_fu_86_p2 == 4'd0) & ~(h_read_read_fu_86_p2 == 4'd1) & ~(h_read_read_fu_86_p2 == 4'd2) & ~(h_read_read_fu_86_p2 == 4'd3) & ~(h_read_read_fu_86_p2 == 4'd4) & ~(h_read_read_fu_86_p2 == 4'd5) & ~(h_read_read_fu_86_p2 == 4'd6) & ~(h_read_read_fu_86_p2 == 4'd7) & ~(h_read_read_fu_86_p2 == 4'd8) & ~(h_read_read_fu_86_p2 == 4'd9) & ~(h_read_read_fu_86_p2 == 4'd10) & (icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        att_11_we0_local = 1'b1;
    end else begin
        att_11_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd1))) begin
        att_1_ce0_local = 1'b1;
    end else begin
        att_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd1))) begin
        att_1_we0_local = 1'b1;
    end else begin
        att_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd2))) begin
        att_2_ce0_local = 1'b1;
    end else begin
        att_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd2))) begin
        att_2_we0_local = 1'b1;
    end else begin
        att_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd3))) begin
        att_3_ce0_local = 1'b1;
    end else begin
        att_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd3))) begin
        att_3_we0_local = 1'b1;
    end else begin
        att_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd4))) begin
        att_4_ce0_local = 1'b1;
    end else begin
        att_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd4))) begin
        att_4_we0_local = 1'b1;
    end else begin
        att_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd5))) begin
        att_5_ce0_local = 1'b1;
    end else begin
        att_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd5))) begin
        att_5_we0_local = 1'b1;
    end else begin
        att_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd6))) begin
        att_6_ce0_local = 1'b1;
    end else begin
        att_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd6))) begin
        att_6_we0_local = 1'b1;
    end else begin
        att_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd7))) begin
        att_7_ce0_local = 1'b1;
    end else begin
        att_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd7))) begin
        att_7_we0_local = 1'b1;
    end else begin
        att_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd8))) begin
        att_8_ce0_local = 1'b1;
    end else begin
        att_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd8))) begin
        att_8_we0_local = 1'b1;
    end else begin
        att_8_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd9))) begin
        att_9_ce0_local = 1'b1;
    end else begin
        att_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd9))) begin
        att_9_we0_local = 1'b1;
    end else begin
        att_9_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd0))) begin
        att_ce0_local = 1'b1;
    end else begin
        att_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_288_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (h_read_read_fu_86_p2 == 4'd0))) begin
        att_we0_local = 1'b1;
    end else begin
        att_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln126_fu_278_p2 = (ap_sig_allocacmp_t_1 + 10'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign att_10_address0 = zext_ln126_fu_294_p1;

assign att_10_ce0 = att_10_ce0_local;

assign att_10_d0 = 32'd0;

assign att_10_we0 = att_10_we0_local;

assign att_11_address0 = zext_ln126_fu_294_p1;

assign att_11_ce0 = att_11_ce0_local;

assign att_11_d0 = 32'd0;

assign att_11_we0 = att_11_we0_local;

assign att_1_address0 = zext_ln126_fu_294_p1;

assign att_1_ce0 = att_1_ce0_local;

assign att_1_d0 = 32'd0;

assign att_1_we0 = att_1_we0_local;

assign att_2_address0 = zext_ln126_fu_294_p1;

assign att_2_ce0 = att_2_ce0_local;

assign att_2_d0 = 32'd0;

assign att_2_we0 = att_2_we0_local;

assign att_3_address0 = zext_ln126_fu_294_p1;

assign att_3_ce0 = att_3_ce0_local;

assign att_3_d0 = 32'd0;

assign att_3_we0 = att_3_we0_local;

assign att_4_address0 = zext_ln126_fu_294_p1;

assign att_4_ce0 = att_4_ce0_local;

assign att_4_d0 = 32'd0;

assign att_4_we0 = att_4_we0_local;

assign att_5_address0 = zext_ln126_fu_294_p1;

assign att_5_ce0 = att_5_ce0_local;

assign att_5_d0 = 32'd0;

assign att_5_we0 = att_5_we0_local;

assign att_6_address0 = zext_ln126_fu_294_p1;

assign att_6_ce0 = att_6_ce0_local;

assign att_6_d0 = 32'd0;

assign att_6_we0 = att_6_we0_local;

assign att_7_address0 = zext_ln126_fu_294_p1;

assign att_7_ce0 = att_7_ce0_local;

assign att_7_d0 = 32'd0;

assign att_7_we0 = att_7_we0_local;

assign att_8_address0 = zext_ln126_fu_294_p1;

assign att_8_ce0 = att_8_ce0_local;

assign att_8_d0 = 32'd0;

assign att_8_we0 = att_8_we0_local;

assign att_9_address0 = zext_ln126_fu_294_p1;

assign att_9_ce0 = att_9_ce0_local;

assign att_9_d0 = 32'd0;

assign att_9_we0 = att_9_we0_local;

assign att_address0 = zext_ln126_fu_294_p1;

assign att_ce0 = att_ce0_local;

assign att_d0 = 32'd0;

assign att_we0 = att_we0_local;

assign h_read_read_fu_86_p2 = h;

assign icmp_ln126_fu_288_p2 = ((zext_ln126_1_fu_284_p1 == select_ln126) ? 1'b1 : 1'b0);

assign zext_ln126_1_fu_284_p1 = ap_sig_allocacmp_t_1;

assign zext_ln126_fu_294_p1 = ap_sig_allocacmp_t_1;

endmodule //kernel_mhsa_kernel_mhsa_Pipeline_VITIS_LOOP_126_1
