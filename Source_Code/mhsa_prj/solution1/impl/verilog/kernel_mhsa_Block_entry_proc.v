// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_Block_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer,
        position,
        key_cache,
        value_cache,
        key_cache_c6_din,
        key_cache_c6_full_n,
        key_cache_c6_write,
        key_cache_c6_num_data_valid,
        key_cache_c6_fifo_cap,
        value_cache_c7_din,
        value_cache_c7_full_n,
        value_cache_c7_write,
        value_cache_c7_num_data_valid,
        value_cache_c7_fifo_cap,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] layer;
input  [31:0] position;
input  [63:0] key_cache;
input  [63:0] value_cache;
output  [63:0] key_cache_c6_din;
input   key_cache_c6_full_n;
output   key_cache_c6_write;
input  [2:0] key_cache_c6_num_data_valid;
input  [2:0] key_cache_c6_fifo_cap;
output  [63:0] value_cache_c7_din;
input   value_cache_c7_full_n;
output   value_cache_c7_write;
input  [2:0] value_cache_c7_num_data_valid;
input  [2:0] value_cache_c7_fifo_cap;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [31:0] ap_return_2;
output  [32:0] ap_return_3;
output  [31:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return_0;
reg[63:0] ap_return_1;
reg[31:0] ap_return_2;
reg[32:0] ap_return_3;
reg[31:0] ap_return_4;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    key_cache_c6_blk_n;
reg    value_cache_c7_blk_n;
reg   [63:0] value_cache_read_reg_208;
reg    ap_block_state1;
reg   [63:0] key_cache_read_reg_213;
wire   [31:0] mul7_loc_c2_0_fu_112_p2;
reg   [31:0] mul7_loc_c2_0_reg_218;
reg    value_cache_c7_write_local;
reg    key_cache_c6_write_local;
wire    ap_CS_fsm_state2;
wire   [31:0] empty_fu_100_p2;
wire   [31:0] empty_510_fu_106_p2;
wire  signed [31:0] position_cast_fu_118_p0;
wire  signed [31:0] empty_511_fu_122_p0;
wire  signed [31:0] empty_512_fu_128_p0;
wire   [31:0] empty_511_fu_122_p2;
wire   [31:0] empty_512_fu_128_p2;
wire   [31:0] mul8_fu_134_p2;
wire   [31:0] add_fu_140_p2;
wire   [33:0] shl_ln_fu_145_p3;
wire  signed [63:0] sext_ln55_fu_153_p1;
wire  signed [32:0] position_cast_fu_118_p1;
wire  signed [31:0] add126_out_0_fu_173_p0;
wire   [63:0] add_ln55_fu_157_p2;
wire   [63:0] add_ln55_1_fu_162_p2;
wire   [31:0] add126_out_0_fu_173_p2;
wire   [32:0] add_ln68_fu_167_p2;
reg   [63:0] ap_return_0_preg;
reg   [63:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [32:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 64'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 33'd0;
#0 ap_return_4_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_0_preg <= add_ln55_fu_157_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_1_preg <= add_ln55_1_fu_162_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_2_preg <= add126_out_0_fu_173_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 33'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_3_preg <= add_ln68_fu_167_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_4_preg <= mul7_loc_c2_0_reg_218;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        key_cache_read_reg_213 <= key_cache;
        mul7_loc_c2_0_reg_218 <= mul7_loc_c2_0_fu_112_p2;
        value_cache_read_reg_208 <= value_cache;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_0 = add_ln55_fu_157_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_1 = add_ln55_1_fu_162_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_2 = add126_out_0_fu_173_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_3 = add_ln68_fu_167_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_4 = mul7_loc_c2_0_reg_218;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        key_cache_c6_blk_n = key_cache_c6_full_n;
    end else begin
        key_cache_c6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        key_cache_c6_write_local = 1'b1;
    end else begin
        key_cache_c6_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        value_cache_c7_blk_n = value_cache_c7_full_n;
    end else begin
        value_cache_c7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        value_cache_c7_write_local = 1'b1;
    end else begin
        value_cache_c7_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add126_out_0_fu_173_p0 = position;

assign add126_out_0_fu_173_p2 = ($signed(add126_out_0_fu_173_p0) + $signed(32'd1));

assign add_fu_140_p2 = (mul8_fu_134_p2 + mul7_loc_c2_0_reg_218);

assign add_ln55_1_fu_162_p2 = ($signed(sext_ln55_fu_153_p1) + $signed(value_cache_read_reg_208));

assign add_ln55_fu_157_p2 = ($signed(sext_ln55_fu_153_p1) + $signed(key_cache_read_reg_213));

assign add_ln68_fu_167_p2 = ($signed(position_cast_fu_118_p1) + $signed(33'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (value_cache_c7_full_n == 1'b0) | (key_cache_c6_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign empty_510_fu_106_p2 = layer << 32'd17;

assign empty_511_fu_122_p0 = position;

assign empty_511_fu_122_p2 = empty_511_fu_122_p0 << 32'd10;

assign empty_512_fu_128_p0 = position;

assign empty_512_fu_128_p2 = empty_512_fu_128_p0 << 32'd8;

assign empty_fu_100_p2 = layer << 32'd19;

assign key_cache_c6_din = key_cache;

assign key_cache_c6_write = key_cache_c6_write_local;

assign mul7_loc_c2_0_fu_112_p2 = (empty_fu_100_p2 - empty_510_fu_106_p2);

assign mul8_fu_134_p2 = (empty_511_fu_122_p2 - empty_512_fu_128_p2);

assign position_cast_fu_118_p0 = position;

assign position_cast_fu_118_p1 = position_cast_fu_118_p0;

assign sext_ln55_fu_153_p1 = $signed(shl_ln_fu_145_p3);

assign shl_ln_fu_145_p3 = {{add_fu_140_p2}, {2'd0}};

assign value_cache_c7_din = value_cache;

assign value_cache_c7_write = value_cache_c7_write_local;

endmodule //kernel_mhsa_Block_entry_proc
