-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_load_vec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vector_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    vector_stream_full_n : IN STD_LOGIC;
    vector_stream_write : OUT STD_LOGIC;
    vector_stream_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    vector_stream_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    i_vec_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_vec_0_ce0 : OUT STD_LOGIC;
    i_vec_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_vec_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_vec_1_ce0 : OUT STD_LOGIC;
    i_vec_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_vec_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_vec_2_ce0 : OUT STD_LOGIC;
    i_vec_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_vec_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_vec_3_ce0 : OUT STD_LOGIC;
    i_vec_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_vec_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_vec_4_ce0 : OUT STD_LOGIC;
    i_vec_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_vec_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_vec_5_ce0 : OUT STD_LOGIC;
    i_vec_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_vec_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_vec_6_ce0 : OUT STD_LOGIC;
    i_vec_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_vec_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_vec_7_ce0 : OUT STD_LOGIC;
    i_vec_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_load_vec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln12_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal vector_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln12_fu_217_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln12_reg_338 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln12_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_82 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln12_fu_205_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln15_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal vector_stream_write_local : STD_LOGIC;
    signal i_vec_0_ce0_local : STD_LOGIC;
    signal i_vec_1_ce0_local : STD_LOGIC;
    signal i_vec_2_ce0_local : STD_LOGIC;
    signal i_vec_3_ce0_local : STD_LOGIC;
    signal i_vec_4_ce0_local : STD_LOGIC;
    signal i_vec_5_ce0_local : STD_LOGIC;
    signal i_vec_6_ce0_local : STD_LOGIC;
    signal i_vec_7_ce0_local : STD_LOGIC;
    signal lshr_ln_fu_221_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_280_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_280_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_166 : BOOLEAN;
    signal tmp_fu_280_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_280_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_280_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_280_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_280_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_280_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_280_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_280_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_32_1_1_U239 : component kernel_mhsa_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => i_vec_0_q0,
        din1 => i_vec_1_q0,
        din2 => i_vec_2_q0,
        din3 => i_vec_3_q0,
        din4 => i_vec_4_q0,
        din5 => i_vec_5_q0,
        din6 => i_vec_6_q0,
        din7 => i_vec_7_q0,
        def => tmp_fu_280_p17,
        sel => trunc_ln12_reg_338,
        dout => tmp_fu_280_p19);

    flow_control_loop_pipe_U : component kernel_mhsa_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_166)) then
                if ((icmp_ln12_fu_211_p2 = ap_const_lv1_0)) then 
                    i_fu_82 <= add_ln12_fu_205_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_82 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln12_reg_338 <= trunc_ln12_fu_217_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln12_fu_205_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(vector_stream_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (vector_stream_full_n = ap_const_logic_0);
    end process;


    ap_condition_166_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_166 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln12_fu_211_p2, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_82, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_82;
        end if; 
    end process;

    bitcast_ln15_fu_319_p1 <= tmp_fu_280_p19;
    i_vec_0_address0 <= zext_ln12_fu_231_p1(7 - 1 downto 0);
    i_vec_0_ce0 <= i_vec_0_ce0_local;

    i_vec_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln12_fu_211_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_vec_0_ce0_local <= ap_const_logic_1;
        else 
            i_vec_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_1_address0 <= zext_ln12_fu_231_p1(7 - 1 downto 0);
    i_vec_1_ce0 <= i_vec_1_ce0_local;

    i_vec_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln12_fu_211_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_vec_1_ce0_local <= ap_const_logic_1;
        else 
            i_vec_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_2_address0 <= zext_ln12_fu_231_p1(7 - 1 downto 0);
    i_vec_2_ce0 <= i_vec_2_ce0_local;

    i_vec_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln12_fu_211_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_vec_2_ce0_local <= ap_const_logic_1;
        else 
            i_vec_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_3_address0 <= zext_ln12_fu_231_p1(7 - 1 downto 0);
    i_vec_3_ce0 <= i_vec_3_ce0_local;

    i_vec_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln12_fu_211_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_vec_3_ce0_local <= ap_const_logic_1;
        else 
            i_vec_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_4_address0 <= zext_ln12_fu_231_p1(7 - 1 downto 0);
    i_vec_4_ce0 <= i_vec_4_ce0_local;

    i_vec_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln12_fu_211_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_vec_4_ce0_local <= ap_const_logic_1;
        else 
            i_vec_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_5_address0 <= zext_ln12_fu_231_p1(7 - 1 downto 0);
    i_vec_5_ce0 <= i_vec_5_ce0_local;

    i_vec_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln12_fu_211_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_vec_5_ce0_local <= ap_const_logic_1;
        else 
            i_vec_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_6_address0 <= zext_ln12_fu_231_p1(7 - 1 downto 0);
    i_vec_6_ce0 <= i_vec_6_ce0_local;

    i_vec_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln12_fu_211_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_vec_6_ce0_local <= ap_const_logic_1;
        else 
            i_vec_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_7_address0 <= zext_ln12_fu_231_p1(7 - 1 downto 0);
    i_vec_7_ce0 <= i_vec_7_ce0_local;

    i_vec_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln12_fu_211_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln12_fu_211_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_vec_7_ce0_local <= ap_const_logic_1;
        else 
            i_vec_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln12_fu_211_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv10_300) else "0";
    lshr_ln_fu_221_p4 <= ap_sig_allocacmp_i_2(9 downto 3);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_280_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln12_fu_217_p1 <= ap_sig_allocacmp_i_2(3 - 1 downto 0);

    vector_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, vector_stream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vector_stream_blk_n <= vector_stream_full_n;
        else 
            vector_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vector_stream_din <= bitcast_ln15_fu_319_p1;
    vector_stream_write <= vector_stream_write_local;

    vector_stream_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vector_stream_write_local <= ap_const_logic_1;
        else 
            vector_stream_write_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_221_p4),64));
end behav;
