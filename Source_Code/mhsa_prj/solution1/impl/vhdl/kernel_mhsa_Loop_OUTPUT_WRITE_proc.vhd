-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_Loop_OUTPUT_WRITE_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    xb2_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_0_ce0 : OUT STD_LOGIC;
    xb2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_1_ce0 : OUT STD_LOGIC;
    xb2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_2_ce0 : OUT STD_LOGIC;
    xb2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_3_ce0 : OUT STD_LOGIC;
    xb2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_4_ce0 : OUT STD_LOGIC;
    xb2_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_5_ce0 : OUT STD_LOGIC;
    xb2_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_6_ce0 : OUT STD_LOGIC;
    xb2_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_7_ce0 : OUT STD_LOGIC;
    xb2_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_8_ce0 : OUT STD_LOGIC;
    xb2_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_9_ce0 : OUT STD_LOGIC;
    xb2_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_10_ce0 : OUT STD_LOGIC;
    xb2_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_11_ce0 : OUT STD_LOGIC;
    xb2_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_12_ce0 : OUT STD_LOGIC;
    xb2_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_13_ce0 : OUT STD_LOGIC;
    xb2_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_14_ce0 : OUT STD_LOGIC;
    xb2_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xb2_15_ce0 : OUT STD_LOGIC;
    xb2_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_Loop_OUTPUT_WRITE_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_300 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_2FF : STD_LOGIC_VECTOR (9 downto 0) := "1011111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal first_iter_0_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io_grp1 : BOOLEAN;
    signal icmp_ln166_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp0_stage0_iter13_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln166_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal gmem0_blk_n_W : STD_LOGIC;
    signal gmem0_blk_n_B : STD_LOGIC;
    signal p_read_1_reg_625 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal first_iter_0_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln166_fu_396_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln166_reg_634 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln166_reg_719_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_719_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_533_p35 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln166_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln166_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal i96_fu_138 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal i_fu_390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i96_load : STD_LOGIC_VECTOR (9 downto 0);
    signal xb2_0_ce0_local : STD_LOGIC;
    signal xb2_1_ce0_local : STD_LOGIC;
    signal xb2_2_ce0_local : STD_LOGIC;
    signal xb2_3_ce0_local : STD_LOGIC;
    signal xb2_4_ce0_local : STD_LOGIC;
    signal xb2_5_ce0_local : STD_LOGIC;
    signal xb2_6_ce0_local : STD_LOGIC;
    signal xb2_7_ce0_local : STD_LOGIC;
    signal xb2_8_ce0_local : STD_LOGIC;
    signal xb2_9_ce0_local : STD_LOGIC;
    signal xb2_10_ce0_local : STD_LOGIC;
    signal xb2_11_ce0_local : STD_LOGIC;
    signal xb2_12_ce0_local : STD_LOGIC;
    signal xb2_13_ce0_local : STD_LOGIC;
    signal xb2_14_ce0_local : STD_LOGIC;
    signal xb2_15_ce0_local : STD_LOGIC;
    signal lshr_ln_fu_400_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln_fu_505_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_fu_533_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_378 : BOOLEAN;
    signal tmp_fu_533_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_533_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_sparsemux_33_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    sparsemux_33_4_32_1_1_U1192 : component kernel_mhsa_sparsemux_33_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        CASE13 => "1101",
        din13_WIDTH => 32,
        CASE14 => "1110",
        din14_WIDTH => 32,
        CASE15 => "1111",
        din15_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => xb2_0_q0,
        din1 => xb2_1_q0,
        din2 => xb2_2_q0,
        din3 => xb2_3_q0,
        din4 => xb2_4_q0,
        din5 => xb2_5_q0,
        din6 => xb2_6_q0,
        din7 => xb2_7_q0,
        din8 => xb2_8_q0,
        din9 => xb2_9_q0,
        din10 => xb2_10_q0,
        din11 => xb2_11_q0,
        din12 => xb2_12_q0,
        din13 => xb2_13_q0,
        din14 => xb2_14_q0,
        din15 => xb2_15_q0,
        def => tmp_fu_533_p33,
        sel => trunc_ln166_reg_634,
        dout => tmp_fu_533_p35);

    flow_control_loop_pipe_U : component kernel_mhsa_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    i96_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_378)) then
                i96_fu_138 <= i_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln166_reg_719_pp0_iter10_reg <= icmp_ln166_reg_719_pp0_iter9_reg;
                icmp_ln166_reg_719_pp0_iter11_reg <= icmp_ln166_reg_719_pp0_iter10_reg;
                icmp_ln166_reg_719_pp0_iter12_reg <= icmp_ln166_reg_719_pp0_iter11_reg;
                icmp_ln166_reg_719_pp0_iter2_reg <= icmp_ln166_reg_719_pp0_iter1_reg;
                icmp_ln166_reg_719_pp0_iter3_reg <= icmp_ln166_reg_719_pp0_iter2_reg;
                icmp_ln166_reg_719_pp0_iter4_reg <= icmp_ln166_reg_719_pp0_iter3_reg;
                icmp_ln166_reg_719_pp0_iter5_reg <= icmp_ln166_reg_719_pp0_iter4_reg;
                icmp_ln166_reg_719_pp0_iter6_reg <= icmp_ln166_reg_719_pp0_iter5_reg;
                icmp_ln166_reg_719_pp0_iter7_reg <= icmp_ln166_reg_719_pp0_iter6_reg;
                icmp_ln166_reg_719_pp0_iter8_reg <= icmp_ln166_reg_719_pp0_iter7_reg;
                icmp_ln166_reg_719_pp0_iter9_reg <= icmp_ln166_reg_719_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                first_iter_0_reg_630 <= first_iter_0_fu_384_p2;
                icmp_ln166_reg_719 <= icmp_ln166_fu_494_p2;
                icmp_ln166_reg_719_pp0_iter1_reg <= icmp_ln166_reg_719;
                tmp_reg_729 <= tmp_fu_533_p35;
                trunc_ln166_reg_634 <= trunc_ln166_fu_396_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then
                p_read_1_reg_625 <= p_read;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state14_pp0_stage0_iter13_grp1, ap_start_int)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13_grp1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, m_axi_gmem0_0_WREADY, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_io_grp1, ap_block_state14_pp0_stage0_iter13_grp1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13_grp1)) or ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io_grp1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, m_axi_gmem0_0_WREADY, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_io_grp1, ap_block_state14_pp0_stage0_iter13_grp1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13_grp1)) or ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io_grp1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, m_axi_gmem0_0_WREADY, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_io_grp1, ap_block_state14_pp0_stage0_iter13_grp1, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13_grp1)) or ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io_grp1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state14_pp0_stage0_iter13_grp1_assign_proc : process(m_axi_gmem0_0_BVALID, icmp_ln166_reg_719_pp0_iter12_reg)
    begin
                ap_block_state14_pp0_stage0_iter13_grp1 <= ((icmp_ln166_reg_719_pp0_iter12_reg = ap_const_lv1_1) and (m_axi_gmem0_0_BVALID = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_io_grp1_assign_proc : process(m_axi_gmem0_0_AWREADY, first_iter_0_reg_630)
    begin
                ap_block_state2_io_grp1 <= ((m_axi_gmem0_0_AWREADY = ap_const_logic_0) and (first_iter_0_reg_630 = ap_const_lv1_1));
    end process;


    ap_condition_378_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_378 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln166_fu_494_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln166_fu_494_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter13_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i96_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i96_fu_138, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i96_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i96_load <= i96_fu_138;
        end if; 
    end process;

    first_iter_0_fu_384_p2 <= "1" when (ap_sig_allocacmp_i96_load = ap_const_lv10_0) else "0";

    gmem0_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem0_0_AWREADY, first_iter_0_reg_630, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (first_iter_0_reg_630 = ap_const_lv1_1))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_gmem0_0_BVALID, icmp_ln166_reg_719_pp0_iter12_reg, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (icmp_ln166_reg_719_pp0_iter12_reg = ap_const_lv1_1))) then 
            gmem0_blk_n_B <= m_axi_gmem0_0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_0_WREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            gmem0_blk_n_W <= m_axi_gmem0_0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    i_fu_390_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i96_load) + unsigned(ap_const_lv10_1));
    icmp_ln166_fu_494_p2 <= "1" when (ap_sig_allocacmp_i96_load = ap_const_lv10_2FF) else "0";
    lshr_ln_fu_400_p4 <= ap_sig_allocacmp_i96_load(9 downto 4);
    m_axi_gmem0_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_0_AWADDR <= sext_ln166_fu_514_p1;
    m_axi_gmem0_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_0_AWLEN <= ap_const_lv64_300(32 - 1 downto 0);
    m_axi_gmem0_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_630, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (first_iter_0_reg_630 = ap_const_lv1_1))) then 
            m_axi_gmem0_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_0_BREADY_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln166_reg_719_pp0_iter12_reg, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln166_reg_719_pp0_iter12_reg = ap_const_lv1_1))) then 
            m_axi_gmem0_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_0_RREADY <= ap_const_logic_0;
    m_axi_gmem0_0_WDATA <= tmp_reg_729;
    m_axi_gmem0_0_WID <= ap_const_lv1_0;
    m_axi_gmem0_0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_0_WSTRB <= ap_const_lv4_F;
    m_axi_gmem0_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            m_axi_gmem0_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln166_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_505_p4),64));

    tmp_fu_533_p33 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln166_fu_396_p1 <= ap_sig_allocacmp_i96_load(4 - 1 downto 0);
    trunc_ln_fu_505_p4 <= p_read_1_reg_625(63 downto 2);
    xb2_0_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_0_ce0 <= xb2_0_ce0_local;

    xb2_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_0_ce0_local <= ap_const_logic_1;
        else 
            xb2_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_10_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_10_ce0 <= xb2_10_ce0_local;

    xb2_10_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_10_ce0_local <= ap_const_logic_1;
        else 
            xb2_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_11_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_11_ce0 <= xb2_11_ce0_local;

    xb2_11_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_11_ce0_local <= ap_const_logic_1;
        else 
            xb2_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_12_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_12_ce0 <= xb2_12_ce0_local;

    xb2_12_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_12_ce0_local <= ap_const_logic_1;
        else 
            xb2_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_13_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_13_ce0 <= xb2_13_ce0_local;

    xb2_13_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_13_ce0_local <= ap_const_logic_1;
        else 
            xb2_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_14_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_14_ce0 <= xb2_14_ce0_local;

    xb2_14_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_14_ce0_local <= ap_const_logic_1;
        else 
            xb2_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_15_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_15_ce0 <= xb2_15_ce0_local;

    xb2_15_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_15_ce0_local <= ap_const_logic_1;
        else 
            xb2_15_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_1_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_1_ce0 <= xb2_1_ce0_local;

    xb2_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_1_ce0_local <= ap_const_logic_1;
        else 
            xb2_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_2_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_2_ce0 <= xb2_2_ce0_local;

    xb2_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_2_ce0_local <= ap_const_logic_1;
        else 
            xb2_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_3_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_3_ce0 <= xb2_3_ce0_local;

    xb2_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_3_ce0_local <= ap_const_logic_1;
        else 
            xb2_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_4_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_4_ce0 <= xb2_4_ce0_local;

    xb2_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_4_ce0_local <= ap_const_logic_1;
        else 
            xb2_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_5_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_5_ce0 <= xb2_5_ce0_local;

    xb2_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_5_ce0_local <= ap_const_logic_1;
        else 
            xb2_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_6_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_6_ce0 <= xb2_6_ce0_local;

    xb2_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_6_ce0_local <= ap_const_logic_1;
        else 
            xb2_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_7_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_7_ce0 <= xb2_7_ce0_local;

    xb2_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_7_ce0_local <= ap_const_logic_1;
        else 
            xb2_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_8_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_8_ce0 <= xb2_8_ce0_local;

    xb2_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_8_ce0_local <= ap_const_logic_1;
        else 
            xb2_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_9_address0 <= zext_ln166_fu_410_p1(6 - 1 downto 0);
    xb2_9_ce0 <= xb2_9_ce0_local;

    xb2_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xb2_9_ce0_local <= ap_const_logic_1;
        else 
            xb2_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln166_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_400_p4),64));
end behav;
