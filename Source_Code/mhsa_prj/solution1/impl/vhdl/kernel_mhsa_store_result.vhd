-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_store_result is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    result_stream_empty_n : IN STD_LOGIC;
    result_stream_read : OUT STD_LOGIC;
    result_stream_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    result_stream_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_1_ce0 : OUT STD_LOGIC;
    out_1_we0 : OUT STD_LOGIC;
    out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_2_ce0 : OUT STD_LOGIC;
    out_2_we0 : OUT STD_LOGIC;
    out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_3_ce0 : OUT STD_LOGIC;
    out_3_we0 : OUT STD_LOGIC;
    out_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_4_ce0 : OUT STD_LOGIC;
    out_4_we0 : OUT STD_LOGIC;
    out_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_5_ce0 : OUT STD_LOGIC;
    out_5_we0 : OUT STD_LOGIC;
    out_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_6_ce0 : OUT STD_LOGIC;
    out_6_we0 : OUT STD_LOGIC;
    out_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_7_ce0 : OUT STD_LOGIC;
    out_7_we0 : OUT STD_LOGIC;
    out_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_store_result is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln66_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal result_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal trunc_ln66_fu_207_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln66_reg_312 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lshr_ln_reg_316 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln66_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln66_fu_195_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal result_stream_read_local : STD_LOGIC;
    signal out_6_we0_local : STD_LOGIC;
    signal bitcast_ln69_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_6_ce0_local : STD_LOGIC;
    signal out_5_we0_local : STD_LOGIC;
    signal out_5_ce0_local : STD_LOGIC;
    signal out_4_we0_local : STD_LOGIC;
    signal out_4_ce0_local : STD_LOGIC;
    signal out_3_we0_local : STD_LOGIC;
    signal out_3_ce0_local : STD_LOGIC;
    signal out_2_we0_local : STD_LOGIC;
    signal out_2_ce0_local : STD_LOGIC;
    signal out_1_we0_local : STD_LOGIC;
    signal out_1_ce0_local : STD_LOGIC;
    signal out_0_we0_local : STD_LOGIC;
    signal out_0_ce0_local : STD_LOGIC;
    signal out_7_we0_local : STD_LOGIC;
    signal out_7_ce0_local : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_148 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component kernel_mhsa_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                if ((icmp_ln66_fu_201_p2 = ap_const_lv1_0)) then 
                    i_fu_70 <= add_ln66_fu_195_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln_reg_316 <= ap_sig_allocacmp_i_1(9 downto 3);
                trunc_ln66_reg_312 <= trunc_ln66_fu_207_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln66_fu_195_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, result_stream_empty_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((result_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, result_stream_empty_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((result_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, result_stream_empty_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((result_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_condition_148_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_148 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln66_fu_201_p2, ap_start_int)
    begin
        if (((icmp_ln66_fu_201_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_70, ap_loop_init, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_70;
        end if; 
    end process;

    bitcast_ln69_fu_257_p1 <= result_stream_dout;
    icmp_ln66_fu_201_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv10_300) else "0";
    out_0_address0 <= zext_ln66_fu_244_p1(7 - 1 downto 0);
    out_0_ce0 <= out_0_ce0_local;

    out_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_0))) then 
            out_0_ce0_local <= ap_const_logic_1;
        else 
            out_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_0_d0 <= bitcast_ln69_fu_257_p1;
    out_0_we0 <= out_0_we0_local;

    out_0_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_0))) then 
            out_0_we0_local <= ap_const_logic_1;
        else 
            out_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_1_address0 <= zext_ln66_fu_244_p1(7 - 1 downto 0);
    out_1_ce0 <= out_1_ce0_local;

    out_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_1))) then 
            out_1_ce0_local <= ap_const_logic_1;
        else 
            out_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_1_d0 <= bitcast_ln69_fu_257_p1;
    out_1_we0 <= out_1_we0_local;

    out_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_1))) then 
            out_1_we0_local <= ap_const_logic_1;
        else 
            out_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_2_address0 <= zext_ln66_fu_244_p1(7 - 1 downto 0);
    out_2_ce0 <= out_2_ce0_local;

    out_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_2))) then 
            out_2_ce0_local <= ap_const_logic_1;
        else 
            out_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_2_d0 <= bitcast_ln69_fu_257_p1;
    out_2_we0 <= out_2_we0_local;

    out_2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_2))) then 
            out_2_we0_local <= ap_const_logic_1;
        else 
            out_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_3_address0 <= zext_ln66_fu_244_p1(7 - 1 downto 0);
    out_3_ce0 <= out_3_ce0_local;

    out_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_3))) then 
            out_3_ce0_local <= ap_const_logic_1;
        else 
            out_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_3_d0 <= bitcast_ln69_fu_257_p1;
    out_3_we0 <= out_3_we0_local;

    out_3_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_3))) then 
            out_3_we0_local <= ap_const_logic_1;
        else 
            out_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_4_address0 <= zext_ln66_fu_244_p1(7 - 1 downto 0);
    out_4_ce0 <= out_4_ce0_local;

    out_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_4))) then 
            out_4_ce0_local <= ap_const_logic_1;
        else 
            out_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_4_d0 <= bitcast_ln69_fu_257_p1;
    out_4_we0 <= out_4_we0_local;

    out_4_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_4))) then 
            out_4_we0_local <= ap_const_logic_1;
        else 
            out_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_5_address0 <= zext_ln66_fu_244_p1(7 - 1 downto 0);
    out_5_ce0 <= out_5_ce0_local;

    out_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_5))) then 
            out_5_ce0_local <= ap_const_logic_1;
        else 
            out_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_5_d0 <= bitcast_ln69_fu_257_p1;
    out_5_we0 <= out_5_we0_local;

    out_5_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_5))) then 
            out_5_we0_local <= ap_const_logic_1;
        else 
            out_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_6_address0 <= zext_ln66_fu_244_p1(7 - 1 downto 0);
    out_6_ce0 <= out_6_ce0_local;

    out_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_6))) then 
            out_6_ce0_local <= ap_const_logic_1;
        else 
            out_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_6_d0 <= bitcast_ln69_fu_257_p1;
    out_6_we0 <= out_6_we0_local;

    out_6_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_6))) then 
            out_6_we0_local <= ap_const_logic_1;
        else 
            out_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_7_address0 <= zext_ln66_fu_244_p1(7 - 1 downto 0);
    out_7_ce0 <= out_7_ce0_local;

    out_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_7))) then 
            out_7_ce0_local <= ap_const_logic_1;
        else 
            out_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_7_d0 <= bitcast_ln69_fu_257_p1;
    out_7_we0 <= out_7_we0_local;

    out_7_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_312, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_reg_312 = ap_const_lv3_7))) then 
            out_7_we0_local <= ap_const_logic_1;
        else 
            out_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    result_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, result_stream_empty_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_stream_blk_n <= result_stream_empty_n;
        else 
            result_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    result_stream_read <= result_stream_read_local;

    result_stream_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_stream_read_local <= ap_const_logic_1;
        else 
            result_stream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln66_fu_207_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    zext_ln66_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_316),64));
end behav;
