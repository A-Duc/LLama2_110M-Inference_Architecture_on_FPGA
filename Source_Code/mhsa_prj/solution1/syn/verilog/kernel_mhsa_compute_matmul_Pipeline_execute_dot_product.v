// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_compute_matmul_Pipeline_execute_dot_product (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        matrix_stream_dout,
        matrix_stream_empty_n,
        matrix_stream_read,
        matrix_stream_num_data_valid,
        matrix_stream_fifo_cap,
        result_stream_din,
        result_stream_full_n,
        result_stream_write,
        result_stream_num_data_valid,
        result_stream_fifo_cap,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_address0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_q0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_address0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_q0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_address0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_q0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_address0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0,
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] matrix_stream_dout;
input   matrix_stream_empty_n;
output   matrix_stream_read;
input  [6:0] matrix_stream_num_data_valid;
input  [6:0] matrix_stream_fifo_cap;
output  [31:0] result_stream_din;
input   result_stream_full_n;
output   result_stream_write;
input  [31:0] result_stream_num_data_valid;
input  [31:0] result_stream_fifo_cap;
output  [7:0] compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_address0;
output   compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0;
input  [31:0] compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_q0;
output  [7:0] compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_address0;
output   compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0;
input  [31:0] compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_q0;
output  [7:0] compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_address0;
output   compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0;
input  [31:0] compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_q0;
output  [7:0] compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_address0;
output   compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0;
input  [31:0] compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln53_1_reg_385;
reg   [0:0] icmp_ln53_1_reg_385_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln50_fu_182_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    result_stream_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    matrix_stream_blk_n;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln53_fu_191_p2;
reg   [0:0] icmp_ln53_reg_355;
reg   [0:0] icmp_ln53_reg_355_pp0_iter1_reg;
wire   [1:0] trunc_ln53_fu_205_p1;
reg   [1:0] trunc_ln53_reg_360;
wire   [0:0] icmp_ln53_1_fu_249_p2;
reg   [0:0] icmp_ln53_1_reg_385_pp0_iter1_reg;
wire   [31:0] tmp_fu_265_p11;
reg   [31:0] tmp_reg_389;
reg   [31:0] matrix_stream_read_reg_395;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [63:0] zext_ln52_fu_219_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] sum_local_01_fu_74;
wire   [31:0] grp_fu_151_p4;
reg   [31:0] ap_sig_allocacmp_sum_local_01_load;
wire    ap_loop_init;
reg   [9:0] j_fu_78;
wire   [9:0] add_ln53_fu_243_p2;
reg   [9:0] ap_sig_allocacmp_j_load;
reg   [19:0] indvar_flatten_fu_82;
wire   [19:0] add_ln50_fu_176_p2;
reg   [19:0] ap_sig_allocacmp_indvar_flatten_load;
reg    matrix_stream_read_local;
wire   [31:0] bitcast_ln58_fu_316_p1;
reg    ap_block_pp0_stage0_01001_grp1;
reg    result_stream_write_local;
reg    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local;
reg    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local;
reg    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local;
reg    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local;
wire   [31:0] grp_fu_151_p2;
wire   [31:0] grp_fu_151_p3;
wire   [9:0] select_ln50_fu_197_p3;
wire   [7:0] lshr_ln_fu_209_p4;
wire   [31:0] tmp_fu_265_p9;
reg    grp_fu_151_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_fu_265_p1;
wire   [1:0] tmp_fu_265_p3;
wire  signed [1:0] tmp_fu_265_p5;
wire  signed [1:0] tmp_fu_265_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 sum_local_01_fu_74 = 32'd0;
#0 j_fu_78 = 10'd0;
#0 indvar_flatten_fu_82 = 20'd0;
#0 ap_done_reg = 1'b0;
end

kernel_mhsa_fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1_U261(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(tmp_reg_389),
    .din2(grp_fu_151_p2),
    .din3(grp_fu_151_p3),
    .ce(grp_fu_151_ce),
    .dout(grp_fu_151_p4)
);

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U262(
    .din0(compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_q0),
    .din1(compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_q0),
    .din2(compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_q0),
    .din3(compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_q0),
    .def(tmp_fu_265_p9),
    .sel(trunc_ln53_reg_360),
    .dout(tmp_fu_265_p11)
);

kernel_mhsa_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_82 <= add_ln50_fu_176_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 20'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_78 <= add_ln53_fu_243_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_78 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            sum_local_01_fu_74 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            sum_local_01_fu_74 <= grp_fu_151_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln53_1_reg_385 <= icmp_ln53_1_fu_249_p2;
        icmp_ln53_1_reg_385_pp0_iter1_reg <= icmp_ln53_1_reg_385;
        icmp_ln53_reg_355 <= icmp_ln53_fu_191_p2;
        icmp_ln53_reg_355_pp0_iter1_reg <= icmp_ln53_reg_355;
        tmp_reg_389 <= tmp_fu_265_p11;
        trunc_ln53_reg_360 <= trunc_ln53_fu_205_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln53_1_reg_385_pp0_iter2_reg <= icmp_ln53_1_reg_385_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        matrix_stream_read_reg_395 <= matrix_stream_dout;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 20'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_sum_local_01_load = grp_fu_151_p4;
    end else begin
        ap_sig_allocacmp_sum_local_01_load = sum_local_01_fu_74;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local = 1'b1;
    end else begin
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local = 1'b1;
    end else begin
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local = 1'b1;
    end else begin
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local = 1'b1;
    end else begin
        compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_151_ce = 1'b1;
    end else begin
        grp_fu_151_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        matrix_stream_blk_n = matrix_stream_empty_n;
    end else begin
        matrix_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        matrix_stream_read_local = 1'b1;
    end else begin
        matrix_stream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln53_1_reg_385_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        result_stream_blk_n = result_stream_full_n;
    end else begin
        result_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln53_1_reg_385_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        result_stream_write_local = 1'b1;
    end else begin
        result_stream_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_176_p2 = (ap_sig_allocacmp_indvar_flatten_load + 20'd1);

assign add_ln53_fu_243_p2 = (select_ln50_fu_197_p3 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)) | ((matrix_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)) | ((matrix_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)) | ((matrix_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)) | ((matrix_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3_grp1 = ((icmp_ln53_1_reg_385_pp0_iter2_reg == 1'd1) & (result_stream_full_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln58_fu_316_p1 = grp_fu_151_p4;

assign compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_address0 = zext_ln52_fu_219_p1;

assign compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0 = compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local;

assign compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_address0 = zext_ln52_fu_219_p1;

assign compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0 = compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local;

assign compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_address0 = zext_ln52_fu_219_p1;

assign compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0 = compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local;

assign compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_address0 = zext_ln52_fu_219_p1;

assign compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0 = compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local;

assign grp_fu_151_p2 = matrix_stream_read_reg_395;

assign grp_fu_151_p3 = ((icmp_ln53_reg_355_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_sum_local_01_load);

assign icmp_ln50_fu_182_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 20'd589824) ? 1'b1 : 1'b0);

assign icmp_ln53_1_fu_249_p2 = ((add_ln53_fu_243_p2 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_191_p2 = ((ap_sig_allocacmp_j_load == 10'd768) ? 1'b1 : 1'b0);

assign lshr_ln_fu_209_p4 = {{select_ln50_fu_197_p3[9:2]}};

assign matrix_stream_read = matrix_stream_read_local;

assign result_stream_din = bitcast_ln58_fu_316_p1;

assign result_stream_write = result_stream_write_local;

assign select_ln50_fu_197_p3 = ((icmp_ln53_fu_191_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j_load);

assign tmp_fu_265_p9 = 'bx;

assign trunc_ln53_fu_205_p1 = select_ln50_fu_197_p3[1:0];

assign zext_ln52_fu_219_p1 = lshr_ln_fu_209_p4;

endmodule //kernel_mhsa_compute_matmul_Pipeline_execute_dot_product
