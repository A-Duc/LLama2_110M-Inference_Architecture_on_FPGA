// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_store_result (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        result_stream_dout,
        result_stream_empty_n,
        result_stream_read,
        result_stream_num_data_valid,
        result_stream_fifo_cap,
        out_0_address0,
        out_0_ce0,
        out_0_we0,
        out_0_d0,
        out_1_address0,
        out_1_ce0,
        out_1_we0,
        out_1_d0,
        out_2_address0,
        out_2_ce0,
        out_2_we0,
        out_2_d0,
        out_3_address0,
        out_3_ce0,
        out_3_we0,
        out_3_d0,
        out_4_address0,
        out_4_ce0,
        out_4_we0,
        out_4_d0,
        out_5_address0,
        out_5_ce0,
        out_5_we0,
        out_5_d0,
        out_6_address0,
        out_6_ce0,
        out_6_we0,
        out_6_d0,
        out_7_address0,
        out_7_ce0,
        out_7_we0,
        out_7_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] result_stream_dout;
input   result_stream_empty_n;
output   result_stream_read;
input  [6:0] result_stream_num_data_valid;
input  [6:0] result_stream_fifo_cap;
output  [6:0] out_0_address0;
output   out_0_ce0;
output   out_0_we0;
output  [31:0] out_0_d0;
output  [6:0] out_1_address0;
output   out_1_ce0;
output   out_1_we0;
output  [31:0] out_1_d0;
output  [6:0] out_2_address0;
output   out_2_ce0;
output   out_2_we0;
output  [31:0] out_2_d0;
output  [6:0] out_3_address0;
output   out_3_ce0;
output   out_3_we0;
output  [31:0] out_3_d0;
output  [6:0] out_4_address0;
output   out_4_ce0;
output   out_4_we0;
output  [31:0] out_4_d0;
output  [6:0] out_5_address0;
output   out_5_ce0;
output   out_5_we0;
output  [31:0] out_5_d0;
output  [6:0] out_6_address0;
output   out_6_ce0;
output   out_6_we0;
output  [31:0] out_6_d0;
output  [6:0] out_7_address0;
output   out_7_ce0;
output   out_7_we0;
output  [31:0] out_7_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln66_fu_201_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    result_stream_blk_n;
wire    ap_block_pp0_stage0_grp1;
wire   [2:0] trunc_ln66_fu_207_p1;
reg   [2:0] trunc_ln66_reg_312;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] lshr_ln_reg_316;
wire   [63:0] zext_ln66_fu_244_p1;
reg   [9:0] i_fu_70;
wire   [9:0] add_ln66_fu_195_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001_grp1;
reg    result_stream_read_local;
reg    out_6_we0_local;
wire   [31:0] bitcast_ln69_fu_257_p1;
reg    out_6_ce0_local;
reg    out_5_we0_local;
reg    out_5_ce0_local;
reg    out_4_we0_local;
reg    out_4_ce0_local;
reg    out_3_we0_local;
reg    out_3_ce0_local;
reg    out_2_we0_local;
reg    out_2_ce0_local;
reg    out_1_we0_local;
reg    out_1_ce0_local;
reg    out_0_we0_local;
reg    out_0_ce0_local;
reg    out_7_we0_local;
reg    out_7_ce0_local;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_148;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i_fu_70 = 10'd0;
end

kernel_mhsa_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if ((icmp_ln66_fu_201_p2 == 1'd0)) begin
            i_fu_70 <= add_ln66_fu_195_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_316 <= {{ap_sig_allocacmp_i_1[9:3]}};
        trunc_ln66_reg_312 <= trunc_ln66_fu_207_p1;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_201_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd0))) begin
        out_0_ce0_local = 1'b1;
    end else begin
        out_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd0))) begin
        out_0_we0_local = 1'b1;
    end else begin
        out_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd1))) begin
        out_1_ce0_local = 1'b1;
    end else begin
        out_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd1))) begin
        out_1_we0_local = 1'b1;
    end else begin
        out_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd2))) begin
        out_2_ce0_local = 1'b1;
    end else begin
        out_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd2))) begin
        out_2_we0_local = 1'b1;
    end else begin
        out_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd3))) begin
        out_3_ce0_local = 1'b1;
    end else begin
        out_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd3))) begin
        out_3_we0_local = 1'b1;
    end else begin
        out_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd4))) begin
        out_4_ce0_local = 1'b1;
    end else begin
        out_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd4))) begin
        out_4_we0_local = 1'b1;
    end else begin
        out_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd5))) begin
        out_5_ce0_local = 1'b1;
    end else begin
        out_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd5))) begin
        out_5_we0_local = 1'b1;
    end else begin
        out_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd6))) begin
        out_6_ce0_local = 1'b1;
    end else begin
        out_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd6))) begin
        out_6_we0_local = 1'b1;
    end else begin
        out_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd7))) begin
        out_7_ce0_local = 1'b1;
    end else begin
        out_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_reg_312 == 3'd7))) begin
        out_7_we0_local = 1'b1;
    end else begin
        out_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        result_stream_blk_n = result_stream_empty_n;
    end else begin
        result_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        result_stream_read_local = 1'b1;
    end else begin
        result_stream_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_195_p2 = (ap_sig_allocacmp_i_1 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((result_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_done_reg == 1'b1) | ((result_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((result_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_condition_148 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln69_fu_257_p1 = result_stream_dout;

assign icmp_ln66_fu_201_p2 = ((ap_sig_allocacmp_i_1 == 10'd768) ? 1'b1 : 1'b0);

assign out_0_address0 = zext_ln66_fu_244_p1;

assign out_0_ce0 = out_0_ce0_local;

assign out_0_d0 = bitcast_ln69_fu_257_p1;

assign out_0_we0 = out_0_we0_local;

assign out_1_address0 = zext_ln66_fu_244_p1;

assign out_1_ce0 = out_1_ce0_local;

assign out_1_d0 = bitcast_ln69_fu_257_p1;

assign out_1_we0 = out_1_we0_local;

assign out_2_address0 = zext_ln66_fu_244_p1;

assign out_2_ce0 = out_2_ce0_local;

assign out_2_d0 = bitcast_ln69_fu_257_p1;

assign out_2_we0 = out_2_we0_local;

assign out_3_address0 = zext_ln66_fu_244_p1;

assign out_3_ce0 = out_3_ce0_local;

assign out_3_d0 = bitcast_ln69_fu_257_p1;

assign out_3_we0 = out_3_we0_local;

assign out_4_address0 = zext_ln66_fu_244_p1;

assign out_4_ce0 = out_4_ce0_local;

assign out_4_d0 = bitcast_ln69_fu_257_p1;

assign out_4_we0 = out_4_we0_local;

assign out_5_address0 = zext_ln66_fu_244_p1;

assign out_5_ce0 = out_5_ce0_local;

assign out_5_d0 = bitcast_ln69_fu_257_p1;

assign out_5_we0 = out_5_we0_local;

assign out_6_address0 = zext_ln66_fu_244_p1;

assign out_6_ce0 = out_6_ce0_local;

assign out_6_d0 = bitcast_ln69_fu_257_p1;

assign out_6_we0 = out_6_we0_local;

assign out_7_address0 = zext_ln66_fu_244_p1;

assign out_7_ce0 = out_7_ce0_local;

assign out_7_d0 = bitcast_ln69_fu_257_p1;

assign out_7_we0 = out_7_we0_local;

assign result_stream_read = result_stream_read_local;

assign trunc_ln66_fu_207_p1 = ap_sig_allocacmp_i_1[2:0];

assign zext_ln66_fu_244_p1 = lshr_ln_reg_316;

endmodule //kernel_mhsa_store_result
