// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_Loop_OUTPUT_WRITE_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        p_read,
        xb2_0_address0,
        xb2_0_ce0,
        xb2_0_q0,
        xb2_1_address0,
        xb2_1_ce0,
        xb2_1_q0,
        xb2_2_address0,
        xb2_2_ce0,
        xb2_2_q0,
        xb2_3_address0,
        xb2_3_ce0,
        xb2_3_q0,
        xb2_4_address0,
        xb2_4_ce0,
        xb2_4_q0,
        xb2_5_address0,
        xb2_5_ce0,
        xb2_5_q0,
        xb2_6_address0,
        xb2_6_ce0,
        xb2_6_q0,
        xb2_7_address0,
        xb2_7_ce0,
        xb2_7_q0,
        xb2_8_address0,
        xb2_8_ce0,
        xb2_8_q0,
        xb2_9_address0,
        xb2_9_ce0,
        xb2_9_q0,
        xb2_10_address0,
        xb2_10_ce0,
        xb2_10_q0,
        xb2_11_address0,
        xb2_11_ce0,
        xb2_11_q0,
        xb2_12_address0,
        xb2_12_ce0,
        xb2_12_q0,
        xb2_13_address0,
        xb2_13_ce0,
        xb2_13_q0,
        xb2_14_address0,
        xb2_14_ce0,
        xb2_14_q0,
        xb2_15_address0,
        xb2_15_ce0,
        xb2_15_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [63:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [31:0] m_axi_gmem0_0_WDATA;
output  [3:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [63:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [31:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [12:0] m_axi_gmem0_0_RFIFONUM;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
input  [63:0] p_read;
output  [5:0] xb2_0_address0;
output   xb2_0_ce0;
input  [31:0] xb2_0_q0;
output  [5:0] xb2_1_address0;
output   xb2_1_ce0;
input  [31:0] xb2_1_q0;
output  [5:0] xb2_2_address0;
output   xb2_2_ce0;
input  [31:0] xb2_2_q0;
output  [5:0] xb2_3_address0;
output   xb2_3_ce0;
input  [31:0] xb2_3_q0;
output  [5:0] xb2_4_address0;
output   xb2_4_ce0;
input  [31:0] xb2_4_q0;
output  [5:0] xb2_5_address0;
output   xb2_5_ce0;
input  [31:0] xb2_5_q0;
output  [5:0] xb2_6_address0;
output   xb2_6_ce0;
input  [31:0] xb2_6_q0;
output  [5:0] xb2_7_address0;
output   xb2_7_ce0;
input  [31:0] xb2_7_q0;
output  [5:0] xb2_8_address0;
output   xb2_8_ce0;
input  [31:0] xb2_8_q0;
output  [5:0] xb2_9_address0;
output   xb2_9_ce0;
input  [31:0] xb2_9_q0;
output  [5:0] xb2_10_address0;
output   xb2_10_ce0;
input  [31:0] xb2_10_q0;
output  [5:0] xb2_11_address0;
output   xb2_11_ce0;
input  [31:0] xb2_11_q0;
output  [5:0] xb2_12_address0;
output   xb2_12_ce0;
input  [31:0] xb2_12_q0;
output  [5:0] xb2_13_address0;
output   xb2_13_ce0;
input  [31:0] xb2_13_q0;
output  [5:0] xb2_14_address0;
output   xb2_14_ce0;
input  [31:0] xb2_14_q0;
output  [5:0] xb2_15_address0;
output   xb2_15_ce0;
input  [31:0] xb2_15_q0;

reg ap_idle;
reg m_axi_gmem0_0_AWVALID;
reg m_axi_gmem0_0_WVALID;
reg m_axi_gmem0_0_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] first_iter_0_reg_630;
reg    ap_block_state2_io_grp1;
reg   [0:0] icmp_ln166_reg_719;
reg   [0:0] icmp_ln166_reg_719_pp0_iter12_reg;
reg    ap_block_state14_pp0_stage0_iter13_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln166_fu_494_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_AW;
wire    ap_block_pp0_stage0_grp1;
reg    gmem0_blk_n_W;
reg    gmem0_blk_n_B;
reg   [63:0] p_read_1_reg_625;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [0:0] first_iter_0_fu_384_p2;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln166_fu_396_p1;
reg   [3:0] trunc_ln166_reg_634;
reg   [0:0] icmp_ln166_reg_719_pp0_iter1_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter2_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter3_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter4_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter5_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter6_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter7_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter8_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter9_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter10_reg;
reg   [0:0] icmp_ln166_reg_719_pp0_iter11_reg;
wire   [31:0] tmp_fu_533_p35;
reg   [31:0] tmp_reg_729;
wire   [63:0] zext_ln166_fu_410_p1;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln166_fu_514_p1;
reg    ap_block_pp0_stage0_01001_grp1;
reg   [9:0] i96_fu_138;
wire   [9:0] i_fu_390_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i96_load;
reg    xb2_0_ce0_local;
reg    xb2_1_ce0_local;
reg    xb2_2_ce0_local;
reg    xb2_3_ce0_local;
reg    xb2_4_ce0_local;
reg    xb2_5_ce0_local;
reg    xb2_6_ce0_local;
reg    xb2_7_ce0_local;
reg    xb2_8_ce0_local;
reg    xb2_9_ce0_local;
reg    xb2_10_ce0_local;
reg    xb2_11_ce0_local;
reg    xb2_12_ce0_local;
reg    xb2_13_ce0_local;
reg    xb2_14_ce0_local;
reg    xb2_15_ce0_local;
wire   [5:0] lshr_ln_fu_400_p4;
wire   [61:0] trunc_ln_fu_505_p4;
wire   [31:0] tmp_fu_533_p33;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_378;
wire   [3:0] tmp_fu_533_p1;
wire   [3:0] tmp_fu_533_p3;
wire   [3:0] tmp_fu_533_p5;
wire   [3:0] tmp_fu_533_p7;
wire   [3:0] tmp_fu_533_p9;
wire   [3:0] tmp_fu_533_p11;
wire   [3:0] tmp_fu_533_p13;
wire   [3:0] tmp_fu_533_p15;
wire  signed [3:0] tmp_fu_533_p17;
wire  signed [3:0] tmp_fu_533_p19;
wire  signed [3:0] tmp_fu_533_p21;
wire  signed [3:0] tmp_fu_533_p23;
wire  signed [3:0] tmp_fu_533_p25;
wire  signed [3:0] tmp_fu_533_p27;
wire  signed [3:0] tmp_fu_533_p29;
wire  signed [3:0] tmp_fu_533_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i96_fu_138 = 10'd0;
end

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U1192(
    .din0(xb2_0_q0),
    .din1(xb2_1_q0),
    .din2(xb2_2_q0),
    .din3(xb2_3_q0),
    .din4(xb2_4_q0),
    .din5(xb2_5_q0),
    .din6(xb2_6_q0),
    .din7(xb2_7_q0),
    .din8(xb2_8_q0),
    .din9(xb2_9_q0),
    .din10(xb2_10_q0),
    .din11(xb2_11_q0),
    .din12(xb2_12_q0),
    .din13(xb2_13_q0),
    .din14(xb2_14_q0),
    .din15(xb2_15_q0),
    .def(tmp_fu_533_p33),
    .sel(trunc_ln166_reg_634),
    .dout(tmp_fu_533_p35)
);

kernel_mhsa_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter13_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_378)) begin
        i96_fu_138 <= i_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln166_reg_719_pp0_iter10_reg <= icmp_ln166_reg_719_pp0_iter9_reg;
        icmp_ln166_reg_719_pp0_iter11_reg <= icmp_ln166_reg_719_pp0_iter10_reg;
        icmp_ln166_reg_719_pp0_iter12_reg <= icmp_ln166_reg_719_pp0_iter11_reg;
        icmp_ln166_reg_719_pp0_iter2_reg <= icmp_ln166_reg_719_pp0_iter1_reg;
        icmp_ln166_reg_719_pp0_iter3_reg <= icmp_ln166_reg_719_pp0_iter2_reg;
        icmp_ln166_reg_719_pp0_iter4_reg <= icmp_ln166_reg_719_pp0_iter3_reg;
        icmp_ln166_reg_719_pp0_iter5_reg <= icmp_ln166_reg_719_pp0_iter4_reg;
        icmp_ln166_reg_719_pp0_iter6_reg <= icmp_ln166_reg_719_pp0_iter5_reg;
        icmp_ln166_reg_719_pp0_iter7_reg <= icmp_ln166_reg_719_pp0_iter6_reg;
        icmp_ln166_reg_719_pp0_iter8_reg <= icmp_ln166_reg_719_pp0_iter7_reg;
        icmp_ln166_reg_719_pp0_iter9_reg <= icmp_ln166_reg_719_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        first_iter_0_reg_630 <= first_iter_0_fu_384_p2;
        icmp_ln166_reg_719 <= icmp_ln166_fu_494_p2;
        icmp_ln166_reg_719_pp0_iter1_reg <= icmp_ln166_reg_719;
        tmp_reg_729 <= tmp_fu_533_p35;
        trunc_ln166_reg_634 <= trunc_ln166_fu_396_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        p_read_1_reg_625 <= p_read;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln166_fu_494_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter13_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i96_load = 10'd0;
    end else begin
        ap_sig_allocacmp_i96_load = i96_fu_138;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp1) & (first_iter_0_reg_630 == 1'd1))) begin
        gmem0_blk_n_AW = m_axi_gmem0_0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln166_reg_719_pp0_iter12_reg == 1'd1))) begin
        gmem0_blk_n_B = m_axi_gmem0_0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        gmem0_blk_n_W = m_axi_gmem0_0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (first_iter_0_reg_630 == 1'd1))) begin
        m_axi_gmem0_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln166_reg_719_pp0_iter12_reg == 1'd1))) begin
        m_axi_gmem0_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem0_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        m_axi_gmem0_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_0_ce0_local = 1'b1;
    end else begin
        xb2_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_10_ce0_local = 1'b1;
    end else begin
        xb2_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_11_ce0_local = 1'b1;
    end else begin
        xb2_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_12_ce0_local = 1'b1;
    end else begin
        xb2_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_13_ce0_local = 1'b1;
    end else begin
        xb2_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_14_ce0_local = 1'b1;
    end else begin
        xb2_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_15_ce0_local = 1'b1;
    end else begin
        xb2_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_1_ce0_local = 1'b1;
    end else begin
        xb2_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_2_ce0_local = 1'b1;
    end else begin
        xb2_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_3_ce0_local = 1'b1;
    end else begin
        xb2_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_4_ce0_local = 1'b1;
    end else begin
        xb2_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_5_ce0_local = 1'b1;
    end else begin
        xb2_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_6_ce0_local = 1'b1;
    end else begin
        xb2_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_7_ce0_local = 1'b1;
    end else begin
        xb2_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_8_ce0_local = 1'b1;
    end else begin
        xb2_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb2_9_ce0_local = 1'b1;
    end else begin
        xb2_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13_grp1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13_grp1)) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io_grp1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13_grp1)) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io_grp1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13_grp1)) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io_grp1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13_grp1 = ((icmp_ln166_reg_719_pp0_iter12_reg == 1'd1) & (m_axi_gmem0_0_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_io_grp1 = ((m_axi_gmem0_0_AWREADY == 1'b0) & (first_iter_0_reg_630 == 1'd1));
end

always @ (*) begin
    ap_condition_378 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign first_iter_0_fu_384_p2 = ((ap_sig_allocacmp_i96_load == 10'd0) ? 1'b1 : 1'b0);

assign i_fu_390_p2 = (ap_sig_allocacmp_i96_load + 10'd1);

assign icmp_ln166_fu_494_p2 = ((ap_sig_allocacmp_i96_load == 10'd767) ? 1'b1 : 1'b0);

assign lshr_ln_fu_400_p4 = {{ap_sig_allocacmp_i96_load[9:4]}};

assign m_axi_gmem0_0_ARADDR = 64'd0;

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLEN = 32'd0;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_ARVALID = 1'b0;

assign m_axi_gmem0_0_AWADDR = sext_ln166_fu_514_p1;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 64'd768;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_RREADY = 1'b0;

assign m_axi_gmem0_0_WDATA = tmp_reg_729;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 4'd15;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign sext_ln166_fu_514_p1 = $signed(trunc_ln_fu_505_p4);

assign tmp_fu_533_p33 = 'bx;

assign trunc_ln166_fu_396_p1 = ap_sig_allocacmp_i96_load[3:0];

assign trunc_ln_fu_505_p4 = {{p_read_1_reg_625[63:2]}};

assign xb2_0_address0 = zext_ln166_fu_410_p1;

assign xb2_0_ce0 = xb2_0_ce0_local;

assign xb2_10_address0 = zext_ln166_fu_410_p1;

assign xb2_10_ce0 = xb2_10_ce0_local;

assign xb2_11_address0 = zext_ln166_fu_410_p1;

assign xb2_11_ce0 = xb2_11_ce0_local;

assign xb2_12_address0 = zext_ln166_fu_410_p1;

assign xb2_12_ce0 = xb2_12_ce0_local;

assign xb2_13_address0 = zext_ln166_fu_410_p1;

assign xb2_13_ce0 = xb2_13_ce0_local;

assign xb2_14_address0 = zext_ln166_fu_410_p1;

assign xb2_14_ce0 = xb2_14_ce0_local;

assign xb2_15_address0 = zext_ln166_fu_410_p1;

assign xb2_15_ce0 = xb2_15_ce0_local;

assign xb2_1_address0 = zext_ln166_fu_410_p1;

assign xb2_1_ce0 = xb2_1_ce0_local;

assign xb2_2_address0 = zext_ln166_fu_410_p1;

assign xb2_2_ce0 = xb2_2_ce0_local;

assign xb2_3_address0 = zext_ln166_fu_410_p1;

assign xb2_3_ce0 = xb2_3_ce0_local;

assign xb2_4_address0 = zext_ln166_fu_410_p1;

assign xb2_4_ce0 = xb2_4_ce0_local;

assign xb2_5_address0 = zext_ln166_fu_410_p1;

assign xb2_5_ce0 = xb2_5_ce0_local;

assign xb2_6_address0 = zext_ln166_fu_410_p1;

assign xb2_6_ce0 = xb2_6_ce0_local;

assign xb2_7_address0 = zext_ln166_fu_410_p1;

assign xb2_7_ce0 = xb2_7_ce0_local;

assign xb2_8_address0 = zext_ln166_fu_410_p1;

assign xb2_8_ce0 = xb2_8_ce0_local;

assign xb2_9_address0 = zext_ln166_fu_410_p1;

assign xb2_9_ce0 = xb2_9_ce0_local;

assign zext_ln166_fu_410_p1 = lshr_ln_fu_400_p4;

endmodule //kernel_mhsa_Loop_OUTPUT_WRITE_proc
