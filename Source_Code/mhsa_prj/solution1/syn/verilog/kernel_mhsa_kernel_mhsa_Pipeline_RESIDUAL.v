// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_kernel_mhsa_Pipeline_RESIDUAL (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_input_14_address0,
        current_input_14_ce0,
        current_input_14_we0,
        current_input_14_d0,
        current_input_14_address1,
        current_input_14_ce1,
        current_input_14_q1,
        current_input_13_address0,
        current_input_13_ce0,
        current_input_13_we0,
        current_input_13_d0,
        current_input_13_address1,
        current_input_13_ce1,
        current_input_13_q1,
        current_input_12_address0,
        current_input_12_ce0,
        current_input_12_we0,
        current_input_12_d0,
        current_input_12_address1,
        current_input_12_ce1,
        current_input_12_q1,
        current_input_11_address0,
        current_input_11_ce0,
        current_input_11_we0,
        current_input_11_d0,
        current_input_11_address1,
        current_input_11_ce1,
        current_input_11_q1,
        current_input_10_address0,
        current_input_10_ce0,
        current_input_10_we0,
        current_input_10_d0,
        current_input_10_address1,
        current_input_10_ce1,
        current_input_10_q1,
        current_input_9_address0,
        current_input_9_ce0,
        current_input_9_we0,
        current_input_9_d0,
        current_input_9_address1,
        current_input_9_ce1,
        current_input_9_q1,
        current_input_8_address0,
        current_input_8_ce0,
        current_input_8_we0,
        current_input_8_d0,
        current_input_8_address1,
        current_input_8_ce1,
        current_input_8_q1,
        current_input_address0,
        current_input_ce0,
        current_input_we0,
        current_input_d0,
        current_input_address1,
        current_input_ce1,
        current_input_q1,
        xb2_address0,
        xb2_ce0,
        xb2_q0,
        xb2_1_address0,
        xb2_1_ce0,
        xb2_1_q0,
        xb2_2_address0,
        xb2_2_ce0,
        xb2_2_q0,
        xb2_3_address0,
        xb2_3_ce0,
        xb2_3_q0,
        xb2_4_address0,
        xb2_4_ce0,
        xb2_4_q0,
        xb2_5_address0,
        xb2_5_ce0,
        xb2_5_q0,
        xb2_6_address0,
        xb2_6_ce0,
        xb2_6_q0,
        xb2_7_address0,
        xb2_7_ce0,
        xb2_7_q0,
        grp_fu_2178_p_din0,
        grp_fu_2178_p_din1,
        grp_fu_2178_p_opcode,
        grp_fu_2178_p_dout0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] current_input_14_address0;
output   current_input_14_ce0;
output   current_input_14_we0;
output  [31:0] current_input_14_d0;
output  [6:0] current_input_14_address1;
output   current_input_14_ce1;
input  [31:0] current_input_14_q1;
output  [6:0] current_input_13_address0;
output   current_input_13_ce0;
output   current_input_13_we0;
output  [31:0] current_input_13_d0;
output  [6:0] current_input_13_address1;
output   current_input_13_ce1;
input  [31:0] current_input_13_q1;
output  [6:0] current_input_12_address0;
output   current_input_12_ce0;
output   current_input_12_we0;
output  [31:0] current_input_12_d0;
output  [6:0] current_input_12_address1;
output   current_input_12_ce1;
input  [31:0] current_input_12_q1;
output  [6:0] current_input_11_address0;
output   current_input_11_ce0;
output   current_input_11_we0;
output  [31:0] current_input_11_d0;
output  [6:0] current_input_11_address1;
output   current_input_11_ce1;
input  [31:0] current_input_11_q1;
output  [6:0] current_input_10_address0;
output   current_input_10_ce0;
output   current_input_10_we0;
output  [31:0] current_input_10_d0;
output  [6:0] current_input_10_address1;
output   current_input_10_ce1;
input  [31:0] current_input_10_q1;
output  [6:0] current_input_9_address0;
output   current_input_9_ce0;
output   current_input_9_we0;
output  [31:0] current_input_9_d0;
output  [6:0] current_input_9_address1;
output   current_input_9_ce1;
input  [31:0] current_input_9_q1;
output  [6:0] current_input_8_address0;
output   current_input_8_ce0;
output   current_input_8_we0;
output  [31:0] current_input_8_d0;
output  [6:0] current_input_8_address1;
output   current_input_8_ce1;
input  [31:0] current_input_8_q1;
output  [6:0] current_input_address0;
output   current_input_ce0;
output   current_input_we0;
output  [31:0] current_input_d0;
output  [6:0] current_input_address1;
output   current_input_ce1;
input  [31:0] current_input_q1;
output  [6:0] xb2_address0;
output   xb2_ce0;
input  [31:0] xb2_q0;
output  [6:0] xb2_1_address0;
output   xb2_1_ce0;
input  [31:0] xb2_1_q0;
output  [6:0] xb2_2_address0;
output   xb2_2_ce0;
input  [31:0] xb2_2_q0;
output  [6:0] xb2_3_address0;
output   xb2_3_ce0;
input  [31:0] xb2_3_q0;
output  [6:0] xb2_4_address0;
output   xb2_4_ce0;
input  [31:0] xb2_4_q0;
output  [6:0] xb2_5_address0;
output   xb2_5_ce0;
input  [31:0] xb2_5_q0;
output  [6:0] xb2_6_address0;
output   xb2_6_ce0;
input  [31:0] xb2_6_q0;
output  [6:0] xb2_7_address0;
output   xb2_7_ce0;
input  [31:0] xb2_7_q0;
output  [31:0] grp_fu_2178_p_din0;
output  [31:0] grp_fu_2178_p_din1;
output  [1:0] grp_fu_2178_p_opcode;
input  [31:0] grp_fu_2178_p_dout0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln197_fu_347_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln197_fu_353_p1;
reg   [2:0] trunc_ln197_reg_593;
reg   [2:0] trunc_ln197_reg_593_pp0_iter1_reg;
reg   [2:0] trunc_ln197_reg_593_pp0_iter2_reg;
reg   [2:0] trunc_ln197_reg_593_pp0_iter3_reg;
reg   [6:0] current_input_addr_reg_599;
reg   [6:0] current_input_addr_reg_599_pp0_iter1_reg;
reg   [6:0] current_input_addr_reg_599_pp0_iter2_reg;
reg   [6:0] current_input_addr_reg_599_pp0_iter3_reg;
reg   [6:0] current_input_8_addr_reg_606;
reg   [6:0] current_input_8_addr_reg_606_pp0_iter1_reg;
reg   [6:0] current_input_8_addr_reg_606_pp0_iter2_reg;
reg   [6:0] current_input_8_addr_reg_606_pp0_iter3_reg;
reg   [6:0] current_input_9_addr_reg_613;
reg   [6:0] current_input_9_addr_reg_613_pp0_iter1_reg;
reg   [6:0] current_input_9_addr_reg_613_pp0_iter2_reg;
reg   [6:0] current_input_9_addr_reg_613_pp0_iter3_reg;
reg   [6:0] current_input_10_addr_reg_620;
reg   [6:0] current_input_10_addr_reg_620_pp0_iter1_reg;
reg   [6:0] current_input_10_addr_reg_620_pp0_iter2_reg;
reg   [6:0] current_input_10_addr_reg_620_pp0_iter3_reg;
reg   [6:0] current_input_11_addr_reg_627;
reg   [6:0] current_input_11_addr_reg_627_pp0_iter1_reg;
reg   [6:0] current_input_11_addr_reg_627_pp0_iter2_reg;
reg   [6:0] current_input_11_addr_reg_627_pp0_iter3_reg;
reg   [6:0] current_input_12_addr_reg_634;
reg   [6:0] current_input_12_addr_reg_634_pp0_iter1_reg;
reg   [6:0] current_input_12_addr_reg_634_pp0_iter2_reg;
reg   [6:0] current_input_12_addr_reg_634_pp0_iter3_reg;
reg   [6:0] current_input_13_addr_reg_641;
reg   [6:0] current_input_13_addr_reg_641_pp0_iter1_reg;
reg   [6:0] current_input_13_addr_reg_641_pp0_iter2_reg;
reg   [6:0] current_input_13_addr_reg_641_pp0_iter3_reg;
reg   [6:0] current_input_14_addr_reg_648;
reg   [6:0] current_input_14_addr_reg_648_pp0_iter1_reg;
reg   [6:0] current_input_14_addr_reg_648_pp0_iter2_reg;
reg   [6:0] current_input_14_addr_reg_648_pp0_iter3_reg;
wire   [31:0] tmp_5_fu_474_p19;
reg   [31:0] tmp_5_reg_695;
wire   [31:0] tmp_6_fu_513_p19;
reg   [31:0] tmp_6_reg_701;
reg   [31:0] add_reg_707;
wire   [63:0] zext_ln197_fu_367_p1;
wire    ap_block_pp0_stage0;
reg   [9:0] i_fu_82;
wire   [9:0] add_ln197_fu_341_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_6;
reg    current_input_ce1_local;
reg    current_input_we0_local;
reg    current_input_ce0_local;
reg    current_input_8_ce1_local;
reg    current_input_8_we0_local;
reg    current_input_8_ce0_local;
reg    current_input_9_ce1_local;
reg    current_input_9_we0_local;
reg    current_input_9_ce0_local;
reg    current_input_10_ce1_local;
reg    current_input_10_we0_local;
reg    current_input_10_ce0_local;
reg    current_input_11_ce1_local;
reg    current_input_11_we0_local;
reg    current_input_11_ce0_local;
reg    current_input_12_ce1_local;
reg    current_input_12_we0_local;
reg    current_input_12_ce0_local;
reg    current_input_13_ce1_local;
reg    current_input_13_we0_local;
reg    current_input_13_ce0_local;
reg    current_input_14_ce1_local;
reg    current_input_14_we0_local;
reg    current_input_14_ce0_local;
reg    xb2_ce0_local;
reg    xb2_1_ce0_local;
reg    xb2_2_ce0_local;
reg    xb2_3_ce0_local;
reg    xb2_4_ce0_local;
reg    xb2_5_ce0_local;
reg    xb2_6_ce0_local;
reg    xb2_7_ce0_local;
reg   [31:0] grp_fu_326_p0;
reg   [31:0] grp_fu_326_p0_keep;
reg   [31:0] grp_fu_326_p1;
reg   [31:0] grp_fu_326_p1_keep;
wire   [6:0] lshr_ln7_fu_357_p4;
wire   [31:0] tmp_5_fu_474_p17;
wire   [31:0] tmp_6_fu_513_p17;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_27;
reg    ap_enable_state1_pp0_iter0_stage0;
wire    ap_enable_operation_69;
reg    ap_enable_state2_pp0_iter1_stage0;
reg    ap_enable_operation_119;
reg    ap_enable_state5_pp0_iter4_stage0;
reg    ap_enable_operation_29;
wire    ap_enable_operation_70;
reg    ap_enable_operation_115;
reg    ap_enable_operation_31;
wire    ap_enable_operation_71;
reg    ap_enable_operation_111;
reg    ap_enable_operation_33;
wire    ap_enable_operation_72;
reg    ap_enable_operation_107;
reg    ap_enable_operation_35;
wire    ap_enable_operation_73;
reg    ap_enable_operation_103;
reg    ap_enable_operation_37;
wire    ap_enable_operation_74;
reg    ap_enable_operation_99;
reg    ap_enable_operation_39;
wire    ap_enable_operation_75;
reg    ap_enable_operation_95;
reg    ap_enable_operation_41;
wire    ap_enable_operation_76;
reg    ap_enable_operation_123;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_block_pp0_stage0_00001;
wire   [2:0] tmp_5_fu_474_p1;
wire   [2:0] tmp_5_fu_474_p3;
wire   [2:0] tmp_5_fu_474_p5;
wire   [2:0] tmp_5_fu_474_p7;
wire  signed [2:0] tmp_5_fu_474_p9;
wire  signed [2:0] tmp_5_fu_474_p11;
wire  signed [2:0] tmp_5_fu_474_p13;
wire  signed [2:0] tmp_5_fu_474_p15;
wire   [2:0] tmp_6_fu_513_p1;
wire   [2:0] tmp_6_fu_513_p3;
wire   [2:0] tmp_6_fu_513_p5;
wire   [2:0] tmp_6_fu_513_p7;
wire  signed [2:0] tmp_6_fu_513_p9;
wire  signed [2:0] tmp_6_fu_513_p11;
wire  signed [2:0] tmp_6_fu_513_p13;
wire  signed [2:0] tmp_6_fu_513_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 i_fu_82 = 10'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U627(
    .din0(current_input_q1),
    .din1(current_input_8_q1),
    .din2(current_input_9_q1),
    .din3(current_input_10_q1),
    .din4(current_input_11_q1),
    .din5(current_input_12_q1),
    .din6(current_input_13_q1),
    .din7(current_input_14_q1),
    .def(tmp_5_fu_474_p17),
    .sel(trunc_ln197_reg_593),
    .dout(tmp_5_fu_474_p19)
);

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U628(
    .din0(xb2_q0),
    .din1(xb2_1_q0),
    .din2(xb2_2_q0),
    .din3(xb2_3_q0),
    .din4(xb2_4_q0),
    .din5(xb2_5_q0),
    .din6(xb2_6_q0),
    .din7(xb2_7_q0),
    .def(tmp_6_fu_513_p17),
    .sel(trunc_ln197_reg_593),
    .dout(tmp_6_fu_513_p19)
);

kernel_mhsa_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln197_fu_347_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_82 <= add_ln197_fu_341_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_82 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_reg_707 <= grp_fu_2178_p_dout0;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        current_input_10_addr_reg_620_pp0_iter2_reg <= current_input_10_addr_reg_620_pp0_iter1_reg;
        current_input_10_addr_reg_620_pp0_iter3_reg <= current_input_10_addr_reg_620_pp0_iter2_reg;
        current_input_11_addr_reg_627_pp0_iter2_reg <= current_input_11_addr_reg_627_pp0_iter1_reg;
        current_input_11_addr_reg_627_pp0_iter3_reg <= current_input_11_addr_reg_627_pp0_iter2_reg;
        current_input_12_addr_reg_634_pp0_iter2_reg <= current_input_12_addr_reg_634_pp0_iter1_reg;
        current_input_12_addr_reg_634_pp0_iter3_reg <= current_input_12_addr_reg_634_pp0_iter2_reg;
        current_input_13_addr_reg_641_pp0_iter2_reg <= current_input_13_addr_reg_641_pp0_iter1_reg;
        current_input_13_addr_reg_641_pp0_iter3_reg <= current_input_13_addr_reg_641_pp0_iter2_reg;
        current_input_14_addr_reg_648_pp0_iter2_reg <= current_input_14_addr_reg_648_pp0_iter1_reg;
        current_input_14_addr_reg_648_pp0_iter3_reg <= current_input_14_addr_reg_648_pp0_iter2_reg;
        current_input_8_addr_reg_606_pp0_iter2_reg <= current_input_8_addr_reg_606_pp0_iter1_reg;
        current_input_8_addr_reg_606_pp0_iter3_reg <= current_input_8_addr_reg_606_pp0_iter2_reg;
        current_input_9_addr_reg_613_pp0_iter2_reg <= current_input_9_addr_reg_613_pp0_iter1_reg;
        current_input_9_addr_reg_613_pp0_iter3_reg <= current_input_9_addr_reg_613_pp0_iter2_reg;
        current_input_addr_reg_599_pp0_iter2_reg <= current_input_addr_reg_599_pp0_iter1_reg;
        current_input_addr_reg_599_pp0_iter3_reg <= current_input_addr_reg_599_pp0_iter2_reg;
        trunc_ln197_reg_593_pp0_iter2_reg <= trunc_ln197_reg_593_pp0_iter1_reg;
        trunc_ln197_reg_593_pp0_iter3_reg <= trunc_ln197_reg_593_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        current_input_10_addr_reg_620 <= zext_ln197_fu_367_p1;
        current_input_10_addr_reg_620_pp0_iter1_reg <= current_input_10_addr_reg_620;
        current_input_11_addr_reg_627 <= zext_ln197_fu_367_p1;
        current_input_11_addr_reg_627_pp0_iter1_reg <= current_input_11_addr_reg_627;
        current_input_12_addr_reg_634 <= zext_ln197_fu_367_p1;
        current_input_12_addr_reg_634_pp0_iter1_reg <= current_input_12_addr_reg_634;
        current_input_13_addr_reg_641 <= zext_ln197_fu_367_p1;
        current_input_13_addr_reg_641_pp0_iter1_reg <= current_input_13_addr_reg_641;
        current_input_14_addr_reg_648 <= zext_ln197_fu_367_p1;
        current_input_14_addr_reg_648_pp0_iter1_reg <= current_input_14_addr_reg_648;
        current_input_8_addr_reg_606 <= zext_ln197_fu_367_p1;
        current_input_8_addr_reg_606_pp0_iter1_reg <= current_input_8_addr_reg_606;
        current_input_9_addr_reg_613 <= zext_ln197_fu_367_p1;
        current_input_9_addr_reg_613_pp0_iter1_reg <= current_input_9_addr_reg_613;
        current_input_addr_reg_599 <= zext_ln197_fu_367_p1;
        current_input_addr_reg_599_pp0_iter1_reg <= current_input_addr_reg_599;
        tmp_5_reg_695 <= tmp_5_fu_474_p19;
        tmp_6_reg_701 <= tmp_6_fu_513_p19;
        trunc_ln197_reg_593 <= trunc_ln197_fu_353_p1;
        trunc_ln197_reg_593_pp0_iter1_reg <= trunc_ln197_reg_593;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_326_p0_keep <= tmp_5_reg_695;
        grp_fu_326_p1_keep <= tmp_6_reg_701;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_6 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_6 = i_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd3))) begin
        current_input_10_ce0_local = 1'b1;
    end else begin
        current_input_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_10_ce1_local = 1'b1;
    end else begin
        current_input_10_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd3))) begin
        current_input_10_we0_local = 1'b1;
    end else begin
        current_input_10_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd4))) begin
        current_input_11_ce0_local = 1'b1;
    end else begin
        current_input_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_11_ce1_local = 1'b1;
    end else begin
        current_input_11_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd4))) begin
        current_input_11_we0_local = 1'b1;
    end else begin
        current_input_11_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd5))) begin
        current_input_12_ce0_local = 1'b1;
    end else begin
        current_input_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_12_ce1_local = 1'b1;
    end else begin
        current_input_12_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd5))) begin
        current_input_12_we0_local = 1'b1;
    end else begin
        current_input_12_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd6))) begin
        current_input_13_ce0_local = 1'b1;
    end else begin
        current_input_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_13_ce1_local = 1'b1;
    end else begin
        current_input_13_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd6))) begin
        current_input_13_we0_local = 1'b1;
    end else begin
        current_input_13_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd7))) begin
        current_input_14_ce0_local = 1'b1;
    end else begin
        current_input_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_14_ce1_local = 1'b1;
    end else begin
        current_input_14_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd7))) begin
        current_input_14_we0_local = 1'b1;
    end else begin
        current_input_14_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd1))) begin
        current_input_8_ce0_local = 1'b1;
    end else begin
        current_input_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_8_ce1_local = 1'b1;
    end else begin
        current_input_8_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd1))) begin
        current_input_8_we0_local = 1'b1;
    end else begin
        current_input_8_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd2))) begin
        current_input_9_ce0_local = 1'b1;
    end else begin
        current_input_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_9_ce1_local = 1'b1;
    end else begin
        current_input_9_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd2))) begin
        current_input_9_we0_local = 1'b1;
    end else begin
        current_input_9_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd0))) begin
        current_input_ce0_local = 1'b1;
    end else begin
        current_input_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_input_ce1_local = 1'b1;
    end else begin
        current_input_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln197_reg_593_pp0_iter3_reg == 3'd0))) begin
        current_input_we0_local = 1'b1;
    end else begin
        current_input_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_326_p0 = tmp_5_reg_695;
    end else begin
        grp_fu_326_p0 = grp_fu_326_p0_keep;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_326_p1 = tmp_6_reg_701;
    end else begin
        grp_fu_326_p1 = grp_fu_326_p1_keep;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xb2_1_ce0_local = 1'b1;
    end else begin
        xb2_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xb2_2_ce0_local = 1'b1;
    end else begin
        xb2_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xb2_3_ce0_local = 1'b1;
    end else begin
        xb2_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xb2_4_ce0_local = 1'b1;
    end else begin
        xb2_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xb2_5_ce0_local = 1'b1;
    end else begin
        xb2_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xb2_6_ce0_local = 1'b1;
    end else begin
        xb2_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xb2_7_ce0_local = 1'b1;
    end else begin
        xb2_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_347_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xb2_ce0_local = 1'b1;
    end else begin
        xb2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln197_fu_341_p2 = (ap_sig_allocacmp_i_6 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

always @ (*) begin
    ap_enable_operation_103 = (trunc_ln197_reg_593_pp0_iter3_reg == 3'd4);
end

always @ (*) begin
    ap_enable_operation_107 = (trunc_ln197_reg_593_pp0_iter3_reg == 3'd3);
end

always @ (*) begin
    ap_enable_operation_111 = (trunc_ln197_reg_593_pp0_iter3_reg == 3'd2);
end

always @ (*) begin
    ap_enable_operation_115 = (trunc_ln197_reg_593_pp0_iter3_reg == 3'd1);
end

always @ (*) begin
    ap_enable_operation_119 = (trunc_ln197_reg_593_pp0_iter3_reg == 3'd0);
end

always @ (*) begin
    ap_enable_operation_123 = (trunc_ln197_reg_593_pp0_iter3_reg == 3'd7);
end

always @ (*) begin
    ap_enable_operation_27 = (icmp_ln197_fu_347_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_29 = (icmp_ln197_fu_347_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_31 = (icmp_ln197_fu_347_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_33 = (icmp_ln197_fu_347_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_35 = (icmp_ln197_fu_347_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_37 = (icmp_ln197_fu_347_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_39 = (icmp_ln197_fu_347_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_41 = (icmp_ln197_fu_347_p2 == 1'd0);
end

assign ap_enable_operation_69 = (1'b1 == 1'b1);

assign ap_enable_operation_70 = (1'b1 == 1'b1);

assign ap_enable_operation_71 = (1'b1 == 1'b1);

assign ap_enable_operation_72 = (1'b1 == 1'b1);

assign ap_enable_operation_73 = (1'b1 == 1'b1);

assign ap_enable_operation_74 = (1'b1 == 1'b1);

assign ap_enable_operation_75 = (1'b1 == 1'b1);

assign ap_enable_operation_76 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_95 = (trunc_ln197_reg_593_pp0_iter3_reg == 3'd6);
end

always @ (*) begin
    ap_enable_operation_99 = (trunc_ln197_reg_593_pp0_iter3_reg == 3'd5);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state1_pp0_iter0_stage0 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state2_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter4_stage0 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign current_input_10_address0 = current_input_10_addr_reg_620_pp0_iter3_reg;

assign current_input_10_address1 = zext_ln197_fu_367_p1;

assign current_input_10_ce0 = current_input_10_ce0_local;

assign current_input_10_ce1 = current_input_10_ce1_local;

assign current_input_10_d0 = add_reg_707;

assign current_input_10_we0 = current_input_10_we0_local;

assign current_input_11_address0 = current_input_11_addr_reg_627_pp0_iter3_reg;

assign current_input_11_address1 = zext_ln197_fu_367_p1;

assign current_input_11_ce0 = current_input_11_ce0_local;

assign current_input_11_ce1 = current_input_11_ce1_local;

assign current_input_11_d0 = add_reg_707;

assign current_input_11_we0 = current_input_11_we0_local;

assign current_input_12_address0 = current_input_12_addr_reg_634_pp0_iter3_reg;

assign current_input_12_address1 = zext_ln197_fu_367_p1;

assign current_input_12_ce0 = current_input_12_ce0_local;

assign current_input_12_ce1 = current_input_12_ce1_local;

assign current_input_12_d0 = add_reg_707;

assign current_input_12_we0 = current_input_12_we0_local;

assign current_input_13_address0 = current_input_13_addr_reg_641_pp0_iter3_reg;

assign current_input_13_address1 = zext_ln197_fu_367_p1;

assign current_input_13_ce0 = current_input_13_ce0_local;

assign current_input_13_ce1 = current_input_13_ce1_local;

assign current_input_13_d0 = add_reg_707;

assign current_input_13_we0 = current_input_13_we0_local;

assign current_input_14_address0 = current_input_14_addr_reg_648_pp0_iter3_reg;

assign current_input_14_address1 = zext_ln197_fu_367_p1;

assign current_input_14_ce0 = current_input_14_ce0_local;

assign current_input_14_ce1 = current_input_14_ce1_local;

assign current_input_14_d0 = add_reg_707;

assign current_input_14_we0 = current_input_14_we0_local;

assign current_input_8_address0 = current_input_8_addr_reg_606_pp0_iter3_reg;

assign current_input_8_address1 = zext_ln197_fu_367_p1;

assign current_input_8_ce0 = current_input_8_ce0_local;

assign current_input_8_ce1 = current_input_8_ce1_local;

assign current_input_8_d0 = add_reg_707;

assign current_input_8_we0 = current_input_8_we0_local;

assign current_input_9_address0 = current_input_9_addr_reg_613_pp0_iter3_reg;

assign current_input_9_address1 = zext_ln197_fu_367_p1;

assign current_input_9_ce0 = current_input_9_ce0_local;

assign current_input_9_ce1 = current_input_9_ce1_local;

assign current_input_9_d0 = add_reg_707;

assign current_input_9_we0 = current_input_9_we0_local;

assign current_input_address0 = current_input_addr_reg_599_pp0_iter3_reg;

assign current_input_address1 = zext_ln197_fu_367_p1;

assign current_input_ce0 = current_input_ce0_local;

assign current_input_ce1 = current_input_ce1_local;

assign current_input_d0 = add_reg_707;

assign current_input_we0 = current_input_we0_local;

assign grp_fu_2178_p_din0 = grp_fu_326_p0;

assign grp_fu_2178_p_din1 = grp_fu_326_p1;

assign grp_fu_2178_p_opcode = 2'd0;

assign icmp_ln197_fu_347_p2 = ((ap_sig_allocacmp_i_6 == 10'd768) ? 1'b1 : 1'b0);

assign lshr_ln7_fu_357_p4 = {{ap_sig_allocacmp_i_6[9:3]}};

assign tmp_5_fu_474_p17 = 'bx;

assign tmp_6_fu_513_p17 = 'bx;

assign trunc_ln197_fu_353_p1 = ap_sig_allocacmp_i_6[2:0];

assign xb2_1_address0 = zext_ln197_fu_367_p1;

assign xb2_1_ce0 = xb2_1_ce0_local;

assign xb2_2_address0 = zext_ln197_fu_367_p1;

assign xb2_2_ce0 = xb2_2_ce0_local;

assign xb2_3_address0 = zext_ln197_fu_367_p1;

assign xb2_3_ce0 = xb2_3_ce0_local;

assign xb2_4_address0 = zext_ln197_fu_367_p1;

assign xb2_4_ce0 = xb2_4_ce0_local;

assign xb2_5_address0 = zext_ln197_fu_367_p1;

assign xb2_5_ce0 = xb2_5_ce0_local;

assign xb2_6_address0 = zext_ln197_fu_367_p1;

assign xb2_6_ce0 = xb2_6_ce0_local;

assign xb2_7_address0 = zext_ln197_fu_367_p1;

assign xb2_7_ce0 = xb2_7_ce0_local;

assign xb2_address0 = zext_ln197_fu_367_p1;

assign xb2_ce0 = xb2_ce0_local;

assign zext_ln197_fu_367_p1 = lshr_ln7_fu_357_p4;

endmodule //kernel_mhsa_kernel_mhsa_Pipeline_RESIDUAL
