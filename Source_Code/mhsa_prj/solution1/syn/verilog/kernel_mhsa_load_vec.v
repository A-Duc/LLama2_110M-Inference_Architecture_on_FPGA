// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_load_vec (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        vector_stream_din,
        vector_stream_full_n,
        vector_stream_write,
        vector_stream_num_data_valid,
        vector_stream_fifo_cap,
        start_out,
        start_write,
        i_vec_0_address0,
        i_vec_0_ce0,
        i_vec_0_q0,
        i_vec_1_address0,
        i_vec_1_ce0,
        i_vec_1_q0,
        i_vec_2_address0,
        i_vec_2_ce0,
        i_vec_2_q0,
        i_vec_3_address0,
        i_vec_3_ce0,
        i_vec_3_q0,
        i_vec_4_address0,
        i_vec_4_ce0,
        i_vec_4_q0,
        i_vec_5_address0,
        i_vec_5_ce0,
        i_vec_5_q0,
        i_vec_6_address0,
        i_vec_6_ce0,
        i_vec_6_q0,
        i_vec_7_address0,
        i_vec_7_ce0,
        i_vec_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] vector_stream_din;
input   vector_stream_full_n;
output   vector_stream_write;
input  [31:0] vector_stream_num_data_valid;
input  [31:0] vector_stream_fifo_cap;
output   start_out;
output   start_write;
output  [6:0] i_vec_0_address0;
output   i_vec_0_ce0;
input  [31:0] i_vec_0_q0;
output  [6:0] i_vec_1_address0;
output   i_vec_1_ce0;
input  [31:0] i_vec_1_q0;
output  [6:0] i_vec_2_address0;
output   i_vec_2_ce0;
input  [31:0] i_vec_2_q0;
output  [6:0] i_vec_3_address0;
output   i_vec_3_ce0;
input  [31:0] i_vec_3_q0;
output  [6:0] i_vec_4_address0;
output   i_vec_4_ce0;
input  [31:0] i_vec_4_q0;
output  [6:0] i_vec_5_address0;
output   i_vec_5_ce0;
input  [31:0] i_vec_5_q0;
output  [6:0] i_vec_6_address0;
output   i_vec_6_ce0;
input  [31:0] i_vec_6_q0;
output  [6:0] i_vec_7_address0;
output   i_vec_7_ce0;
input  [31:0] i_vec_7_q0;

reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln12_fu_211_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vector_stream_blk_n;
wire    ap_block_pp0_stage0;
wire   [2:0] trunc_ln12_fu_217_p1;
reg   [2:0] trunc_ln12_reg_338;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln12_fu_231_p1;
reg   [9:0] i_fu_82;
wire   [9:0] add_ln12_fu_205_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_2;
wire   [31:0] bitcast_ln15_fu_319_p1;
reg    ap_block_pp0_stage0_01001;
reg    vector_stream_write_local;
reg    i_vec_0_ce0_local;
reg    i_vec_1_ce0_local;
reg    i_vec_2_ce0_local;
reg    i_vec_3_ce0_local;
reg    i_vec_4_ce0_local;
reg    i_vec_5_ce0_local;
reg    i_vec_6_ce0_local;
reg    i_vec_7_ce0_local;
wire   [6:0] lshr_ln_fu_221_p4;
wire   [31:0] tmp_fu_280_p17;
wire   [31:0] tmp_fu_280_p19;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_166;
wire   [2:0] tmp_fu_280_p1;
wire   [2:0] tmp_fu_280_p3;
wire   [2:0] tmp_fu_280_p5;
wire   [2:0] tmp_fu_280_p7;
wire  signed [2:0] tmp_fu_280_p9;
wire  signed [2:0] tmp_fu_280_p11;
wire  signed [2:0] tmp_fu_280_p13;
wire  signed [2:0] tmp_fu_280_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i_fu_82 = 10'd0;
end

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U239(
    .din0(i_vec_0_q0),
    .din1(i_vec_1_q0),
    .din2(i_vec_2_q0),
    .din3(i_vec_3_q0),
    .din4(i_vec_4_q0),
    .din5(i_vec_5_q0),
    .din6(i_vec_6_q0),
    .din7(i_vec_7_q0),
    .def(tmp_fu_280_p17),
    .sel(trunc_ln12_reg_338),
    .dout(tmp_fu_280_p19)
);

kernel_mhsa_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if ((icmp_ln12_fu_211_p2 == 1'd0)) begin
            i_fu_82 <= add_ln12_fu_205_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_82 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln12_reg_338 <= trunc_ln12_fu_217_p1;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_82;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_vec_0_ce0_local = 1'b1;
    end else begin
        i_vec_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_vec_1_ce0_local = 1'b1;
    end else begin
        i_vec_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_vec_2_ce0_local = 1'b1;
    end else begin
        i_vec_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_vec_3_ce0_local = 1'b1;
    end else begin
        i_vec_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_vec_4_ce0_local = 1'b1;
    end else begin
        i_vec_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_vec_5_ce0_local = 1'b1;
    end else begin
        i_vec_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_vec_6_ce0_local = 1'b1;
    end else begin
        i_vec_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_vec_7_ce0_local = 1'b1;
    end else begin
        i_vec_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vector_stream_blk_n = vector_stream_full_n;
    end else begin
        vector_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vector_stream_write_local = 1'b1;
    end else begin
        vector_stream_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_205_p2 = (ap_sig_allocacmp_i_2 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (vector_stream_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_166 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign bitcast_ln15_fu_319_p1 = tmp_fu_280_p19;

assign i_vec_0_address0 = zext_ln12_fu_231_p1;

assign i_vec_0_ce0 = i_vec_0_ce0_local;

assign i_vec_1_address0 = zext_ln12_fu_231_p1;

assign i_vec_1_ce0 = i_vec_1_ce0_local;

assign i_vec_2_address0 = zext_ln12_fu_231_p1;

assign i_vec_2_ce0 = i_vec_2_ce0_local;

assign i_vec_3_address0 = zext_ln12_fu_231_p1;

assign i_vec_3_ce0 = i_vec_3_ce0_local;

assign i_vec_4_address0 = zext_ln12_fu_231_p1;

assign i_vec_4_ce0 = i_vec_4_ce0_local;

assign i_vec_5_address0 = zext_ln12_fu_231_p1;

assign i_vec_5_ce0 = i_vec_5_ce0_local;

assign i_vec_6_address0 = zext_ln12_fu_231_p1;

assign i_vec_6_ce0 = i_vec_6_ce0_local;

assign i_vec_7_address0 = zext_ln12_fu_231_p1;

assign i_vec_7_ce0 = i_vec_7_ce0_local;

assign icmp_ln12_fu_211_p2 = ((ap_sig_allocacmp_i_2 == 10'd768) ? 1'b1 : 1'b0);

assign lshr_ln_fu_221_p4 = {{ap_sig_allocacmp_i_2[9:3]}};

assign start_out = real_start;

assign tmp_fu_280_p17 = 'bx;

assign trunc_ln12_fu_217_p1 = ap_sig_allocacmp_i_2[2:0];

assign vector_stream_din = bitcast_ln15_fu_319_p1;

assign vector_stream_write = vector_stream_write_local;

assign zext_ln12_fu_231_p1 = lshr_ln_fu_221_p4;

endmodule //kernel_mhsa_load_vec
