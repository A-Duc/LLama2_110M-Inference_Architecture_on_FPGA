// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_kernel_mhsa_Pipeline_XB_INIT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xb_7_address0,
        xb_7_ce0,
        xb_7_we0,
        xb_7_d0,
        xb_6_address0,
        xb_6_ce0,
        xb_6_we0,
        xb_6_d0,
        xb_5_address0,
        xb_5_ce0,
        xb_5_we0,
        xb_5_d0,
        xb_4_address0,
        xb_4_ce0,
        xb_4_we0,
        xb_4_d0,
        xb_3_address0,
        xb_3_ce0,
        xb_3_we0,
        xb_3_d0,
        xb_2_address0,
        xb_2_ce0,
        xb_2_we0,
        xb_2_d0,
        xb_1_address0,
        xb_1_ce0,
        xb_1_we0,
        xb_1_d0,
        xb_address0,
        xb_ce0,
        xb_we0,
        xb_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] xb_7_address0;
output   xb_7_ce0;
output   xb_7_we0;
output  [31:0] xb_7_d0;
output  [6:0] xb_6_address0;
output   xb_6_ce0;
output   xb_6_we0;
output  [31:0] xb_6_d0;
output  [6:0] xb_5_address0;
output   xb_5_ce0;
output   xb_5_we0;
output  [31:0] xb_5_d0;
output  [6:0] xb_4_address0;
output   xb_4_ce0;
output   xb_4_we0;
output  [31:0] xb_4_d0;
output  [6:0] xb_3_address0;
output   xb_3_ce0;
output   xb_3_we0;
output  [31:0] xb_3_d0;
output  [6:0] xb_2_address0;
output   xb_2_ce0;
output   xb_2_we0;
output  [31:0] xb_2_d0;
output  [6:0] xb_1_address0;
output   xb_1_ce0;
output   xb_1_we0;
output  [31:0] xb_1_d0;
output  [6:0] xb_address0;
output   xb_ce0;
output   xb_we0;
output  [31:0] xb_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln147_fu_196_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln147_fu_216_p1;
reg   [9:0] i_fu_62;
wire   [9:0] add_ln147_fu_190_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_4;
reg    xb_6_we0_local;
wire   [2:0] trunc_ln147_fu_202_p1;
reg    xb_6_ce0_local;
reg    xb_5_we0_local;
reg    xb_5_ce0_local;
reg    xb_4_we0_local;
reg    xb_4_ce0_local;
reg    xb_3_we0_local;
reg    xb_3_ce0_local;
reg    xb_2_we0_local;
reg    xb_2_ce0_local;
reg    xb_1_we0_local;
reg    xb_1_ce0_local;
reg    xb_we0_local;
reg    xb_ce0_local;
reg    xb_7_we0_local;
reg    xb_7_ce0_local;
wire   [6:0] lshr_ln6_fu_206_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_62 = 10'd0;
#0 ap_done_reg = 1'b0;
end

kernel_mhsa_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln147_fu_196_p2 == 1'd0)) begin
            i_fu_62 <= add_ln147_fu_190_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_62 <= 10'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_62;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd1))) begin
        xb_1_ce0_local = 1'b1;
    end else begin
        xb_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd1))) begin
        xb_1_we0_local = 1'b1;
    end else begin
        xb_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd2))) begin
        xb_2_ce0_local = 1'b1;
    end else begin
        xb_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd2))) begin
        xb_2_we0_local = 1'b1;
    end else begin
        xb_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd3))) begin
        xb_3_ce0_local = 1'b1;
    end else begin
        xb_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd3))) begin
        xb_3_we0_local = 1'b1;
    end else begin
        xb_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd4))) begin
        xb_4_ce0_local = 1'b1;
    end else begin
        xb_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd4))) begin
        xb_4_we0_local = 1'b1;
    end else begin
        xb_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd5))) begin
        xb_5_ce0_local = 1'b1;
    end else begin
        xb_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd5))) begin
        xb_5_we0_local = 1'b1;
    end else begin
        xb_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd6))) begin
        xb_6_ce0_local = 1'b1;
    end else begin
        xb_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd6))) begin
        xb_6_we0_local = 1'b1;
    end else begin
        xb_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd7))) begin
        xb_7_ce0_local = 1'b1;
    end else begin
        xb_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd7))) begin
        xb_7_we0_local = 1'b1;
    end else begin
        xb_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd0))) begin
        xb_ce0_local = 1'b1;
    end else begin
        xb_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_196_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln147_fu_202_p1 == 3'd0))) begin
        xb_we0_local = 1'b1;
    end else begin
        xb_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln147_fu_190_p2 = (ap_sig_allocacmp_i_4 + 10'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln147_fu_196_p2 = ((ap_sig_allocacmp_i_4 == 10'd768) ? 1'b1 : 1'b0);

assign lshr_ln6_fu_206_p4 = {{ap_sig_allocacmp_i_4[9:3]}};

assign trunc_ln147_fu_202_p1 = ap_sig_allocacmp_i_4[2:0];

assign xb_1_address0 = zext_ln147_fu_216_p1;

assign xb_1_ce0 = xb_1_ce0_local;

assign xb_1_d0 = 32'd0;

assign xb_1_we0 = xb_1_we0_local;

assign xb_2_address0 = zext_ln147_fu_216_p1;

assign xb_2_ce0 = xb_2_ce0_local;

assign xb_2_d0 = 32'd0;

assign xb_2_we0 = xb_2_we0_local;

assign xb_3_address0 = zext_ln147_fu_216_p1;

assign xb_3_ce0 = xb_3_ce0_local;

assign xb_3_d0 = 32'd0;

assign xb_3_we0 = xb_3_we0_local;

assign xb_4_address0 = zext_ln147_fu_216_p1;

assign xb_4_ce0 = xb_4_ce0_local;

assign xb_4_d0 = 32'd0;

assign xb_4_we0 = xb_4_we0_local;

assign xb_5_address0 = zext_ln147_fu_216_p1;

assign xb_5_ce0 = xb_5_ce0_local;

assign xb_5_d0 = 32'd0;

assign xb_5_we0 = xb_5_we0_local;

assign xb_6_address0 = zext_ln147_fu_216_p1;

assign xb_6_ce0 = xb_6_ce0_local;

assign xb_6_d0 = 32'd0;

assign xb_6_we0 = xb_6_we0_local;

assign xb_7_address0 = zext_ln147_fu_216_p1;

assign xb_7_ce0 = xb_7_ce0_local;

assign xb_7_d0 = 32'd0;

assign xb_7_we0 = xb_7_we0_local;

assign xb_address0 = zext_ln147_fu_216_p1;

assign xb_ce0 = xb_ce0_local;

assign xb_d0 = 32'd0;

assign xb_we0 = xb_we0_local;

assign zext_ln147_fu_216_p1 = lshr_ln6_fu_206_p4;

endmodule //kernel_mhsa_kernel_mhsa_Pipeline_XB_INIT
