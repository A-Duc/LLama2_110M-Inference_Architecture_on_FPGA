// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_kernel_mhsa_Pipeline_ACCUM_WRITEBACK (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xb_7_address0,
        xb_7_ce0,
        xb_7_we0,
        xb_7_d0,
        xb_6_address0,
        xb_6_ce0,
        xb_6_we0,
        xb_6_d0,
        xb_5_address0,
        xb_5_ce0,
        xb_5_we0,
        xb_5_d0,
        xb_4_address0,
        xb_4_ce0,
        xb_4_we0,
        xb_4_d0,
        xb_3_address0,
        xb_3_ce0,
        xb_3_we0,
        xb_3_d0,
        xb_2_address0,
        xb_2_ce0,
        xb_2_we0,
        xb_2_d0,
        xb_1_address0,
        xb_1_ce0,
        xb_1_we0,
        xb_1_d0,
        xb_address0,
        xb_ce0,
        xb_we0,
        xb_d0,
        local_accum_load,
        local_accum_4_load,
        local_accum_8_load,
        local_accum_12_load,
        local_accum_16_load,
        local_accum_20_load,
        local_accum_24_load,
        local_accum_28_load,
        local_accum_32_load,
        local_accum_36_load,
        local_accum_40_load,
        local_accum_44_load,
        local_accum_48_load,
        local_accum_52_load,
        local_accum_56_load,
        local_accum_60_load,
        p_udiv1,
        local_accum_1_load,
        local_accum_5_load,
        local_accum_9_load,
        local_accum_13_load,
        local_accum_17_load,
        local_accum_21_load,
        local_accum_25_load,
        local_accum_29_load,
        local_accum_33_load,
        local_accum_37_load,
        local_accum_41_load,
        local_accum_45_load,
        local_accum_49_load,
        local_accum_53_load,
        local_accum_57_load,
        local_accum_61_load,
        local_accum_2_load,
        local_accum_6_load,
        local_accum_10_load,
        local_accum_14_load,
        local_accum_18_load,
        local_accum_22_load,
        local_accum_26_load,
        local_accum_30_load,
        local_accum_34_load,
        local_accum_38_load,
        local_accum_42_load,
        local_accum_46_load,
        local_accum_50_load,
        local_accum_54_load,
        local_accum_58_load,
        local_accum_62_load,
        local_accum_3_load,
        local_accum_7_load,
        local_accum_11_load,
        local_accum_15_load,
        local_accum_19_load,
        local_accum_23_load,
        local_accum_27_load,
        local_accum_31_load,
        local_accum_35_load,
        local_accum_39_load,
        local_accum_43_load,
        local_accum_47_load,
        local_accum_51_load,
        local_accum_55_load,
        local_accum_59_load,
        local_accum_63_load
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] xb_7_address0;
output   xb_7_ce0;
output   xb_7_we0;
output  [31:0] xb_7_d0;
output  [6:0] xb_6_address0;
output   xb_6_ce0;
output   xb_6_we0;
output  [31:0] xb_6_d0;
output  [6:0] xb_5_address0;
output   xb_5_ce0;
output   xb_5_we0;
output  [31:0] xb_5_d0;
output  [6:0] xb_4_address0;
output   xb_4_ce0;
output   xb_4_we0;
output  [31:0] xb_4_d0;
output  [6:0] xb_3_address0;
output   xb_3_ce0;
output   xb_3_we0;
output  [31:0] xb_3_d0;
output  [6:0] xb_2_address0;
output   xb_2_ce0;
output   xb_2_we0;
output  [31:0] xb_2_d0;
output  [6:0] xb_1_address0;
output   xb_1_ce0;
output   xb_1_we0;
output  [31:0] xb_1_d0;
output  [6:0] xb_address0;
output   xb_ce0;
output   xb_we0;
output  [31:0] xb_d0;
input  [31:0] local_accum_load;
input  [31:0] local_accum_4_load;
input  [31:0] local_accum_8_load;
input  [31:0] local_accum_12_load;
input  [31:0] local_accum_16_load;
input  [31:0] local_accum_20_load;
input  [31:0] local_accum_24_load;
input  [31:0] local_accum_28_load;
input  [31:0] local_accum_32_load;
input  [31:0] local_accum_36_load;
input  [31:0] local_accum_40_load;
input  [31:0] local_accum_44_load;
input  [31:0] local_accum_48_load;
input  [31:0] local_accum_52_load;
input  [31:0] local_accum_56_load;
input  [31:0] local_accum_60_load;
input  [6:0] p_udiv1;
input  [31:0] local_accum_1_load;
input  [31:0] local_accum_5_load;
input  [31:0] local_accum_9_load;
input  [31:0] local_accum_13_load;
input  [31:0] local_accum_17_load;
input  [31:0] local_accum_21_load;
input  [31:0] local_accum_25_load;
input  [31:0] local_accum_29_load;
input  [31:0] local_accum_33_load;
input  [31:0] local_accum_37_load;
input  [31:0] local_accum_41_load;
input  [31:0] local_accum_45_load;
input  [31:0] local_accum_49_load;
input  [31:0] local_accum_53_load;
input  [31:0] local_accum_57_load;
input  [31:0] local_accum_61_load;
input  [31:0] local_accum_2_load;
input  [31:0] local_accum_6_load;
input  [31:0] local_accum_10_load;
input  [31:0] local_accum_14_load;
input  [31:0] local_accum_18_load;
input  [31:0] local_accum_22_load;
input  [31:0] local_accum_26_load;
input  [31:0] local_accum_30_load;
input  [31:0] local_accum_34_load;
input  [31:0] local_accum_38_load;
input  [31:0] local_accum_42_load;
input  [31:0] local_accum_46_load;
input  [31:0] local_accum_50_load;
input  [31:0] local_accum_54_load;
input  [31:0] local_accum_58_load;
input  [31:0] local_accum_62_load;
input  [31:0] local_accum_3_load;
input  [31:0] local_accum_7_load;
input  [31:0] local_accum_11_load;
input  [31:0] local_accum_15_load;
input  [31:0] local_accum_19_load;
input  [31:0] local_accum_23_load;
input  [31:0] local_accum_27_load;
input  [31:0] local_accum_31_load;
input  [31:0] local_accum_35_load;
input  [31:0] local_accum_39_load;
input  [31:0] local_accum_43_load;
input  [31:0] local_accum_47_load;
input  [31:0] local_accum_51_load;
input  [31:0] local_accum_55_load;
input  [31:0] local_accum_59_load;
input  [31:0] local_accum_63_load;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_fu_736_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln188_fu_847_p1;
reg   [6:0] i_fu_218;
wire   [6:0] add_ln185_fu_1122_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_8;
reg    xb_4_we0_local;
wire   [0:0] icmp_ln188_fu_1084_p2;
wire   [31:0] tmp_9_fu_752_p35;
reg    xb_4_ce0_local;
reg    xb_5_we0_local;
wire   [31:0] tmp_1_fu_859_p35;
reg    xb_5_ce0_local;
reg    xb_6_we0_local;
wire   [31:0] tmp_s_fu_934_p35;
reg    xb_6_ce0_local;
reg    xb_7_we0_local;
wire   [31:0] tmp_2_fu_1009_p35;
reg    xb_7_ce0_local;
reg    xb_we0_local;
reg    xb_ce0_local;
reg    xb_1_we0_local;
reg    xb_1_ce0_local;
reg    xb_2_we0_local;
reg    xb_2_ce0_local;
reg    xb_3_we0_local;
reg    xb_3_ce0_local;
wire   [31:0] tmp_9_fu_752_p33;
wire   [5:0] trunc_ln185_1_fu_748_p1;
wire   [3:0] lshr_ln8_fu_827_p4;
wire   [6:0] zext_ln188_1_fu_837_p1;
wire   [6:0] add_ln188_fu_841_p2;
wire   [31:0] tmp_1_fu_859_p33;
wire   [31:0] tmp_s_fu_934_p33;
wire   [31:0] tmp_2_fu_1009_p33;
wire   [2:0] trunc_ln185_fu_744_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [5:0] tmp_9_fu_752_p1;
wire   [5:0] tmp_9_fu_752_p3;
wire   [5:0] tmp_9_fu_752_p5;
wire   [5:0] tmp_9_fu_752_p7;
wire   [5:0] tmp_9_fu_752_p9;
wire   [5:0] tmp_9_fu_752_p11;
wire   [5:0] tmp_9_fu_752_p13;
wire   [5:0] tmp_9_fu_752_p15;
wire  signed [5:0] tmp_9_fu_752_p17;
wire  signed [5:0] tmp_9_fu_752_p19;
wire  signed [5:0] tmp_9_fu_752_p21;
wire  signed [5:0] tmp_9_fu_752_p23;
wire  signed [5:0] tmp_9_fu_752_p25;
wire  signed [5:0] tmp_9_fu_752_p27;
wire  signed [5:0] tmp_9_fu_752_p29;
wire  signed [5:0] tmp_9_fu_752_p31;
wire   [5:0] tmp_1_fu_859_p1;
wire   [5:0] tmp_1_fu_859_p3;
wire   [5:0] tmp_1_fu_859_p5;
wire   [5:0] tmp_1_fu_859_p7;
wire   [5:0] tmp_1_fu_859_p9;
wire   [5:0] tmp_1_fu_859_p11;
wire   [5:0] tmp_1_fu_859_p13;
wire   [5:0] tmp_1_fu_859_p15;
wire  signed [5:0] tmp_1_fu_859_p17;
wire  signed [5:0] tmp_1_fu_859_p19;
wire  signed [5:0] tmp_1_fu_859_p21;
wire  signed [5:0] tmp_1_fu_859_p23;
wire  signed [5:0] tmp_1_fu_859_p25;
wire  signed [5:0] tmp_1_fu_859_p27;
wire  signed [5:0] tmp_1_fu_859_p29;
wire  signed [5:0] tmp_1_fu_859_p31;
wire   [5:0] tmp_s_fu_934_p1;
wire   [5:0] tmp_s_fu_934_p3;
wire   [5:0] tmp_s_fu_934_p5;
wire   [5:0] tmp_s_fu_934_p7;
wire   [5:0] tmp_s_fu_934_p9;
wire   [5:0] tmp_s_fu_934_p11;
wire   [5:0] tmp_s_fu_934_p13;
wire   [5:0] tmp_s_fu_934_p15;
wire  signed [5:0] tmp_s_fu_934_p17;
wire  signed [5:0] tmp_s_fu_934_p19;
wire  signed [5:0] tmp_s_fu_934_p21;
wire  signed [5:0] tmp_s_fu_934_p23;
wire  signed [5:0] tmp_s_fu_934_p25;
wire  signed [5:0] tmp_s_fu_934_p27;
wire  signed [5:0] tmp_s_fu_934_p29;
wire  signed [5:0] tmp_s_fu_934_p31;
wire   [5:0] tmp_2_fu_1009_p1;
wire   [5:0] tmp_2_fu_1009_p3;
wire   [5:0] tmp_2_fu_1009_p5;
wire   [5:0] tmp_2_fu_1009_p7;
wire   [5:0] tmp_2_fu_1009_p9;
wire   [5:0] tmp_2_fu_1009_p11;
wire   [5:0] tmp_2_fu_1009_p13;
wire   [5:0] tmp_2_fu_1009_p15;
wire  signed [5:0] tmp_2_fu_1009_p17;
wire  signed [5:0] tmp_2_fu_1009_p19;
wire  signed [5:0] tmp_2_fu_1009_p21;
wire  signed [5:0] tmp_2_fu_1009_p23;
wire  signed [5:0] tmp_2_fu_1009_p25;
wire  signed [5:0] tmp_2_fu_1009_p27;
wire  signed [5:0] tmp_2_fu_1009_p29;
wire  signed [5:0] tmp_2_fu_1009_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_218 = 7'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_33_6_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 6'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 6'h4 ),
    .din1_WIDTH( 32 ),
    .CASE2( 6'h8 ),
    .din2_WIDTH( 32 ),
    .CASE3( 6'hC ),
    .din3_WIDTH( 32 ),
    .CASE4( 6'h10 ),
    .din4_WIDTH( 32 ),
    .CASE5( 6'h14 ),
    .din5_WIDTH( 32 ),
    .CASE6( 6'h18 ),
    .din6_WIDTH( 32 ),
    .CASE7( 6'h1C ),
    .din7_WIDTH( 32 ),
    .CASE8( 6'h20 ),
    .din8_WIDTH( 32 ),
    .CASE9( 6'h24 ),
    .din9_WIDTH( 32 ),
    .CASE10( 6'h28 ),
    .din10_WIDTH( 32 ),
    .CASE11( 6'h2C ),
    .din11_WIDTH( 32 ),
    .CASE12( 6'h30 ),
    .din12_WIDTH( 32 ),
    .CASE13( 6'h34 ),
    .din13_WIDTH( 32 ),
    .CASE14( 6'h38 ),
    .din14_WIDTH( 32 ),
    .CASE15( 6'h3C ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
sparsemux_33_6_32_1_1_U548(
    .din0(local_accum_load),
    .din1(local_accum_4_load),
    .din2(local_accum_8_load),
    .din3(local_accum_12_load),
    .din4(local_accum_16_load),
    .din5(local_accum_20_load),
    .din6(local_accum_24_load),
    .din7(local_accum_28_load),
    .din8(local_accum_32_load),
    .din9(local_accum_36_load),
    .din10(local_accum_40_load),
    .din11(local_accum_44_load),
    .din12(local_accum_48_load),
    .din13(local_accum_52_load),
    .din14(local_accum_56_load),
    .din15(local_accum_60_load),
    .def(tmp_9_fu_752_p33),
    .sel(trunc_ln185_1_fu_748_p1),
    .dout(tmp_9_fu_752_p35)
);

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_33_6_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 6'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 6'h4 ),
    .din1_WIDTH( 32 ),
    .CASE2( 6'h8 ),
    .din2_WIDTH( 32 ),
    .CASE3( 6'hC ),
    .din3_WIDTH( 32 ),
    .CASE4( 6'h10 ),
    .din4_WIDTH( 32 ),
    .CASE5( 6'h14 ),
    .din5_WIDTH( 32 ),
    .CASE6( 6'h18 ),
    .din6_WIDTH( 32 ),
    .CASE7( 6'h1C ),
    .din7_WIDTH( 32 ),
    .CASE8( 6'h20 ),
    .din8_WIDTH( 32 ),
    .CASE9( 6'h24 ),
    .din9_WIDTH( 32 ),
    .CASE10( 6'h28 ),
    .din10_WIDTH( 32 ),
    .CASE11( 6'h2C ),
    .din11_WIDTH( 32 ),
    .CASE12( 6'h30 ),
    .din12_WIDTH( 32 ),
    .CASE13( 6'h34 ),
    .din13_WIDTH( 32 ),
    .CASE14( 6'h38 ),
    .din14_WIDTH( 32 ),
    .CASE15( 6'h3C ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
sparsemux_33_6_32_1_1_U549(
    .din0(local_accum_1_load),
    .din1(local_accum_5_load),
    .din2(local_accum_9_load),
    .din3(local_accum_13_load),
    .din4(local_accum_17_load),
    .din5(local_accum_21_load),
    .din6(local_accum_25_load),
    .din7(local_accum_29_load),
    .din8(local_accum_33_load),
    .din9(local_accum_37_load),
    .din10(local_accum_41_load),
    .din11(local_accum_45_load),
    .din12(local_accum_49_load),
    .din13(local_accum_53_load),
    .din14(local_accum_57_load),
    .din15(local_accum_61_load),
    .def(tmp_1_fu_859_p33),
    .sel(trunc_ln185_1_fu_748_p1),
    .dout(tmp_1_fu_859_p35)
);

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_33_6_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 6'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 6'h4 ),
    .din1_WIDTH( 32 ),
    .CASE2( 6'h8 ),
    .din2_WIDTH( 32 ),
    .CASE3( 6'hC ),
    .din3_WIDTH( 32 ),
    .CASE4( 6'h10 ),
    .din4_WIDTH( 32 ),
    .CASE5( 6'h14 ),
    .din5_WIDTH( 32 ),
    .CASE6( 6'h18 ),
    .din6_WIDTH( 32 ),
    .CASE7( 6'h1C ),
    .din7_WIDTH( 32 ),
    .CASE8( 6'h20 ),
    .din8_WIDTH( 32 ),
    .CASE9( 6'h24 ),
    .din9_WIDTH( 32 ),
    .CASE10( 6'h28 ),
    .din10_WIDTH( 32 ),
    .CASE11( 6'h2C ),
    .din11_WIDTH( 32 ),
    .CASE12( 6'h30 ),
    .din12_WIDTH( 32 ),
    .CASE13( 6'h34 ),
    .din13_WIDTH( 32 ),
    .CASE14( 6'h38 ),
    .din14_WIDTH( 32 ),
    .CASE15( 6'h3C ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
sparsemux_33_6_32_1_1_U550(
    .din0(local_accum_2_load),
    .din1(local_accum_6_load),
    .din2(local_accum_10_load),
    .din3(local_accum_14_load),
    .din4(local_accum_18_load),
    .din5(local_accum_22_load),
    .din6(local_accum_26_load),
    .din7(local_accum_30_load),
    .din8(local_accum_34_load),
    .din9(local_accum_38_load),
    .din10(local_accum_42_load),
    .din11(local_accum_46_load),
    .din12(local_accum_50_load),
    .din13(local_accum_54_load),
    .din14(local_accum_58_load),
    .din15(local_accum_62_load),
    .def(tmp_s_fu_934_p33),
    .sel(trunc_ln185_1_fu_748_p1),
    .dout(tmp_s_fu_934_p35)
);

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_33_6_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 6'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 6'h4 ),
    .din1_WIDTH( 32 ),
    .CASE2( 6'h8 ),
    .din2_WIDTH( 32 ),
    .CASE3( 6'hC ),
    .din3_WIDTH( 32 ),
    .CASE4( 6'h10 ),
    .din4_WIDTH( 32 ),
    .CASE5( 6'h14 ),
    .din5_WIDTH( 32 ),
    .CASE6( 6'h18 ),
    .din6_WIDTH( 32 ),
    .CASE7( 6'h1C ),
    .din7_WIDTH( 32 ),
    .CASE8( 6'h20 ),
    .din8_WIDTH( 32 ),
    .CASE9( 6'h24 ),
    .din9_WIDTH( 32 ),
    .CASE10( 6'h28 ),
    .din10_WIDTH( 32 ),
    .CASE11( 6'h2C ),
    .din11_WIDTH( 32 ),
    .CASE12( 6'h30 ),
    .din12_WIDTH( 32 ),
    .CASE13( 6'h34 ),
    .din13_WIDTH( 32 ),
    .CASE14( 6'h38 ),
    .din14_WIDTH( 32 ),
    .CASE15( 6'h3C ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
sparsemux_33_6_32_1_1_U551(
    .din0(local_accum_3_load),
    .din1(local_accum_7_load),
    .din2(local_accum_11_load),
    .din3(local_accum_15_load),
    .din4(local_accum_19_load),
    .din5(local_accum_23_load),
    .din6(local_accum_27_load),
    .din7(local_accum_31_load),
    .din8(local_accum_35_load),
    .din9(local_accum_39_load),
    .din10(local_accum_43_load),
    .din11(local_accum_47_load),
    .din12(local_accum_51_load),
    .din13(local_accum_55_load),
    .din14(local_accum_59_load),
    .din15(local_accum_63_load),
    .def(tmp_2_fu_1009_p33),
    .sel(trunc_ln185_1_fu_748_p1),
    .dout(tmp_2_fu_1009_p35)
);

kernel_mhsa_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((tmp_fu_736_p3 == 1'd0)) begin
            i_fu_218 <= add_ln185_fu_1122_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_218 <= 7'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_8 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_8 = i_fu_218;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_1_ce0_local = 1'b1;
    end else begin
        xb_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_1_we0_local = 1'b1;
    end else begin
        xb_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_2_ce0_local = 1'b1;
    end else begin
        xb_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_2_we0_local = 1'b1;
    end else begin
        xb_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_3_ce0_local = 1'b1;
    end else begin
        xb_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_3_we0_local = 1'b1;
    end else begin
        xb_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_4_ce0_local = 1'b1;
    end else begin
        xb_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_4_we0_local = 1'b1;
    end else begin
        xb_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_5_ce0_local = 1'b1;
    end else begin
        xb_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_5_we0_local = 1'b1;
    end else begin
        xb_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_6_ce0_local = 1'b1;
    end else begin
        xb_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_6_we0_local = 1'b1;
    end else begin
        xb_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_7_ce0_local = 1'b1;
    end else begin
        xb_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_7_we0_local = 1'b1;
    end else begin
        xb_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_ce0_local = 1'b1;
    end else begin
        xb_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_736_p3 == 1'd0) & (icmp_ln188_fu_1084_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        xb_we0_local = 1'b1;
    end else begin
        xb_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln185_fu_1122_p2 = (ap_sig_allocacmp_i_8 + 7'd4);

assign add_ln188_fu_841_p2 = (zext_ln188_1_fu_837_p1 + p_udiv1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln188_fu_1084_p2 = ((trunc_ln185_fu_744_p1 == 3'd0) ? 1'b1 : 1'b0);

assign lshr_ln8_fu_827_p4 = {{ap_sig_allocacmp_i_8[6:3]}};

assign tmp_1_fu_859_p33 = 'bx;

assign tmp_2_fu_1009_p33 = 'bx;

assign tmp_9_fu_752_p33 = 'bx;

assign tmp_fu_736_p3 = ap_sig_allocacmp_i_8[32'd6];

assign tmp_s_fu_934_p33 = 'bx;

assign trunc_ln185_1_fu_748_p1 = ap_sig_allocacmp_i_8[5:0];

assign trunc_ln185_fu_744_p1 = ap_sig_allocacmp_i_8[2:0];

assign xb_1_address0 = zext_ln188_fu_847_p1;

assign xb_1_ce0 = xb_1_ce0_local;

assign xb_1_d0 = tmp_1_fu_859_p35;

assign xb_1_we0 = xb_1_we0_local;

assign xb_2_address0 = zext_ln188_fu_847_p1;

assign xb_2_ce0 = xb_2_ce0_local;

assign xb_2_d0 = tmp_s_fu_934_p35;

assign xb_2_we0 = xb_2_we0_local;

assign xb_3_address0 = zext_ln188_fu_847_p1;

assign xb_3_ce0 = xb_3_ce0_local;

assign xb_3_d0 = tmp_2_fu_1009_p35;

assign xb_3_we0 = xb_3_we0_local;

assign xb_4_address0 = zext_ln188_fu_847_p1;

assign xb_4_ce0 = xb_4_ce0_local;

assign xb_4_d0 = tmp_9_fu_752_p35;

assign xb_4_we0 = xb_4_we0_local;

assign xb_5_address0 = zext_ln188_fu_847_p1;

assign xb_5_ce0 = xb_5_ce0_local;

assign xb_5_d0 = tmp_1_fu_859_p35;

assign xb_5_we0 = xb_5_we0_local;

assign xb_6_address0 = zext_ln188_fu_847_p1;

assign xb_6_ce0 = xb_6_ce0_local;

assign xb_6_d0 = tmp_s_fu_934_p35;

assign xb_6_we0 = xb_6_we0_local;

assign xb_7_address0 = zext_ln188_fu_847_p1;

assign xb_7_ce0 = xb_7_ce0_local;

assign xb_7_d0 = tmp_2_fu_1009_p35;

assign xb_7_we0 = xb_7_we0_local;

assign xb_address0 = zext_ln188_fu_847_p1;

assign xb_ce0 = xb_ce0_local;

assign xb_d0 = tmp_9_fu_752_p35;

assign xb_we0 = xb_we0_local;

assign zext_ln188_1_fu_837_p1 = lshr_ln8_fu_827_p4;

assign zext_ln188_fu_847_p1 = add_ln188_fu_841_p2;

endmodule //kernel_mhsa_kernel_mhsa_Pipeline_ACCUM_WRITEBACK
