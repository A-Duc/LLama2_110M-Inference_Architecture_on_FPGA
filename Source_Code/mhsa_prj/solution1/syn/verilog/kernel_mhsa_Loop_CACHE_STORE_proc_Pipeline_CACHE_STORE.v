// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_Loop_CACHE_STORE_proc_Pipeline_CACHE_STORE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem2_0_AWVALID,
        m_axi_gmem2_0_AWREADY,
        m_axi_gmem2_0_AWADDR,
        m_axi_gmem2_0_AWID,
        m_axi_gmem2_0_AWLEN,
        m_axi_gmem2_0_AWSIZE,
        m_axi_gmem2_0_AWBURST,
        m_axi_gmem2_0_AWLOCK,
        m_axi_gmem2_0_AWCACHE,
        m_axi_gmem2_0_AWPROT,
        m_axi_gmem2_0_AWQOS,
        m_axi_gmem2_0_AWREGION,
        m_axi_gmem2_0_AWUSER,
        m_axi_gmem2_0_WVALID,
        m_axi_gmem2_0_WREADY,
        m_axi_gmem2_0_WDATA,
        m_axi_gmem2_0_WSTRB,
        m_axi_gmem2_0_WLAST,
        m_axi_gmem2_0_WID,
        m_axi_gmem2_0_WUSER,
        m_axi_gmem2_0_ARVALID,
        m_axi_gmem2_0_ARREADY,
        m_axi_gmem2_0_ARADDR,
        m_axi_gmem2_0_ARID,
        m_axi_gmem2_0_ARLEN,
        m_axi_gmem2_0_ARSIZE,
        m_axi_gmem2_0_ARBURST,
        m_axi_gmem2_0_ARLOCK,
        m_axi_gmem2_0_ARCACHE,
        m_axi_gmem2_0_ARPROT,
        m_axi_gmem2_0_ARQOS,
        m_axi_gmem2_0_ARREGION,
        m_axi_gmem2_0_ARUSER,
        m_axi_gmem2_0_RVALID,
        m_axi_gmem2_0_RREADY,
        m_axi_gmem2_0_RDATA,
        m_axi_gmem2_0_RLAST,
        m_axi_gmem2_0_RID,
        m_axi_gmem2_0_RFIFONUM,
        m_axi_gmem2_0_RUSER,
        m_axi_gmem2_0_RRESP,
        m_axi_gmem2_0_BVALID,
        m_axi_gmem2_0_BREADY,
        m_axi_gmem2_0_BRESP,
        m_axi_gmem2_0_BID,
        m_axi_gmem2_0_BUSER,
        m_axi_gmem3_0_AWVALID,
        m_axi_gmem3_0_AWREADY,
        m_axi_gmem3_0_AWADDR,
        m_axi_gmem3_0_AWID,
        m_axi_gmem3_0_AWLEN,
        m_axi_gmem3_0_AWSIZE,
        m_axi_gmem3_0_AWBURST,
        m_axi_gmem3_0_AWLOCK,
        m_axi_gmem3_0_AWCACHE,
        m_axi_gmem3_0_AWPROT,
        m_axi_gmem3_0_AWQOS,
        m_axi_gmem3_0_AWREGION,
        m_axi_gmem3_0_AWUSER,
        m_axi_gmem3_0_WVALID,
        m_axi_gmem3_0_WREADY,
        m_axi_gmem3_0_WDATA,
        m_axi_gmem3_0_WSTRB,
        m_axi_gmem3_0_WLAST,
        m_axi_gmem3_0_WID,
        m_axi_gmem3_0_WUSER,
        m_axi_gmem3_0_ARVALID,
        m_axi_gmem3_0_ARREADY,
        m_axi_gmem3_0_ARADDR,
        m_axi_gmem3_0_ARID,
        m_axi_gmem3_0_ARLEN,
        m_axi_gmem3_0_ARSIZE,
        m_axi_gmem3_0_ARBURST,
        m_axi_gmem3_0_ARLOCK,
        m_axi_gmem3_0_ARCACHE,
        m_axi_gmem3_0_ARPROT,
        m_axi_gmem3_0_ARQOS,
        m_axi_gmem3_0_ARREGION,
        m_axi_gmem3_0_ARUSER,
        m_axi_gmem3_0_RVALID,
        m_axi_gmem3_0_RREADY,
        m_axi_gmem3_0_RDATA,
        m_axi_gmem3_0_RLAST,
        m_axi_gmem3_0_RID,
        m_axi_gmem3_0_RFIFONUM,
        m_axi_gmem3_0_RUSER,
        m_axi_gmem3_0_RRESP,
        m_axi_gmem3_0_BVALID,
        m_axi_gmem3_0_BREADY,
        m_axi_gmem3_0_BRESP,
        m_axi_gmem3_0_BID,
        m_axi_gmem3_0_BUSER,
        sext_ln55_1,
        sext_ln55,
        p_cast_cast,
        p_cast1_cast,
        out_k_rope_0_address0,
        out_k_rope_0_ce0,
        out_k_rope_0_q0,
        out_k_rope_1_address0,
        out_k_rope_1_ce0,
        out_k_rope_1_q0,
        out_k_rope_2_address0,
        out_k_rope_2_ce0,
        out_k_rope_2_q0,
        out_k_rope_3_address0,
        out_k_rope_3_ce0,
        out_k_rope_3_q0,
        out_k_rope_4_address0,
        out_k_rope_4_ce0,
        out_k_rope_4_q0,
        out_k_rope_5_address0,
        out_k_rope_5_ce0,
        out_k_rope_5_q0,
        out_k_rope_6_address0,
        out_k_rope_6_ce0,
        out_k_rope_6_q0,
        out_k_rope_7_address0,
        out_k_rope_7_ce0,
        out_k_rope_7_q0,
        out_v_0_address0,
        out_v_0_ce0,
        out_v_0_q0,
        out_v_1_address0,
        out_v_1_ce0,
        out_v_1_q0,
        out_v_2_address0,
        out_v_2_ce0,
        out_v_2_q0,
        out_v_3_address0,
        out_v_3_ce0,
        out_v_3_q0,
        out_v_4_address0,
        out_v_4_ce0,
        out_v_4_q0,
        out_v_5_address0,
        out_v_5_ce0,
        out_v_5_q0,
        out_v_6_address0,
        out_v_6_ce0,
        out_v_6_q0,
        out_v_7_address0,
        out_v_7_ce0,
        out_v_7_q0,
        out_v_8_address0,
        out_v_8_ce0,
        out_v_8_q0,
        out_v_9_address0,
        out_v_9_ce0,
        out_v_9_q0,
        out_v_10_address0,
        out_v_10_ce0,
        out_v_10_q0,
        out_v_11_address0,
        out_v_11_ce0,
        out_v_11_q0,
        out_v_12_address0,
        out_v_12_ce0,
        out_v_12_q0,
        out_v_13_address0,
        out_v_13_ce0,
        out_v_13_q0,
        out_v_14_address0,
        out_v_14_ce0,
        out_v_14_q0,
        out_v_15_address0,
        out_v_15_ce0,
        out_v_15_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem2_0_AWVALID;
input   m_axi_gmem2_0_AWREADY;
output  [63:0] m_axi_gmem2_0_AWADDR;
output  [0:0] m_axi_gmem2_0_AWID;
output  [31:0] m_axi_gmem2_0_AWLEN;
output  [2:0] m_axi_gmem2_0_AWSIZE;
output  [1:0] m_axi_gmem2_0_AWBURST;
output  [1:0] m_axi_gmem2_0_AWLOCK;
output  [3:0] m_axi_gmem2_0_AWCACHE;
output  [2:0] m_axi_gmem2_0_AWPROT;
output  [3:0] m_axi_gmem2_0_AWQOS;
output  [3:0] m_axi_gmem2_0_AWREGION;
output  [0:0] m_axi_gmem2_0_AWUSER;
output   m_axi_gmem2_0_WVALID;
input   m_axi_gmem2_0_WREADY;
output  [31:0] m_axi_gmem2_0_WDATA;
output  [3:0] m_axi_gmem2_0_WSTRB;
output   m_axi_gmem2_0_WLAST;
output  [0:0] m_axi_gmem2_0_WID;
output  [0:0] m_axi_gmem2_0_WUSER;
output   m_axi_gmem2_0_ARVALID;
input   m_axi_gmem2_0_ARREADY;
output  [63:0] m_axi_gmem2_0_ARADDR;
output  [0:0] m_axi_gmem2_0_ARID;
output  [31:0] m_axi_gmem2_0_ARLEN;
output  [2:0] m_axi_gmem2_0_ARSIZE;
output  [1:0] m_axi_gmem2_0_ARBURST;
output  [1:0] m_axi_gmem2_0_ARLOCK;
output  [3:0] m_axi_gmem2_0_ARCACHE;
output  [2:0] m_axi_gmem2_0_ARPROT;
output  [3:0] m_axi_gmem2_0_ARQOS;
output  [3:0] m_axi_gmem2_0_ARREGION;
output  [0:0] m_axi_gmem2_0_ARUSER;
input   m_axi_gmem2_0_RVALID;
output   m_axi_gmem2_0_RREADY;
input  [31:0] m_axi_gmem2_0_RDATA;
input   m_axi_gmem2_0_RLAST;
input  [0:0] m_axi_gmem2_0_RID;
input  [12:0] m_axi_gmem2_0_RFIFONUM;
input  [0:0] m_axi_gmem2_0_RUSER;
input  [1:0] m_axi_gmem2_0_RRESP;
input   m_axi_gmem2_0_BVALID;
output   m_axi_gmem2_0_BREADY;
input  [1:0] m_axi_gmem2_0_BRESP;
input  [0:0] m_axi_gmem2_0_BID;
input  [0:0] m_axi_gmem2_0_BUSER;
output   m_axi_gmem3_0_AWVALID;
input   m_axi_gmem3_0_AWREADY;
output  [63:0] m_axi_gmem3_0_AWADDR;
output  [0:0] m_axi_gmem3_0_AWID;
output  [31:0] m_axi_gmem3_0_AWLEN;
output  [2:0] m_axi_gmem3_0_AWSIZE;
output  [1:0] m_axi_gmem3_0_AWBURST;
output  [1:0] m_axi_gmem3_0_AWLOCK;
output  [3:0] m_axi_gmem3_0_AWCACHE;
output  [2:0] m_axi_gmem3_0_AWPROT;
output  [3:0] m_axi_gmem3_0_AWQOS;
output  [3:0] m_axi_gmem3_0_AWREGION;
output  [0:0] m_axi_gmem3_0_AWUSER;
output   m_axi_gmem3_0_WVALID;
input   m_axi_gmem3_0_WREADY;
output  [31:0] m_axi_gmem3_0_WDATA;
output  [3:0] m_axi_gmem3_0_WSTRB;
output   m_axi_gmem3_0_WLAST;
output  [0:0] m_axi_gmem3_0_WID;
output  [0:0] m_axi_gmem3_0_WUSER;
output   m_axi_gmem3_0_ARVALID;
input   m_axi_gmem3_0_ARREADY;
output  [63:0] m_axi_gmem3_0_ARADDR;
output  [0:0] m_axi_gmem3_0_ARID;
output  [31:0] m_axi_gmem3_0_ARLEN;
output  [2:0] m_axi_gmem3_0_ARSIZE;
output  [1:0] m_axi_gmem3_0_ARBURST;
output  [1:0] m_axi_gmem3_0_ARLOCK;
output  [3:0] m_axi_gmem3_0_ARCACHE;
output  [2:0] m_axi_gmem3_0_ARPROT;
output  [3:0] m_axi_gmem3_0_ARQOS;
output  [3:0] m_axi_gmem3_0_ARREGION;
output  [0:0] m_axi_gmem3_0_ARUSER;
input   m_axi_gmem3_0_RVALID;
output   m_axi_gmem3_0_RREADY;
input  [31:0] m_axi_gmem3_0_RDATA;
input   m_axi_gmem3_0_RLAST;
input  [0:0] m_axi_gmem3_0_RID;
input  [12:0] m_axi_gmem3_0_RFIFONUM;
input  [0:0] m_axi_gmem3_0_RUSER;
input  [1:0] m_axi_gmem3_0_RRESP;
input   m_axi_gmem3_0_BVALID;
output   m_axi_gmem3_0_BREADY;
input  [1:0] m_axi_gmem3_0_BRESP;
input  [0:0] m_axi_gmem3_0_BID;
input  [0:0] m_axi_gmem3_0_BUSER;
input  [61:0] sext_ln55_1;
input  [61:0] sext_ln55;
input  [61:0] p_cast_cast;
input  [61:0] p_cast1_cast;
output  [6:0] out_k_rope_0_address0;
output   out_k_rope_0_ce0;
input  [31:0] out_k_rope_0_q0;
output  [6:0] out_k_rope_1_address0;
output   out_k_rope_1_ce0;
input  [31:0] out_k_rope_1_q0;
output  [6:0] out_k_rope_2_address0;
output   out_k_rope_2_ce0;
input  [31:0] out_k_rope_2_q0;
output  [6:0] out_k_rope_3_address0;
output   out_k_rope_3_ce0;
input  [31:0] out_k_rope_3_q0;
output  [6:0] out_k_rope_4_address0;
output   out_k_rope_4_ce0;
input  [31:0] out_k_rope_4_q0;
output  [6:0] out_k_rope_5_address0;
output   out_k_rope_5_ce0;
input  [31:0] out_k_rope_5_q0;
output  [6:0] out_k_rope_6_address0;
output   out_k_rope_6_ce0;
input  [31:0] out_k_rope_6_q0;
output  [6:0] out_k_rope_7_address0;
output   out_k_rope_7_ce0;
input  [31:0] out_k_rope_7_q0;
output  [5:0] out_v_0_address0;
output   out_v_0_ce0;
input  [31:0] out_v_0_q0;
output  [5:0] out_v_1_address0;
output   out_v_1_ce0;
input  [31:0] out_v_1_q0;
output  [5:0] out_v_2_address0;
output   out_v_2_ce0;
input  [31:0] out_v_2_q0;
output  [5:0] out_v_3_address0;
output   out_v_3_ce0;
input  [31:0] out_v_3_q0;
output  [5:0] out_v_4_address0;
output   out_v_4_ce0;
input  [31:0] out_v_4_q0;
output  [5:0] out_v_5_address0;
output   out_v_5_ce0;
input  [31:0] out_v_5_q0;
output  [5:0] out_v_6_address0;
output   out_v_6_ce0;
input  [31:0] out_v_6_q0;
output  [5:0] out_v_7_address0;
output   out_v_7_ce0;
input  [31:0] out_v_7_q0;
output  [5:0] out_v_8_address0;
output   out_v_8_ce0;
input  [31:0] out_v_8_q0;
output  [5:0] out_v_9_address0;
output   out_v_9_ce0;
input  [31:0] out_v_9_q0;
output  [5:0] out_v_10_address0;
output   out_v_10_ce0;
input  [31:0] out_v_10_q0;
output  [5:0] out_v_11_address0;
output   out_v_11_ce0;
input  [31:0] out_v_11_q0;
output  [5:0] out_v_12_address0;
output   out_v_12_ce0;
input  [31:0] out_v_12_q0;
output  [5:0] out_v_13_address0;
output   out_v_13_ce0;
input  [31:0] out_v_13_q0;
output  [5:0] out_v_14_address0;
output   out_v_14_ce0;
input  [31:0] out_v_14_q0;
output  [5:0] out_v_15_address0;
output   out_v_15_ce0;
input  [31:0] out_v_15_q0;

reg ap_idle;
reg m_axi_gmem2_0_WVALID;
reg m_axi_gmem3_0_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_710_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem3_blk_n_W;
wire    ap_block_pp0_stage0;
reg    gmem2_blk_n_W;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln55_fu_554_p1;
reg   [2:0] trunc_ln55_reg_886;
wire   [3:0] trunc_ln55_1_fu_558_p1;
reg   [3:0] trunc_ln55_1_reg_891;
wire   [63:0] zext_ln55_1_fu_602_p1;
wire   [63:0] zext_ln55_fu_572_p1;
wire    ap_block_pp0_stage0_01001;
reg   [9:0] i153_fu_176;
wire   [9:0] i_fu_548_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i153_load;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    out_k_rope_0_ce0_local;
reg    out_k_rope_1_ce0_local;
reg    out_k_rope_2_ce0_local;
reg    out_k_rope_3_ce0_local;
reg    out_k_rope_4_ce0_local;
reg    out_k_rope_5_ce0_local;
reg    out_k_rope_6_ce0_local;
reg    out_k_rope_7_ce0_local;
reg    out_v_0_ce0_local;
reg    out_v_1_ce0_local;
reg    out_v_2_ce0_local;
reg    out_v_3_ce0_local;
reg    out_v_4_ce0_local;
reg    out_v_5_ce0_local;
reg    out_v_6_ce0_local;
reg    out_v_7_ce0_local;
reg    out_v_8_ce0_local;
reg    out_v_9_ce0_local;
reg    out_v_10_ce0_local;
reg    out_v_11_ce0_local;
reg    out_v_12_ce0_local;
reg    out_v_13_ce0_local;
reg    out_v_14_ce0_local;
reg    out_v_15_ce0_local;
wire   [5:0] lshr_ln_fu_562_p4;
wire   [6:0] lshr_ln55_1_fu_592_p4;
wire   [31:0] tmp_fu_733_p17;
wire   [31:0] tmp_fu_733_p19;
wire   [31:0] tmp_s_fu_785_p33;
wire   [31:0] tmp_s_fu_785_p35;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] tmp_fu_733_p1;
wire   [2:0] tmp_fu_733_p3;
wire   [2:0] tmp_fu_733_p5;
wire   [2:0] tmp_fu_733_p7;
wire  signed [2:0] tmp_fu_733_p9;
wire  signed [2:0] tmp_fu_733_p11;
wire  signed [2:0] tmp_fu_733_p13;
wire  signed [2:0] tmp_fu_733_p15;
wire   [3:0] tmp_s_fu_785_p1;
wire   [3:0] tmp_s_fu_785_p3;
wire   [3:0] tmp_s_fu_785_p5;
wire   [3:0] tmp_s_fu_785_p7;
wire   [3:0] tmp_s_fu_785_p9;
wire   [3:0] tmp_s_fu_785_p11;
wire   [3:0] tmp_s_fu_785_p13;
wire   [3:0] tmp_s_fu_785_p15;
wire  signed [3:0] tmp_s_fu_785_p17;
wire  signed [3:0] tmp_s_fu_785_p19;
wire  signed [3:0] tmp_s_fu_785_p21;
wire  signed [3:0] tmp_s_fu_785_p23;
wire  signed [3:0] tmp_s_fu_785_p25;
wire  signed [3:0] tmp_s_fu_785_p27;
wire  signed [3:0] tmp_s_fu_785_p29;
wire  signed [3:0] tmp_s_fu_785_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i153_fu_176 = 10'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U521(
    .din0(out_k_rope_0_q0),
    .din1(out_k_rope_1_q0),
    .din2(out_k_rope_2_q0),
    .din3(out_k_rope_3_q0),
    .din4(out_k_rope_4_q0),
    .din5(out_k_rope_5_q0),
    .din6(out_k_rope_6_q0),
    .din7(out_k_rope_7_q0),
    .def(tmp_fu_733_p17),
    .sel(trunc_ln55_reg_886),
    .dout(tmp_fu_733_p19)
);

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U522(
    .din0(out_v_0_q0),
    .din1(out_v_1_q0),
    .din2(out_v_2_q0),
    .din3(out_v_3_q0),
    .din4(out_v_4_q0),
    .din5(out_v_5_q0),
    .din6(out_v_6_q0),
    .din7(out_v_7_q0),
    .din8(out_v_8_q0),
    .din9(out_v_9_q0),
    .din10(out_v_10_q0),
    .din11(out_v_11_q0),
    .din12(out_v_12_q0),
    .din13(out_v_13_q0),
    .din14(out_v_14_q0),
    .din15(out_v_15_q0),
    .def(tmp_s_fu_785_p33),
    .sel(trunc_ln55_1_reg_891),
    .dout(tmp_s_fu_785_p35)
);

kernel_mhsa_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
            i153_fu_176 <= i_fu_548_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i153_fu_176 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln55_1_reg_891 <= trunc_ln55_1_fu_558_p1;
        trunc_ln55_reg_886 <= trunc_ln55_fu_554_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_fu_710_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i153_load = 10'd0;
    end else begin
        ap_sig_allocacmp_i153_load = i153_fu_176;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem2_blk_n_W = m_axi_gmem2_0_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem3_blk_n_W = m_axi_gmem3_0_WREADY;
    end else begin
        gmem3_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem2_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem2_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem3_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem3_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_k_rope_0_ce0_local = 1'b1;
    end else begin
        out_k_rope_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_k_rope_1_ce0_local = 1'b1;
    end else begin
        out_k_rope_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_k_rope_2_ce0_local = 1'b1;
    end else begin
        out_k_rope_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_k_rope_3_ce0_local = 1'b1;
    end else begin
        out_k_rope_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_k_rope_4_ce0_local = 1'b1;
    end else begin
        out_k_rope_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_k_rope_5_ce0_local = 1'b1;
    end else begin
        out_k_rope_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_k_rope_6_ce0_local = 1'b1;
    end else begin
        out_k_rope_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_k_rope_7_ce0_local = 1'b1;
    end else begin
        out_k_rope_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_0_ce0_local = 1'b1;
    end else begin
        out_v_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_10_ce0_local = 1'b1;
    end else begin
        out_v_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_11_ce0_local = 1'b1;
    end else begin
        out_v_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_12_ce0_local = 1'b1;
    end else begin
        out_v_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_13_ce0_local = 1'b1;
    end else begin
        out_v_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_14_ce0_local = 1'b1;
    end else begin
        out_v_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_15_ce0_local = 1'b1;
    end else begin
        out_v_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_1_ce0_local = 1'b1;
    end else begin
        out_v_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_2_ce0_local = 1'b1;
    end else begin
        out_v_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_3_ce0_local = 1'b1;
    end else begin
        out_v_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_4_ce0_local = 1'b1;
    end else begin
        out_v_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_5_ce0_local = 1'b1;
    end else begin
        out_v_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_6_ce0_local = 1'b1;
    end else begin
        out_v_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_7_ce0_local = 1'b1;
    end else begin
        out_v_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_8_ce0_local = 1'b1;
    end else begin
        out_v_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_v_9_ce0_local = 1'b1;
    end else begin
        out_v_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem3_0_WREADY == 1'b0) | (m_axi_gmem2_0_WREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_fu_548_p2 = (ap_sig_allocacmp_i153_load + 10'd1);

assign icmp_ln55_fu_710_p2 = ((ap_sig_allocacmp_i153_load == 10'd767) ? 1'b1 : 1'b0);

assign lshr_ln55_1_fu_592_p4 = {{ap_sig_allocacmp_i153_load[9:3]}};

assign lshr_ln_fu_562_p4 = {{ap_sig_allocacmp_i153_load[9:4]}};

assign m_axi_gmem2_0_ARADDR = 64'd0;

assign m_axi_gmem2_0_ARBURST = 2'd0;

assign m_axi_gmem2_0_ARCACHE = 4'd0;

assign m_axi_gmem2_0_ARID = 1'd0;

assign m_axi_gmem2_0_ARLEN = 32'd0;

assign m_axi_gmem2_0_ARLOCK = 2'd0;

assign m_axi_gmem2_0_ARPROT = 3'd0;

assign m_axi_gmem2_0_ARQOS = 4'd0;

assign m_axi_gmem2_0_ARREGION = 4'd0;

assign m_axi_gmem2_0_ARSIZE = 3'd0;

assign m_axi_gmem2_0_ARUSER = 1'd0;

assign m_axi_gmem2_0_ARVALID = 1'b0;

assign m_axi_gmem2_0_AWADDR = 64'd0;

assign m_axi_gmem2_0_AWBURST = 2'd0;

assign m_axi_gmem2_0_AWCACHE = 4'd0;

assign m_axi_gmem2_0_AWID = 1'd0;

assign m_axi_gmem2_0_AWLEN = 32'd0;

assign m_axi_gmem2_0_AWLOCK = 2'd0;

assign m_axi_gmem2_0_AWPROT = 3'd0;

assign m_axi_gmem2_0_AWQOS = 4'd0;

assign m_axi_gmem2_0_AWREGION = 4'd0;

assign m_axi_gmem2_0_AWSIZE = 3'd0;

assign m_axi_gmem2_0_AWUSER = 1'd0;

assign m_axi_gmem2_0_AWVALID = 1'b0;

assign m_axi_gmem2_0_BREADY = 1'b0;

assign m_axi_gmem2_0_RREADY = 1'b0;

assign m_axi_gmem2_0_WDATA = tmp_fu_733_p19;

assign m_axi_gmem2_0_WID = 1'd0;

assign m_axi_gmem2_0_WLAST = 1'b0;

assign m_axi_gmem2_0_WSTRB = 4'd15;

assign m_axi_gmem2_0_WUSER = 1'd0;

assign m_axi_gmem3_0_ARADDR = 64'd0;

assign m_axi_gmem3_0_ARBURST = 2'd0;

assign m_axi_gmem3_0_ARCACHE = 4'd0;

assign m_axi_gmem3_0_ARID = 1'd0;

assign m_axi_gmem3_0_ARLEN = 32'd0;

assign m_axi_gmem3_0_ARLOCK = 2'd0;

assign m_axi_gmem3_0_ARPROT = 3'd0;

assign m_axi_gmem3_0_ARQOS = 4'd0;

assign m_axi_gmem3_0_ARREGION = 4'd0;

assign m_axi_gmem3_0_ARSIZE = 3'd0;

assign m_axi_gmem3_0_ARUSER = 1'd0;

assign m_axi_gmem3_0_ARVALID = 1'b0;

assign m_axi_gmem3_0_AWADDR = 64'd0;

assign m_axi_gmem3_0_AWBURST = 2'd0;

assign m_axi_gmem3_0_AWCACHE = 4'd0;

assign m_axi_gmem3_0_AWID = 1'd0;

assign m_axi_gmem3_0_AWLEN = 32'd0;

assign m_axi_gmem3_0_AWLOCK = 2'd0;

assign m_axi_gmem3_0_AWPROT = 3'd0;

assign m_axi_gmem3_0_AWQOS = 4'd0;

assign m_axi_gmem3_0_AWREGION = 4'd0;

assign m_axi_gmem3_0_AWSIZE = 3'd0;

assign m_axi_gmem3_0_AWUSER = 1'd0;

assign m_axi_gmem3_0_AWVALID = 1'b0;

assign m_axi_gmem3_0_BREADY = 1'b0;

assign m_axi_gmem3_0_RREADY = 1'b0;

assign m_axi_gmem3_0_WDATA = tmp_s_fu_785_p35;

assign m_axi_gmem3_0_WID = 1'd0;

assign m_axi_gmem3_0_WLAST = 1'b0;

assign m_axi_gmem3_0_WSTRB = 4'd15;

assign m_axi_gmem3_0_WUSER = 1'd0;

assign out_k_rope_0_address0 = zext_ln55_1_fu_602_p1;

assign out_k_rope_0_ce0 = out_k_rope_0_ce0_local;

assign out_k_rope_1_address0 = zext_ln55_1_fu_602_p1;

assign out_k_rope_1_ce0 = out_k_rope_1_ce0_local;

assign out_k_rope_2_address0 = zext_ln55_1_fu_602_p1;

assign out_k_rope_2_ce0 = out_k_rope_2_ce0_local;

assign out_k_rope_3_address0 = zext_ln55_1_fu_602_p1;

assign out_k_rope_3_ce0 = out_k_rope_3_ce0_local;

assign out_k_rope_4_address0 = zext_ln55_1_fu_602_p1;

assign out_k_rope_4_ce0 = out_k_rope_4_ce0_local;

assign out_k_rope_5_address0 = zext_ln55_1_fu_602_p1;

assign out_k_rope_5_ce0 = out_k_rope_5_ce0_local;

assign out_k_rope_6_address0 = zext_ln55_1_fu_602_p1;

assign out_k_rope_6_ce0 = out_k_rope_6_ce0_local;

assign out_k_rope_7_address0 = zext_ln55_1_fu_602_p1;

assign out_k_rope_7_ce0 = out_k_rope_7_ce0_local;

assign out_v_0_address0 = zext_ln55_fu_572_p1;

assign out_v_0_ce0 = out_v_0_ce0_local;

assign out_v_10_address0 = zext_ln55_fu_572_p1;

assign out_v_10_ce0 = out_v_10_ce0_local;

assign out_v_11_address0 = zext_ln55_fu_572_p1;

assign out_v_11_ce0 = out_v_11_ce0_local;

assign out_v_12_address0 = zext_ln55_fu_572_p1;

assign out_v_12_ce0 = out_v_12_ce0_local;

assign out_v_13_address0 = zext_ln55_fu_572_p1;

assign out_v_13_ce0 = out_v_13_ce0_local;

assign out_v_14_address0 = zext_ln55_fu_572_p1;

assign out_v_14_ce0 = out_v_14_ce0_local;

assign out_v_15_address0 = zext_ln55_fu_572_p1;

assign out_v_15_ce0 = out_v_15_ce0_local;

assign out_v_1_address0 = zext_ln55_fu_572_p1;

assign out_v_1_ce0 = out_v_1_ce0_local;

assign out_v_2_address0 = zext_ln55_fu_572_p1;

assign out_v_2_ce0 = out_v_2_ce0_local;

assign out_v_3_address0 = zext_ln55_fu_572_p1;

assign out_v_3_ce0 = out_v_3_ce0_local;

assign out_v_4_address0 = zext_ln55_fu_572_p1;

assign out_v_4_ce0 = out_v_4_ce0_local;

assign out_v_5_address0 = zext_ln55_fu_572_p1;

assign out_v_5_ce0 = out_v_5_ce0_local;

assign out_v_6_address0 = zext_ln55_fu_572_p1;

assign out_v_6_ce0 = out_v_6_ce0_local;

assign out_v_7_address0 = zext_ln55_fu_572_p1;

assign out_v_7_ce0 = out_v_7_ce0_local;

assign out_v_8_address0 = zext_ln55_fu_572_p1;

assign out_v_8_ce0 = out_v_8_ce0_local;

assign out_v_9_address0 = zext_ln55_fu_572_p1;

assign out_v_9_ce0 = out_v_9_ce0_local;

assign tmp_fu_733_p17 = 'bx;

assign tmp_s_fu_785_p33 = 'bx;

assign trunc_ln55_1_fu_558_p1 = ap_sig_allocacmp_i153_load[3:0];

assign trunc_ln55_fu_554_p1 = ap_sig_allocacmp_i153_load[2:0];

assign zext_ln55_1_fu_602_p1 = lshr_ln55_1_fu_592_p4;

assign zext_ln55_fu_572_p1 = lshr_ln_fu_562_p4;

endmodule //kernel_mhsa_Loop_CACHE_STORE_proc_Pipeline_CACHE_STORE
