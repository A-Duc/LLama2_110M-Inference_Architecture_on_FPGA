// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_kernel_softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_vec_address0,
        i_vec_ce0,
        i_vec_we0,
        i_vec_d0,
        i_vec_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2;
parameter    ap_ST_fsm_state4 = 13'd4;
parameter    ap_ST_fsm_state5 = 13'd8;
parameter    ap_ST_fsm_state6 = 13'd16;
parameter    ap_ST_fsm_state7 = 13'd32;
parameter    ap_ST_fsm_pp1_stage0 = 13'd64;
parameter    ap_ST_fsm_pp1_stage1 = 13'd128;
parameter    ap_ST_fsm_state12 = 13'd256;
parameter    ap_ST_fsm_pp2_stage0 = 13'd512;
parameter    ap_ST_fsm_state27 = 13'd1024;
parameter    ap_ST_fsm_pp3_stage0 = 13'd2048;
parameter    ap_ST_fsm_state41 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] i_vec_address0;
output   i_vec_ce0;
output   i_vec_we0;
output  [31:0] i_vec_d0;
input  [31:0] i_vec_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] i1_reg_151;
reg   [9:0] add_ln1723_reg_162;
reg   [9:0] i_120_reg_173;
reg   [31:0] max_val_322_reg_184;
reg   [9:0] i_224_reg_193;
reg   [9:0] i_327_reg_204;
reg   [31:0] reg_241;
wire    ap_CS_fsm_state7;
wire    ap_block_pp3_stage0_11001;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0_11001;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire   [9:0] i_fu_249_p2;
reg   [9:0] i_reg_680;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln10_fu_255_p1;
reg   [63:0] zext_ln10_reg_685;
wire   [0:0] icmp_ln10_fu_264_p2;
reg   [0:0] icmp_ln10_reg_695;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln21_8_fu_322_p2;
reg   [0:0] icmp_ln21_8_reg_709;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln21_9_fu_328_p2;
reg   [0:0] icmp_ln21_9_reg_714;
wire   [0:0] icmp_ln21_10_fu_334_p2;
reg   [0:0] icmp_ln21_10_reg_719;
wire   [0:0] icmp_ln21_11_fu_340_p2;
reg   [0:0] icmp_ln21_11_reg_724;
wire   [0:0] grp_fu_224_p2;
reg   [0:0] tmp_3_reg_729;
wire    ap_CS_fsm_state6;
wire   [9:0] i_3_fu_378_p2;
reg   [9:0] i_3_reg_739;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0_11001;
wire   [9:0] add_ln17_fu_402_p2;
reg   [9:0] add_ln17_reg_754;
reg   [31:0] max_val_4_reg_760;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0_reg;
wire    ap_block_pp1_stage1_11001;
reg   [31:0] max_val_6_reg_768;
wire   [0:0] icmp_ln17_fu_408_p2;
reg   [0:0] icmp_ln17_reg_776;
wire   [31:0] max_val_5_fu_503_p3;
reg   [31:0] max_val_5_reg_780;
wire   [31:0] max_val_7_fu_598_p3;
reg   [31:0] max_val_7_reg_788;
reg    ap_enable_reg_pp1_iter1;
wire   [9:0] i_4_fu_604_p2;
reg   [9:0] i_4_reg_795;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln27_fu_610_p2;
reg   [0:0] icmp_ln27_reg_800;
reg   [0:0] icmp_ln27_reg_800_pp2_iter1_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter2_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter3_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter4_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter5_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter6_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter7_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter8_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter9_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter10_reg;
reg   [0:0] icmp_ln27_reg_800_pp2_iter11_reg;
reg   [9:0] vec_local_addr_4_reg_805;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter1_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter2_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter3_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter4_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter5_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter6_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter7_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter8_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter9_reg;
reg   [9:0] vec_local_addr_4_reg_805_pp2_iter10_reg;
wire   [31:0] grp_fu_215_p2;
reg   [31:0] sub_reg_812;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] tmp_reg_818;
wire   [31:0] grp_fu_638_p3;
reg   [31:0] sum_reg_823;
reg    ap_enable_reg_pp2_iter13;
wire   [9:0] i_5_fu_644_p2;
reg   [9:0] i_5_reg_829;
reg    ap_enable_reg_pp3_iter0;
wire   [63:0] zext_ln35_fu_650_p1;
reg   [63:0] zext_ln35_reg_834;
reg   [63:0] zext_ln35_reg_834_pp3_iter1_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter2_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter3_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter4_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter5_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter6_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter7_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter8_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter9_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter10_reg;
reg   [63:0] zext_ln35_reg_834_pp3_iter11_reg;
wire   [0:0] icmp_ln35_fu_659_p2;
reg   [0:0] icmp_ln35_reg_844;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage1_subdone;
reg    ap_condition_pp1_flush_enable;
wire    ap_CS_fsm_state12;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
wire    ap_CS_fsm_state27;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter10;
reg    ap_enable_reg_pp3_iter11;
reg    ap_enable_reg_pp3_iter12;
wire   [31:0] vec_local_q0;
wire   [31:0] vec_local_q1;
reg   [9:0] ap_phi_mux_i1_phi_fu_155_p4;
wire    ap_block_pp0_stage0;
reg   [9:0] ap_phi_mux_add_ln1723_phi_fu_166_p4;
wire    ap_block_pp1_stage0;
reg   [9:0] ap_phi_mux_i_120_phi_fu_177_p4;
reg   [9:0] ap_phi_mux_i_224_phi_fu_197_p4;
wire    ap_block_pp2_stage0;
reg   [9:0] ap_phi_mux_i_327_phi_fu_208_p4;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln21_fu_369_p1;
wire   [63:0] zext_ln16_fu_384_p1;
wire   [63:0] zext_ln18_fu_393_p1;
wire   [63:0] zext_ln27_fu_616_p1;
reg    i_vec_ce0_local;
reg   [8:0] i_vec_address0_local;
reg    i_vec_we0_local;
wire   [31:0] grp_fu_219_p2;
reg    vec_local_we0_local;
reg   [31:0] vec_local_d0_local;
reg    vec_local_ce0_local;
reg   [9:0] vec_local_address0_local;
reg    vec_local_ce1_local;
reg   [9:0] vec_local_address1_local;
reg   [31:0] grp_fu_215_p0;
reg   [31:0] grp_fu_215_p1;
reg   [31:0] grp_fu_224_p0;
reg   [31:0] grp_fu_224_p1;
wire    ap_block_pp1_stage1;
wire   [31:0] bitcast_ln21_4_fu_286_p1;
wire   [31:0] bitcast_ln21_5_fu_304_p1;
wire   [7:0] tmp_1_fu_290_p4;
wire   [22:0] trunc_ln21_fu_300_p1;
wire   [7:0] tmp_2_fu_308_p4;
wire   [22:0] trunc_ln21_1_fu_318_p1;
wire   [0:0] or_ln21_4_fu_350_p2;
wire   [0:0] or_ln21_5_fu_354_p2;
wire   [0:0] and_ln21_4_fu_358_p2;
wire   [0:0] and_ln21_5_fu_364_p2;
wire   [31:0] bitcast_ln21_2_fu_413_p1;
wire   [31:0] bitcast_ln21_3_fu_430_p1;
wire   [7:0] tmp_8_fu_416_p4;
wire   [22:0] trunc_ln21_2_fu_426_p1;
wire   [0:0] icmp_ln21_5_fu_454_p2;
wire   [0:0] icmp_ln21_4_fu_448_p2;
wire   [7:0] tmp_9_fu_434_p4;
wire   [22:0] trunc_ln21_3_fu_444_p1;
wire   [0:0] icmp_ln21_7_fu_472_p2;
wire   [0:0] icmp_ln21_6_fu_466_p2;
wire   [0:0] or_ln21_2_fu_460_p2;
wire   [0:0] and_ln21_2_fu_491_p2;
wire   [0:0] or_ln21_3_fu_478_p2;
wire   [0:0] and_ln21_3_fu_497_p2;
wire   [31:0] bitcast_ln21_fu_510_p1;
wire   [31:0] bitcast_ln21_1_fu_527_p1;
wire   [7:0] tmp_5_fu_513_p4;
wire   [22:0] trunc_ln21_4_fu_523_p1;
wire   [0:0] icmp_ln21_1_fu_550_p2;
wire   [0:0] icmp_ln21_fu_544_p2;
wire   [7:0] tmp_6_fu_530_p4;
wire   [22:0] trunc_ln21_5_fu_540_p1;
wire   [0:0] icmp_ln21_3_fu_568_p2;
wire   [0:0] icmp_ln21_2_fu_562_p2;
wire   [0:0] or_ln21_fu_556_p2;
wire   [0:0] and_ln21_fu_586_p2;
wire   [0:0] or_ln21_1_fu_574_p2;
wire   [0:0] and_ln21_1_fu_592_p2;
reg   [31:0] grp_fu_638_p1;
reg   [0:0] grp_fu_638_p2;
wire    ap_block_pp1_stage0_00001;
wire    ap_block_pp1_stage1_00001;
reg    grp_fu_638_in_valid;
wire    ap_CS_fsm_state41;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_block_pp1_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [31:0] grp_fu_638_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0_reg = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter12 = 1'b0;
end

kernel_mhsa_kernel_softmax_vec_local_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
vec_local_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec_local_address0_local),
    .ce0(vec_local_ce0_local),
    .we0(vec_local_we0_local),
    .d0(vec_local_d0_local),
    .q0(vec_local_q0),
    .address1(vec_local_address1_local),
    .ce1(vec_local_ce1_local),
    .q1(vec_local_q1)
);

kernel_mhsa_fsub_32ns_32ns_32_1_primitive_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_1_primitive_dsp_1_U1033(
    .din0(grp_fu_215_p0),
    .din1(grp_fu_215_p1),
    .dout(grp_fu_215_p2)
);

kernel_mhsa_fdiv_32ns_32ns_32_11_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_11_no_dsp_1_U1034(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_241),
    .din1(sum_reg_823),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

kernel_mhsa_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U1035(
    .din0(grp_fu_224_p0),
    .din1(grp_fu_224_p1),
    .opcode(5'd2),
    .dout(grp_fu_224_p2)
);

kernel_mhsa_fexp_32ns_32ns_32_9_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fexp_32ns_32ns_32_9_med_dsp_1_U1036(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(sub_reg_812),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

kernel_mhsa_facc_32ns_32ns_1ns_32_2_primitive_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .DWIDTH( 32 ),
    .OUTPUT_DATA_WIDTH( 32 ))
facc_32ns_32ns_1ns_32_2_primitive_dsp_1_U1037(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(grp_fu_638_p1),
    .in_last(grp_fu_638_p2),
    .in_valid(grp_fu_638_in_valid),
    .out_data(grp_fu_638_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp2_iter13 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp3_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln17_reg_776 == 1'd1))) begin
        add_ln1723_reg_162 <= add_ln17_reg_754;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln1723_reg_162 <= 10'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_reg_695 == 1'd0))) begin
        i1_reg_151 <= i_reg_680;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i1_reg_151 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln17_reg_776 == 1'd1))) begin
        i_120_reg_173 <= i_3_reg_739;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_120_reg_173 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_224_reg_193 <= 10'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_reg_800 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_224_reg_193 <= i_4_reg_795;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_327_reg_204 <= 10'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln35_reg_844 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_327_reg_204 <= i_5_reg_829;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln17_reg_776 == 1'd1))) begin
        max_val_322_reg_184 <= max_val_7_fu_598_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        max_val_322_reg_184 <= vec_local_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        reg_241 <= vec_local_q0;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reg_241 <= vec_local_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        add_ln17_reg_754 <= add_ln17_fu_402_p2;
        i_3_reg_739 <= i_3_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_215_p0 <= vec_local_q1;
        grp_fu_215_p1 <= max_val_7_reg_788;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_4_reg_795 <= i_4_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_5_reg_829 <= i_5_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_680 <= i_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_695 <= icmp_ln10_fu_264_p2;
        zext_ln10_reg_685[9 : 0] <= zext_ln10_fu_255_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        icmp_ln17_reg_776 <= icmp_ln17_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln21_10_reg_719 <= icmp_ln21_10_fu_334_p2;
        icmp_ln21_11_reg_724 <= icmp_ln21_11_fu_340_p2;
        icmp_ln21_8_reg_709 <= icmp_ln21_8_fu_322_p2;
        icmp_ln21_9_reg_714 <= icmp_ln21_9_fu_328_p2;
        tmp_3_reg_729 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln27_reg_800 <= icmp_ln27_fu_610_p2;
        icmp_ln27_reg_800_pp2_iter1_reg <= icmp_ln27_reg_800;
        vec_local_addr_4_reg_805 <= zext_ln27_fu_616_p1;
        vec_local_addr_4_reg_805_pp2_iter1_reg <= vec_local_addr_4_reg_805;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln27_reg_800_pp2_iter10_reg <= icmp_ln27_reg_800_pp2_iter9_reg;
        icmp_ln27_reg_800_pp2_iter11_reg <= icmp_ln27_reg_800_pp2_iter10_reg;
        icmp_ln27_reg_800_pp2_iter2_reg <= icmp_ln27_reg_800_pp2_iter1_reg;
        icmp_ln27_reg_800_pp2_iter3_reg <= icmp_ln27_reg_800_pp2_iter2_reg;
        icmp_ln27_reg_800_pp2_iter4_reg <= icmp_ln27_reg_800_pp2_iter3_reg;
        icmp_ln27_reg_800_pp2_iter5_reg <= icmp_ln27_reg_800_pp2_iter4_reg;
        icmp_ln27_reg_800_pp2_iter6_reg <= icmp_ln27_reg_800_pp2_iter5_reg;
        icmp_ln27_reg_800_pp2_iter7_reg <= icmp_ln27_reg_800_pp2_iter6_reg;
        icmp_ln27_reg_800_pp2_iter8_reg <= icmp_ln27_reg_800_pp2_iter7_reg;
        icmp_ln27_reg_800_pp2_iter9_reg <= icmp_ln27_reg_800_pp2_iter8_reg;
        sub_reg_812 <= grp_fu_215_p2;
        tmp_reg_818 <= grp_fu_231_p2;
        vec_local_addr_4_reg_805_pp2_iter10_reg <= vec_local_addr_4_reg_805_pp2_iter9_reg;
        vec_local_addr_4_reg_805_pp2_iter2_reg <= vec_local_addr_4_reg_805_pp2_iter1_reg;
        vec_local_addr_4_reg_805_pp2_iter3_reg <= vec_local_addr_4_reg_805_pp2_iter2_reg;
        vec_local_addr_4_reg_805_pp2_iter4_reg <= vec_local_addr_4_reg_805_pp2_iter3_reg;
        vec_local_addr_4_reg_805_pp2_iter5_reg <= vec_local_addr_4_reg_805_pp2_iter4_reg;
        vec_local_addr_4_reg_805_pp2_iter6_reg <= vec_local_addr_4_reg_805_pp2_iter5_reg;
        vec_local_addr_4_reg_805_pp2_iter7_reg <= vec_local_addr_4_reg_805_pp2_iter6_reg;
        vec_local_addr_4_reg_805_pp2_iter8_reg <= vec_local_addr_4_reg_805_pp2_iter7_reg;
        vec_local_addr_4_reg_805_pp2_iter9_reg <= vec_local_addr_4_reg_805_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln35_reg_844 <= icmp_ln35_fu_659_p2;
        zext_ln35_reg_834[9 : 0] <= zext_ln35_fu_650_p1[9 : 0];
        zext_ln35_reg_834_pp3_iter1_reg[9 : 0] <= zext_ln35_reg_834[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        max_val_4_reg_760 <= vec_local_q1;
        max_val_6_reg_768 <= vec_local_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        max_val_5_reg_780 <= max_val_5_fu_503_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        max_val_7_reg_788 <= max_val_7_fu_598_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter13 == 1'b1))) begin
        sum_reg_823 <= grp_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        zext_ln35_reg_834_pp3_iter10_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter9_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter11_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter10_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter2_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter1_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter3_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter2_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter4_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter3_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter5_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter4_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter6_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter5_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter7_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter6_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter8_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter7_reg[9 : 0];
        zext_ln35_reg_834_pp3_iter9_reg[9 : 0] <= zext_ln35_reg_834_pp3_iter8_reg[9 : 0];
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_fu_264_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln17_fu_408_p2 == 1'd0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln27_fu_610_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln35_fu_659_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter12 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln17_reg_776 == 1'd1))) begin
        ap_phi_mux_add_ln1723_phi_fu_166_p4 = add_ln17_reg_754;
    end else begin
        ap_phi_mux_add_ln1723_phi_fu_166_p4 = add_ln1723_reg_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_reg_695 == 1'd0))) begin
        ap_phi_mux_i1_phi_fu_155_p4 = i_reg_680;
    end else begin
        ap_phi_mux_i1_phi_fu_155_p4 = i1_reg_151;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln17_reg_776 == 1'd1))) begin
        ap_phi_mux_i_120_phi_fu_177_p4 = i_3_reg_739;
    end else begin
        ap_phi_mux_i_120_phi_fu_177_p4 = i_120_reg_173;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln27_reg_800 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_224_phi_fu_197_p4 = i_4_reg_795;
    end else begin
        ap_phi_mux_i_224_phi_fu_197_p4 = i_224_reg_193;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (icmp_ln35_reg_844 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_i_327_phi_fu_208_p4 = i_5_reg_829;
    end else begin
        ap_phi_mux_i_327_phi_fu_208_p4 = i_327_reg_204;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_224_p0 = max_val_6_reg_768;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_224_p0 = max_val_4_reg_760;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_224_p0 = vec_local_q0;
    end else begin
        grp_fu_224_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_224_p1 = max_val_5_reg_780;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_224_p1 = max_val_322_reg_184;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_224_p1 = vec_local_q1;
    end else begin
        grp_fu_224_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter12 == 1'b1))) begin
        grp_fu_638_in_valid = 1'b1;
    end else begin
        grp_fu_638_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter12 == 1'b1))) begin
        grp_fu_638_p1 = tmp_reg_818;
    end else begin
        grp_fu_638_p1 = 32'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter12 == 1'b1))) begin
        grp_fu_638_p2 = icmp_ln27_reg_800_pp2_iter11_reg;
    end else begin
        grp_fu_638_p2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter12 == 1'b1))) begin
        i_vec_address0_local = zext_ln35_reg_834_pp3_iter11_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_vec_address0_local = zext_ln10_fu_255_p1;
    end else begin
        i_vec_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        i_vec_ce0_local = 1'b1;
    end else begin
        i_vec_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter12 == 1'b1))) begin
        i_vec_we0_local = 1'b1;
    end else begin
        i_vec_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        vec_local_address0_local = zext_ln35_fu_650_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        vec_local_address0_local = vec_local_addr_4_reg_805_pp2_iter10_reg;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        vec_local_address0_local = zext_ln18_fu_393_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_local_address0_local = 64'd1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_local_address0_local = zext_ln10_reg_685;
    end else begin
        vec_local_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        vec_local_address1_local = zext_ln27_fu_616_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        vec_local_address1_local = zext_ln16_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        vec_local_address1_local = zext_ln21_fu_369_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_local_address1_local = 64'd0;
    end else begin
        vec_local_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vec_local_ce0_local = 1'b1;
    end else begin
        vec_local_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        vec_local_ce1_local = 1'b1;
    end else begin
        vec_local_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        vec_local_d0_local = grp_fu_231_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_local_d0_local = i_vec_q0;
    end else begin
        vec_local_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vec_local_we0_local = 1'b1;
    end else begin
        vec_local_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter12 == 1'b1) & (ap_enable_reg_pp3_iter11 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter12 == 1'b1) & (ap_enable_reg_pp3_iter11 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_402_p2 = (ap_phi_mux_i_120_phi_fu_177_p4 + 10'd3);

assign and_ln21_1_fu_592_p2 = (or_ln21_1_fu_574_p2 & and_ln21_fu_586_p2);

assign and_ln21_2_fu_491_p2 = (or_ln21_2_fu_460_p2 & grp_fu_224_p2);

assign and_ln21_3_fu_497_p2 = (or_ln21_3_fu_478_p2 & and_ln21_2_fu_491_p2);

assign and_ln21_4_fu_358_p2 = (or_ln21_5_fu_354_p2 & or_ln21_4_fu_350_p2);

assign and_ln21_5_fu_364_p2 = (tmp_3_reg_729 & and_ln21_4_fu_358_p2);

assign and_ln21_fu_586_p2 = (or_ln21_fu_556_p2 & grp_fu_224_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign bitcast_ln21_1_fu_527_p1 = max_val_5_reg_780;

assign bitcast_ln21_2_fu_413_p1 = max_val_4_reg_760;

assign bitcast_ln21_3_fu_430_p1 = max_val_322_reg_184;

assign bitcast_ln21_4_fu_286_p1 = vec_local_q0;

assign bitcast_ln21_5_fu_304_p1 = vec_local_q1;

assign bitcast_ln21_fu_510_p1 = max_val_6_reg_768;

assign i_3_fu_378_p2 = (ap_phi_mux_i_120_phi_fu_177_p4 + 10'd2);

assign i_4_fu_604_p2 = (ap_phi_mux_i_224_phi_fu_197_p4 + 10'd1);

assign i_5_fu_644_p2 = (ap_phi_mux_i_327_phi_fu_208_p4 + 10'd1);

assign i_fu_249_p2 = (ap_phi_mux_i1_phi_fu_155_p4 + 10'd1);

assign i_vec_address0 = i_vec_address0_local;

assign i_vec_ce0 = i_vec_ce0_local;

assign i_vec_d0 = grp_fu_219_p2;

assign i_vec_we0 = i_vec_we0_local;

assign icmp_ln10_fu_264_p2 = ((ap_phi_mux_i1_phi_fu_155_p4 == 10'd767) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_408_p2 = ((add_ln17_reg_754 < 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln21_10_fu_334_p2 = ((tmp_2_fu_308_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln21_11_fu_340_p2 = ((trunc_ln21_1_fu_318_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_550_p2 = ((trunc_ln21_4_fu_523_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_562_p2 = ((tmp_6_fu_530_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln21_3_fu_568_p2 = ((trunc_ln21_5_fu_540_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_4_fu_448_p2 = ((tmp_8_fu_416_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln21_5_fu_454_p2 = ((trunc_ln21_2_fu_426_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_6_fu_466_p2 = ((tmp_9_fu_434_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln21_7_fu_472_p2 = ((trunc_ln21_3_fu_444_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_8_fu_322_p2 = ((tmp_1_fu_290_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln21_9_fu_328_p2 = ((trunc_ln21_fu_300_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_544_p2 = ((tmp_5_fu_513_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_610_p2 = ((ap_phi_mux_i_224_phi_fu_197_p4 == 10'd767) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_659_p2 = ((ap_phi_mux_i_327_phi_fu_208_p4 == 10'd767) ? 1'b1 : 1'b0);

assign max_val_5_fu_503_p3 = ((and_ln21_3_fu_497_p2[0:0] == 1'b1) ? max_val_4_reg_760 : max_val_322_reg_184);

assign max_val_7_fu_598_p3 = ((and_ln21_1_fu_592_p2[0:0] == 1'b1) ? max_val_6_reg_768 : max_val_5_reg_780);

assign or_ln21_1_fu_574_p2 = (icmp_ln21_3_fu_568_p2 | icmp_ln21_2_fu_562_p2);

assign or_ln21_2_fu_460_p2 = (icmp_ln21_5_fu_454_p2 | icmp_ln21_4_fu_448_p2);

assign or_ln21_3_fu_478_p2 = (icmp_ln21_7_fu_472_p2 | icmp_ln21_6_fu_466_p2);

assign or_ln21_4_fu_350_p2 = (icmp_ln21_9_reg_714 | icmp_ln21_8_reg_709);

assign or_ln21_5_fu_354_p2 = (icmp_ln21_11_reg_724 | icmp_ln21_10_reg_719);

assign or_ln21_fu_556_p2 = (icmp_ln21_fu_544_p2 | icmp_ln21_1_fu_550_p2);

assign tmp_1_fu_290_p4 = {{bitcast_ln21_4_fu_286_p1[30:23]}};

assign tmp_2_fu_308_p4 = {{bitcast_ln21_5_fu_304_p1[30:23]}};

assign tmp_5_fu_513_p4 = {{bitcast_ln21_fu_510_p1[30:23]}};

assign tmp_6_fu_530_p4 = {{bitcast_ln21_1_fu_527_p1[30:23]}};

assign tmp_8_fu_416_p4 = {{bitcast_ln21_2_fu_413_p1[30:23]}};

assign tmp_9_fu_434_p4 = {{bitcast_ln21_3_fu_430_p1[30:23]}};

assign trunc_ln21_1_fu_318_p1 = bitcast_ln21_5_fu_304_p1[22:0];

assign trunc_ln21_2_fu_426_p1 = bitcast_ln21_2_fu_413_p1[22:0];

assign trunc_ln21_3_fu_444_p1 = bitcast_ln21_3_fu_430_p1[22:0];

assign trunc_ln21_4_fu_523_p1 = bitcast_ln21_fu_510_p1[22:0];

assign trunc_ln21_5_fu_540_p1 = bitcast_ln21_1_fu_527_p1[22:0];

assign trunc_ln21_fu_300_p1 = bitcast_ln21_4_fu_286_p1[22:0];

assign zext_ln10_fu_255_p1 = ap_phi_mux_i1_phi_fu_155_p4;

assign zext_ln16_fu_384_p1 = ap_phi_mux_add_ln1723_phi_fu_166_p4;

assign zext_ln18_fu_393_p1 = i_3_fu_378_p2;

assign zext_ln21_fu_369_p1 = and_ln21_5_fu_364_p2;

assign zext_ln27_fu_616_p1 = ap_phi_mux_i_224_phi_fu_197_p4;

assign zext_ln35_fu_650_p1 = ap_phi_mux_i_327_phi_fu_208_p4;

always @ (posedge ap_clk) begin
    zext_ln10_reg_685[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter1_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter2_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter3_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter4_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter5_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter6_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter7_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter8_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter9_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter10_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_834_pp3_iter11_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //kernel_mhsa_kernel_softmax
