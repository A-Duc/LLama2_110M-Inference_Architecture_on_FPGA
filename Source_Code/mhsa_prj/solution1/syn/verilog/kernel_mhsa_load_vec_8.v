// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_mhsa_load_vec_8 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        vec_0_address0,
        vec_0_ce0,
        vec_0_q0,
        vec_1_address0,
        vec_1_ce0,
        vec_1_q0,
        vec_2_address0,
        vec_2_ce0,
        vec_2_q0,
        vec_3_address0,
        vec_3_ce0,
        vec_3_q0,
        vec_4_address0,
        vec_4_ce0,
        vec_4_q0,
        vec_5_address0,
        vec_5_ce0,
        vec_5_q0,
        vec_6_address0,
        vec_6_ce0,
        vec_6_q0,
        vec_7_address0,
        vec_7_ce0,
        vec_7_q0,
        vec_8_address0,
        vec_8_ce0,
        vec_8_q0,
        vec_9_address0,
        vec_9_ce0,
        vec_9_q0,
        vec_10_address0,
        vec_10_ce0,
        vec_10_q0,
        vec_11_address0,
        vec_11_ce0,
        vec_11_q0,
        vec_12_address0,
        vec_12_ce0,
        vec_12_q0,
        vec_13_address0,
        vec_13_ce0,
        vec_13_q0,
        vec_14_address0,
        vec_14_ce0,
        vec_14_q0,
        vec_15_address0,
        vec_15_ce0,
        vec_15_q0,
        vec_stream_din,
        vec_stream_full_n,
        vec_stream_write,
        vec_stream_num_data_valid,
        vec_stream_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [5:0] vec_0_address0;
output   vec_0_ce0;
input  [31:0] vec_0_q0;
output  [5:0] vec_1_address0;
output   vec_1_ce0;
input  [31:0] vec_1_q0;
output  [5:0] vec_2_address0;
output   vec_2_ce0;
input  [31:0] vec_2_q0;
output  [5:0] vec_3_address0;
output   vec_3_ce0;
input  [31:0] vec_3_q0;
output  [5:0] vec_4_address0;
output   vec_4_ce0;
input  [31:0] vec_4_q0;
output  [5:0] vec_5_address0;
output   vec_5_ce0;
input  [31:0] vec_5_q0;
output  [5:0] vec_6_address0;
output   vec_6_ce0;
input  [31:0] vec_6_q0;
output  [5:0] vec_7_address0;
output   vec_7_ce0;
input  [31:0] vec_7_q0;
output  [5:0] vec_8_address0;
output   vec_8_ce0;
input  [31:0] vec_8_q0;
output  [5:0] vec_9_address0;
output   vec_9_ce0;
input  [31:0] vec_9_q0;
output  [5:0] vec_10_address0;
output   vec_10_ce0;
input  [31:0] vec_10_q0;
output  [5:0] vec_11_address0;
output   vec_11_ce0;
input  [31:0] vec_11_q0;
output  [5:0] vec_12_address0;
output   vec_12_ce0;
input  [31:0] vec_12_q0;
output  [5:0] vec_13_address0;
output   vec_13_ce0;
input  [31:0] vec_13_q0;
output  [5:0] vec_14_address0;
output   vec_14_ce0;
input  [31:0] vec_14_q0;
output  [5:0] vec_15_address0;
output   vec_15_ce0;
input  [31:0] vec_15_q0;
output  [31:0] vec_stream_din;
input   vec_stream_full_n;
output   vec_stream_write;
input  [7:0] vec_stream_num_data_valid;
input  [7:0] vec_stream_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    vec_stream_blk_n;
wire    ap_CS_fsm_state4;
wire   [3:0] trunc_ln15_fu_377_p1;
reg   [3:0] trunc_ln15_reg_607;
wire    ap_CS_fsm_state3;
wire   [3:0] trunc_ln15_1_fu_565_p1;
wire   [9:0] add_ln15_1_fu_573_p2;
reg   [9:0] add4_in_reg_343;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_371_p2;
wire   [0:0] icmp_ln15_fu_578_p2;
reg   [3:0] j_reg_352;
wire   [63:0] zext_ln15_fu_391_p1;
reg   [9:0] i_fu_124;
wire   [9:0] add_ln13_fu_584_p2;
reg    ap_block_state1;
wire   [31:0] bitcast_ln17_fu_550_p1;
reg    vec_stream_write_local;
reg    vec_0_ce0_local;
reg    vec_1_ce0_local;
reg    vec_2_ce0_local;
reg    vec_3_ce0_local;
reg    vec_4_ce0_local;
reg    vec_5_ce0_local;
reg    vec_6_ce0_local;
reg    vec_7_ce0_local;
reg    vec_8_ce0_local;
reg    vec_9_ce0_local;
reg    vec_10_ce0_local;
reg    vec_11_ce0_local;
reg    vec_12_ce0_local;
reg    vec_13_ce0_local;
reg    vec_14_ce0_local;
reg    vec_15_ce0_local;
wire   [5:0] lshr_ln_fu_381_p4;
wire   [31:0] tmp_fu_479_p33;
wire   [31:0] tmp_fu_479_p35;
wire   [4:0] zext_ln15_1_fu_475_p1;
wire   [4:0] add_ln15_fu_559_p2;
wire   [9:0] zext_ln15_2_fu_569_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [3:0] tmp_fu_479_p1;
wire   [3:0] tmp_fu_479_p3;
wire   [3:0] tmp_fu_479_p5;
wire   [3:0] tmp_fu_479_p7;
wire   [3:0] tmp_fu_479_p9;
wire   [3:0] tmp_fu_479_p11;
wire   [3:0] tmp_fu_479_p13;
wire   [3:0] tmp_fu_479_p15;
wire  signed [3:0] tmp_fu_479_p17;
wire  signed [3:0] tmp_fu_479_p19;
wire  signed [3:0] tmp_fu_479_p21;
wire  signed [3:0] tmp_fu_479_p23;
wire  signed [3:0] tmp_fu_479_p25;
wire  signed [3:0] tmp_fu_479_p27;
wire  signed [3:0] tmp_fu_479_p29;
wire  signed [3:0] tmp_fu_479_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 i_fu_124 = 10'd0;
end

(* dissolve_hierarchy = "yes" *) kernel_mhsa_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U1075(
    .din0(vec_0_q0),
    .din1(vec_1_q0),
    .din2(vec_2_q0),
    .din3(vec_3_q0),
    .din4(vec_4_q0),
    .din5(vec_5_q0),
    .din6(vec_6_q0),
    .din7(vec_7_q0),
    .din8(vec_8_q0),
    .din9(vec_9_q0),
    .din10(vec_10_q0),
    .din11(vec_11_q0),
    .din12(vec_12_q0),
    .din13(vec_13_q0),
    .din14(vec_14_q0),
    .din15(vec_15_q0),
    .def(tmp_fu_479_p33),
    .sel(trunc_ln15_reg_607),
    .dout(tmp_fu_479_p35)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln13_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_578_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (vec_stream_full_n == 1'b1))) begin
        add4_in_reg_343 <= add_ln15_1_fu_573_p2;
    end else if (((icmp_ln13_fu_371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        add4_in_reg_343 <= i_fu_124;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_124 <= 10'd0;
    end else if (((icmp_ln15_fu_578_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (vec_stream_full_n == 1'b1))) begin
        i_fu_124 <= add_ln13_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_578_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (vec_stream_full_n == 1'b1))) begin
        j_reg_352 <= trunc_ln15_1_fu_565_p1;
    end else if (((icmp_ln13_fu_371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_352 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln15_reg_607 <= trunc_ln15_fu_377_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((vec_stream_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_0_ce0_local = 1'b1;
    end else begin
        vec_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_10_ce0_local = 1'b1;
    end else begin
        vec_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_11_ce0_local = 1'b1;
    end else begin
        vec_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_12_ce0_local = 1'b1;
    end else begin
        vec_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_13_ce0_local = 1'b1;
    end else begin
        vec_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_14_ce0_local = 1'b1;
    end else begin
        vec_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_15_ce0_local = 1'b1;
    end else begin
        vec_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_1_ce0_local = 1'b1;
    end else begin
        vec_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_2_ce0_local = 1'b1;
    end else begin
        vec_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_3_ce0_local = 1'b1;
    end else begin
        vec_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_4_ce0_local = 1'b1;
    end else begin
        vec_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_5_ce0_local = 1'b1;
    end else begin
        vec_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_6_ce0_local = 1'b1;
    end else begin
        vec_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_7_ce0_local = 1'b1;
    end else begin
        vec_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_8_ce0_local = 1'b1;
    end else begin
        vec_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_9_ce0_local = 1'b1;
    end else begin
        vec_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_stream_blk_n = vec_stream_full_n;
    end else begin
        vec_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (vec_stream_full_n == 1'b1))) begin
        vec_stream_write_local = 1'b1;
    end else begin
        vec_stream_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln15_fu_578_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (vec_stream_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln15_fu_578_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (vec_stream_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_584_p2 = (i_fu_124 + 10'd16);

assign add_ln15_1_fu_573_p2 = (i_fu_124 + zext_ln15_2_fu_569_p1);

assign add_ln15_fu_559_p2 = (zext_ln15_1_fu_475_p1 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bitcast_ln17_fu_550_p1 = tmp_fu_479_p35;

assign icmp_ln13_fu_371_p2 = ((i_fu_124 < 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_578_p2 = ((add_ln15_fu_559_p2 == 5'd16) ? 1'b1 : 1'b0);

assign lshr_ln_fu_381_p4 = {{add4_in_reg_343[9:4]}};

assign start_out = real_start;

assign tmp_fu_479_p33 = 'bx;

assign trunc_ln15_1_fu_565_p1 = add_ln15_fu_559_p2[3:0];

assign trunc_ln15_fu_377_p1 = add4_in_reg_343[3:0];

assign vec_0_address0 = zext_ln15_fu_391_p1;

assign vec_0_ce0 = vec_0_ce0_local;

assign vec_10_address0 = zext_ln15_fu_391_p1;

assign vec_10_ce0 = vec_10_ce0_local;

assign vec_11_address0 = zext_ln15_fu_391_p1;

assign vec_11_ce0 = vec_11_ce0_local;

assign vec_12_address0 = zext_ln15_fu_391_p1;

assign vec_12_ce0 = vec_12_ce0_local;

assign vec_13_address0 = zext_ln15_fu_391_p1;

assign vec_13_ce0 = vec_13_ce0_local;

assign vec_14_address0 = zext_ln15_fu_391_p1;

assign vec_14_ce0 = vec_14_ce0_local;

assign vec_15_address0 = zext_ln15_fu_391_p1;

assign vec_15_ce0 = vec_15_ce0_local;

assign vec_1_address0 = zext_ln15_fu_391_p1;

assign vec_1_ce0 = vec_1_ce0_local;

assign vec_2_address0 = zext_ln15_fu_391_p1;

assign vec_2_ce0 = vec_2_ce0_local;

assign vec_3_address0 = zext_ln15_fu_391_p1;

assign vec_3_ce0 = vec_3_ce0_local;

assign vec_4_address0 = zext_ln15_fu_391_p1;

assign vec_4_ce0 = vec_4_ce0_local;

assign vec_5_address0 = zext_ln15_fu_391_p1;

assign vec_5_ce0 = vec_5_ce0_local;

assign vec_6_address0 = zext_ln15_fu_391_p1;

assign vec_6_ce0 = vec_6_ce0_local;

assign vec_7_address0 = zext_ln15_fu_391_p1;

assign vec_7_ce0 = vec_7_ce0_local;

assign vec_8_address0 = zext_ln15_fu_391_p1;

assign vec_8_ce0 = vec_8_ce0_local;

assign vec_9_address0 = zext_ln15_fu_391_p1;

assign vec_9_ce0 = vec_9_ce0_local;

assign vec_stream_din = bitcast_ln17_fu_550_p1;

assign vec_stream_write = vec_stream_write_local;

assign zext_ln15_1_fu_475_p1 = j_reg_352;

assign zext_ln15_2_fu_569_p1 = add_ln15_fu_559_p2;

assign zext_ln15_fu_391_p1 = lshr_ln_fu_381_p4;

endmodule //kernel_mhsa_load_vec_8
