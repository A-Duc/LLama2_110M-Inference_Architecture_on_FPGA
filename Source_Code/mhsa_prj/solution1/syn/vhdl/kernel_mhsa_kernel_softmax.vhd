-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_kernel_softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_vec_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    i_vec_ce0 : OUT STD_LOGIC;
    i_vec_we0 : OUT STD_LOGIC;
    i_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_kernel_softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_2FF : STD_LOGIC_VECTOR (9 downto 0) := "1011111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i1_reg_151 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1723_reg_162 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_120_reg_173 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val_322_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_224_reg_193 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_327_reg_204 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal i_fu_249_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_680 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln10_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln10_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln21_8_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_8_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln21_9_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_9_reg_714 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_10_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_10_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_11_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_11_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_3_fu_378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_739 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln17_fu_402_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln17_reg_754 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val_4_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal max_val_6_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln17_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_5_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_5_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_7_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_7_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal i_4_fu_604_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_795 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln27_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_800_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal vec_local_addr_4_reg_805 : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_addr_4_reg_805_pp2_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_638_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal i_5_fu_644_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_829 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal zext_ln35_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_834_pp3_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln35_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal vec_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_local_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i1_phi_fu_155_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_add_ln1723_phi_fu_166_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_120_phi_fu_177_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_224_phi_fu_197_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_327_phi_fu_208_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln21_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_vec_ce0_local : STD_LOGIC;
    signal i_vec_address0_local : STD_LOGIC_VECTOR (8 downto 0);
    signal i_vec_we0_local : STD_LOGIC;
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_local_we0_local : STD_LOGIC;
    signal vec_local_d0_local : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_local_ce0_local : STD_LOGIC;
    signal vec_local_address0_local : STD_LOGIC_VECTOR (9 downto 0);
    signal vec_local_ce1_local : STD_LOGIC;
    signal vec_local_address1_local : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal bitcast_ln21_4_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_5_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_290_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_fu_300_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_2_fu_308_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_1_fu_318_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln21_4_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_5_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_4_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_5_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln21_2_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_3_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_416_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_2_fu_426_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln21_5_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_4_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_434_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_3_fu_444_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln21_7_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_6_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_2_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_2_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_3_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_3_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln21_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_1_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_4_fu_523_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln21_1_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_530_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_5_fu_540_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln21_3_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_1_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_block_pp1_stage1_00001 : BOOLEAN;
    signal grp_fu_638_in_valid : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_638_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_fsub_32ns_32ns_32_1_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_fdiv_32ns_32ns_32_11_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_fcmp_32ns_32ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_mhsa_fexp_32ns_32ns_32_9_med_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_facc_32ns_32ns_1ns_32_2_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        DWIDTH : INTEGER;
        OUTPUT_DATA_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (31 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_kernel_softmax_vec_local_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    vec_local_U : component kernel_mhsa_kernel_softmax_vec_local_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec_local_address0_local,
        ce0 => vec_local_ce0_local,
        we0 => vec_local_we0_local,
        d0 => vec_local_d0_local,
        q0 => vec_local_q0,
        address1 => vec_local_address1_local,
        ce1 => vec_local_ce1_local,
        q1 => vec_local_q1);

    fsub_32ns_32ns_32_1_primitive_dsp_1_U1033 : component kernel_mhsa_fsub_32ns_32ns_32_1_primitive_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_215_p0,
        din1 => grp_fu_215_p1,
        dout => grp_fu_215_p2);

    fdiv_32ns_32ns_32_11_no_dsp_1_U1034 : component kernel_mhsa_fdiv_32ns_32ns_32_11_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_241,
        din1 => sum_reg_823,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    fcmp_32ns_32ns_1_1_no_dsp_1_U1035 : component kernel_mhsa_fcmp_32ns_32ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_224_p0,
        din1 => grp_fu_224_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_224_p2);

    fexp_32ns_32ns_32_9_med_dsp_1_U1036 : component kernel_mhsa_fexp_32ns_32ns_32_9_med_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => sub_reg_812,
        ce => ap_const_logic_1,
        dout => grp_fu_231_p2);

    facc_32ns_32ns_1ns_32_2_primitive_dsp_1_U1037 : component kernel_mhsa_facc_32ns_32ns_1ns_32_2_primitive_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        DWIDTH => 32,
        OUTPUT_DATA_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => grp_fu_638_p1,
        in_last => grp_fu_638_p2,
        in_valid => grp_fu_638_in_valid,
        out_data => grp_fu_638_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    add_ln1723_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln17_reg_776 = ap_const_lv1_1))) then 
                add_ln1723_reg_162 <= add_ln17_reg_754;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                add_ln1723_reg_162 <= ap_const_lv10_2;
            end if; 
        end if;
    end process;

    i1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_reg_695 = ap_const_lv1_0))) then 
                i1_reg_151 <= i_reg_680;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i1_reg_151 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_120_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln17_reg_776 = ap_const_lv1_1))) then 
                i_120_reg_173 <= i_3_reg_739;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_120_reg_173 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    i_224_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_224_reg_193 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln27_reg_800 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_224_reg_193 <= i_4_reg_795;
            end if; 
        end if;
    end process;

    i_327_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_327_reg_204 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln35_reg_844 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_327_reg_204 <= i_5_reg_829;
            end if; 
        end if;
    end process;

    max_val_322_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln17_reg_776 = ap_const_lv1_1))) then 
                max_val_322_reg_184 <= max_val_7_fu_598_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                max_val_322_reg_184 <= vec_local_q1;
            end if; 
        end if;
    end process;

    reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                reg_241 <= vec_local_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
                reg_241 <= vec_local_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                add_ln17_reg_754 <= add_ln17_fu_402_p2;
                i_3_reg_739 <= i_3_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                grp_fu_215_p0 <= vec_local_q1;
                grp_fu_215_p1 <= max_val_7_reg_788;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                i_4_reg_795 <= i_4_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                i_5_reg_829 <= i_5_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_reg_680 <= i_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_695 <= icmp_ln10_fu_264_p2;
                    zext_ln10_reg_685(9 downto 0) <= zext_ln10_fu_255_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                icmp_ln17_reg_776 <= icmp_ln17_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln21_10_reg_719 <= icmp_ln21_10_fu_334_p2;
                icmp_ln21_11_reg_724 <= icmp_ln21_11_fu_340_p2;
                icmp_ln21_8_reg_709 <= icmp_ln21_8_fu_322_p2;
                icmp_ln21_9_reg_714 <= icmp_ln21_9_fu_328_p2;
                tmp_3_reg_729 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln27_reg_800 <= icmp_ln27_fu_610_p2;
                icmp_ln27_reg_800_pp2_iter1_reg <= icmp_ln27_reg_800;
                vec_local_addr_4_reg_805 <= zext_ln27_fu_616_p1(10 - 1 downto 0);
                vec_local_addr_4_reg_805_pp2_iter1_reg <= vec_local_addr_4_reg_805;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln27_reg_800_pp2_iter10_reg <= icmp_ln27_reg_800_pp2_iter9_reg;
                icmp_ln27_reg_800_pp2_iter11_reg <= icmp_ln27_reg_800_pp2_iter10_reg;
                icmp_ln27_reg_800_pp2_iter2_reg <= icmp_ln27_reg_800_pp2_iter1_reg;
                icmp_ln27_reg_800_pp2_iter3_reg <= icmp_ln27_reg_800_pp2_iter2_reg;
                icmp_ln27_reg_800_pp2_iter4_reg <= icmp_ln27_reg_800_pp2_iter3_reg;
                icmp_ln27_reg_800_pp2_iter5_reg <= icmp_ln27_reg_800_pp2_iter4_reg;
                icmp_ln27_reg_800_pp2_iter6_reg <= icmp_ln27_reg_800_pp2_iter5_reg;
                icmp_ln27_reg_800_pp2_iter7_reg <= icmp_ln27_reg_800_pp2_iter6_reg;
                icmp_ln27_reg_800_pp2_iter8_reg <= icmp_ln27_reg_800_pp2_iter7_reg;
                icmp_ln27_reg_800_pp2_iter9_reg <= icmp_ln27_reg_800_pp2_iter8_reg;
                sub_reg_812 <= grp_fu_215_p2;
                tmp_reg_818 <= grp_fu_231_p2;
                vec_local_addr_4_reg_805_pp2_iter10_reg <= vec_local_addr_4_reg_805_pp2_iter9_reg;
                vec_local_addr_4_reg_805_pp2_iter2_reg <= vec_local_addr_4_reg_805_pp2_iter1_reg;
                vec_local_addr_4_reg_805_pp2_iter3_reg <= vec_local_addr_4_reg_805_pp2_iter2_reg;
                vec_local_addr_4_reg_805_pp2_iter4_reg <= vec_local_addr_4_reg_805_pp2_iter3_reg;
                vec_local_addr_4_reg_805_pp2_iter5_reg <= vec_local_addr_4_reg_805_pp2_iter4_reg;
                vec_local_addr_4_reg_805_pp2_iter6_reg <= vec_local_addr_4_reg_805_pp2_iter5_reg;
                vec_local_addr_4_reg_805_pp2_iter7_reg <= vec_local_addr_4_reg_805_pp2_iter6_reg;
                vec_local_addr_4_reg_805_pp2_iter8_reg <= vec_local_addr_4_reg_805_pp2_iter7_reg;
                vec_local_addr_4_reg_805_pp2_iter9_reg <= vec_local_addr_4_reg_805_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln35_reg_844 <= icmp_ln35_fu_659_p2;
                    zext_ln35_reg_834(9 downto 0) <= zext_ln35_fu_650_p1(9 downto 0);
                    zext_ln35_reg_834_pp3_iter1_reg(9 downto 0) <= zext_ln35_reg_834(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0_reg = ap_const_logic_1))) then
                max_val_4_reg_760 <= vec_local_q1;
                max_val_6_reg_768 <= vec_local_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                max_val_5_reg_780 <= max_val_5_fu_503_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                max_val_7_reg_788 <= max_val_7_fu_598_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1))) then
                sum_reg_823 <= grp_fu_638_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                    zext_ln35_reg_834_pp3_iter10_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter9_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter11_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter10_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter2_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter1_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter3_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter2_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter4_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter3_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter5_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter4_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter6_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter5_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter7_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter6_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter8_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter7_reg(9 downto 0);
                    zext_ln35_reg_834_pp3_iter9_reg(9 downto 0) <= zext_ln35_reg_834_pp3_iter8_reg(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln10_reg_685(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_834_pp3_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter13, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage1_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter12, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln17_fu_402_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_120_phi_fu_177_p4) + unsigned(ap_const_lv10_3));
    and_ln21_1_fu_592_p2 <= (or_ln21_1_fu_574_p2 and and_ln21_fu_586_p2);
    and_ln21_2_fu_491_p2 <= (or_ln21_2_fu_460_p2 and grp_fu_224_p2);
    and_ln21_3_fu_497_p2 <= (or_ln21_3_fu_478_p2 and and_ln21_2_fu_491_p2);
    and_ln21_4_fu_358_p2 <= (or_ln21_5_fu_354_p2 and or_ln21_4_fu_350_p2);
    and_ln21_5_fu_364_p2 <= (tmp_3_reg_729 and and_ln21_4_fu_358_p2);
    and_ln21_fu_586_p2 <= (or_ln21_fu_556_p2 and grp_fu_224_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state27 <= ap_CS_fsm(10);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state41 <= ap_CS_fsm(12);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln10_fu_264_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_fu_264_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage1, icmp_ln17_fu_408_p2, ap_block_pp1_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln17_fu_408_p2 = ap_const_lv1_0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln27_fu_610_p2, ap_block_pp2_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln27_fu_610_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(ap_CS_fsm_pp3_stage0, icmp_ln35_fu_659_p2, ap_block_pp3_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln35_fu_659_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add_ln1723_phi_fu_166_p4_assign_proc : process(add_ln1723_reg_162, ap_CS_fsm_pp1_stage0, add_ln17_reg_754, icmp_ln17_reg_776, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln17_reg_776 = ap_const_lv1_1))) then 
            ap_phi_mux_add_ln1723_phi_fu_166_p4 <= add_ln17_reg_754;
        else 
            ap_phi_mux_add_ln1723_phi_fu_166_p4 <= add_ln1723_reg_162;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_155_p4_assign_proc : process(i1_reg_151, i_reg_680, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_695, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_reg_695 = ap_const_lv1_0))) then 
            ap_phi_mux_i1_phi_fu_155_p4 <= i_reg_680;
        else 
            ap_phi_mux_i1_phi_fu_155_p4 <= i1_reg_151;
        end if; 
    end process;


    ap_phi_mux_i_120_phi_fu_177_p4_assign_proc : process(i_120_reg_173, i_3_reg_739, ap_CS_fsm_pp1_stage0, icmp_ln17_reg_776, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln17_reg_776 = ap_const_lv1_1))) then 
            ap_phi_mux_i_120_phi_fu_177_p4 <= i_3_reg_739;
        else 
            ap_phi_mux_i_120_phi_fu_177_p4 <= i_120_reg_173;
        end if; 
    end process;


    ap_phi_mux_i_224_phi_fu_197_p4_assign_proc : process(i_224_reg_193, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, i_4_reg_795, icmp_ln27_reg_800, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln27_reg_800 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_224_phi_fu_197_p4 <= i_4_reg_795;
        else 
            ap_phi_mux_i_224_phi_fu_197_p4 <= i_224_reg_193;
        end if; 
    end process;


    ap_phi_mux_i_327_phi_fu_208_p4_assign_proc : process(i_327_reg_204, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, i_5_reg_829, icmp_ln35_reg_844, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln35_reg_844 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_i_327_phi_fu_208_p4 <= i_5_reg_829;
        else 
            ap_phi_mux_i_327_phi_fu_208_p4 <= i_327_reg_204;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln21_1_fu_527_p1 <= max_val_5_reg_780;
    bitcast_ln21_2_fu_413_p1 <= max_val_4_reg_760;
    bitcast_ln21_3_fu_430_p1 <= max_val_322_reg_184;
    bitcast_ln21_4_fu_286_p1 <= vec_local_q0;
    bitcast_ln21_5_fu_304_p1 <= vec_local_q1;
    bitcast_ln21_fu_510_p1 <= max_val_6_reg_768;

    grp_fu_224_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp1_stage0, max_val_4_reg_760, ap_CS_fsm_pp1_stage1, max_val_6_reg_768, ap_enable_reg_pp1_iter1, vec_local_q0, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_224_p0 <= max_val_6_reg_768;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_224_p0 <= max_val_4_reg_760;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_224_p0 <= vec_local_q0;
        else 
            grp_fu_224_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_224_p1_assign_proc : process(max_val_322_reg_184, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, max_val_5_reg_780, ap_enable_reg_pp1_iter1, vec_local_q1, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_224_p1 <= max_val_5_reg_780;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_224_p1 <= max_val_322_reg_184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_224_p1 <= vec_local_q1;
        else 
            grp_fu_224_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_638_in_valid_assign_proc : process(ap_enable_reg_pp2_iter12, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1))) then 
            grp_fu_638_in_valid <= ap_const_logic_1;
        else 
            grp_fu_638_in_valid <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_638_p1_assign_proc : process(tmp_reg_818, ap_enable_reg_pp2_iter12, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1))) then 
            grp_fu_638_p1 <= tmp_reg_818;
        else 
            grp_fu_638_p1 <= ap_const_lv32_0;
        end if; 
    end process;


    grp_fu_638_p2_assign_proc : process(icmp_ln27_reg_800_pp2_iter11_reg, ap_enable_reg_pp2_iter12, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1))) then 
            grp_fu_638_p2 <= icmp_ln27_reg_800_pp2_iter11_reg;
        else 
            grp_fu_638_p2 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    i_3_fu_378_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_120_phi_fu_177_p4) + unsigned(ap_const_lv10_2));
    i_4_fu_604_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_224_phi_fu_197_p4) + unsigned(ap_const_lv10_1));
    i_5_fu_644_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_327_phi_fu_208_p4) + unsigned(ap_const_lv10_1));
    i_fu_249_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_phi_fu_155_p4) + unsigned(ap_const_lv10_1));
    i_vec_address0 <= i_vec_address0_local;

    i_vec_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln10_fu_255_p1, zext_ln35_reg_834_pp3_iter11_reg, ap_enable_reg_pp3_iter12, ap_block_pp0_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1))) then 
            i_vec_address0_local <= zext_ln35_reg_834_pp3_iter11_reg(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            i_vec_address0_local <= zext_ln10_fu_255_p1(9 - 1 downto 0);
        else 
            i_vec_address0_local <= "XXXXXXXXX";
        end if; 
    end process;

    i_vec_ce0 <= i_vec_ce0_local;

    i_vec_ce0_local_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_enable_reg_pp3_iter12)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            i_vec_ce0_local <= ap_const_logic_1;
        else 
            i_vec_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_d0 <= grp_fu_219_p2;
    i_vec_we0 <= i_vec_we0_local;

    i_vec_we0_local_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1))) then 
            i_vec_we0_local <= ap_const_logic_1;
        else 
            i_vec_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln10_fu_264_p2 <= "1" when (ap_phi_mux_i1_phi_fu_155_p4 = ap_const_lv10_2FF) else "0";
    icmp_ln17_fu_408_p2 <= "1" when (unsigned(add_ln17_reg_754) < unsigned(ap_const_lv10_300)) else "0";
    icmp_ln21_10_fu_334_p2 <= "0" when (tmp_2_fu_308_p4 = ap_const_lv8_FF) else "1";
    icmp_ln21_11_fu_340_p2 <= "1" when (trunc_ln21_1_fu_318_p1 = ap_const_lv23_0) else "0";
    icmp_ln21_1_fu_550_p2 <= "1" when (trunc_ln21_4_fu_523_p1 = ap_const_lv23_0) else "0";
    icmp_ln21_2_fu_562_p2 <= "0" when (tmp_6_fu_530_p4 = ap_const_lv8_FF) else "1";
    icmp_ln21_3_fu_568_p2 <= "1" when (trunc_ln21_5_fu_540_p1 = ap_const_lv23_0) else "0";
    icmp_ln21_4_fu_448_p2 <= "0" when (tmp_8_fu_416_p4 = ap_const_lv8_FF) else "1";
    icmp_ln21_5_fu_454_p2 <= "1" when (trunc_ln21_2_fu_426_p1 = ap_const_lv23_0) else "0";
    icmp_ln21_6_fu_466_p2 <= "0" when (tmp_9_fu_434_p4 = ap_const_lv8_FF) else "1";
    icmp_ln21_7_fu_472_p2 <= "1" when (trunc_ln21_3_fu_444_p1 = ap_const_lv23_0) else "0";
    icmp_ln21_8_fu_322_p2 <= "0" when (tmp_1_fu_290_p4 = ap_const_lv8_FF) else "1";
    icmp_ln21_9_fu_328_p2 <= "1" when (trunc_ln21_fu_300_p1 = ap_const_lv23_0) else "0";
    icmp_ln21_fu_544_p2 <= "0" when (tmp_5_fu_513_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_fu_610_p2 <= "1" when (ap_phi_mux_i_224_phi_fu_197_p4 = ap_const_lv10_2FF) else "0";
    icmp_ln35_fu_659_p2 <= "1" when (ap_phi_mux_i_327_phi_fu_208_p4 = ap_const_lv10_2FF) else "0";
    max_val_5_fu_503_p3 <= 
        max_val_4_reg_760 when (and_ln21_3_fu_497_p2(0) = '1') else 
        max_val_322_reg_184;
    max_val_7_fu_598_p3 <= 
        max_val_6_reg_768 when (and_ln21_1_fu_592_p2(0) = '1') else 
        max_val_5_reg_780;
    or_ln21_1_fu_574_p2 <= (icmp_ln21_3_fu_568_p2 or icmp_ln21_2_fu_562_p2);
    or_ln21_2_fu_460_p2 <= (icmp_ln21_5_fu_454_p2 or icmp_ln21_4_fu_448_p2);
    or_ln21_3_fu_478_p2 <= (icmp_ln21_7_fu_472_p2 or icmp_ln21_6_fu_466_p2);
    or_ln21_4_fu_350_p2 <= (icmp_ln21_9_reg_714 or icmp_ln21_8_reg_709);
    or_ln21_5_fu_354_p2 <= (icmp_ln21_11_reg_724 or icmp_ln21_10_reg_719);
    or_ln21_fu_556_p2 <= (icmp_ln21_fu_544_p2 or icmp_ln21_1_fu_550_p2);
    tmp_1_fu_290_p4 <= bitcast_ln21_4_fu_286_p1(30 downto 23);
    tmp_2_fu_308_p4 <= bitcast_ln21_5_fu_304_p1(30 downto 23);
    tmp_5_fu_513_p4 <= bitcast_ln21_fu_510_p1(30 downto 23);
    tmp_6_fu_530_p4 <= bitcast_ln21_1_fu_527_p1(30 downto 23);
    tmp_8_fu_416_p4 <= bitcast_ln21_2_fu_413_p1(30 downto 23);
    tmp_9_fu_434_p4 <= bitcast_ln21_3_fu_430_p1(30 downto 23);
    trunc_ln21_1_fu_318_p1 <= bitcast_ln21_5_fu_304_p1(23 - 1 downto 0);
    trunc_ln21_2_fu_426_p1 <= bitcast_ln21_2_fu_413_p1(23 - 1 downto 0);
    trunc_ln21_3_fu_444_p1 <= bitcast_ln21_3_fu_430_p1(23 - 1 downto 0);
    trunc_ln21_4_fu_523_p1 <= bitcast_ln21_fu_510_p1(23 - 1 downto 0);
    trunc_ln21_5_fu_540_p1 <= bitcast_ln21_1_fu_527_p1(23 - 1 downto 0);
    trunc_ln21_fu_300_p1 <= bitcast_ln21_4_fu_286_p1(23 - 1 downto 0);

    vec_local_address0_local_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp0_stage0, zext_ln10_reg_685, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, vec_local_addr_4_reg_805_pp2_iter10_reg, ap_enable_reg_pp3_iter0, zext_ln35_fu_650_p1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter11, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, zext_ln18_fu_393_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            vec_local_address0_local <= zext_ln35_fu_650_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1))) then 
            vec_local_address0_local <= vec_local_addr_4_reg_805_pp2_iter10_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            vec_local_address0_local <= zext_ln18_fu_393_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vec_local_address0_local <= ap_const_lv64_1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec_local_address0_local <= zext_ln10_reg_685(10 - 1 downto 0);
        else 
            vec_local_address0_local <= "XXXXXXXXXX";
        end if; 
    end process;


    vec_local_address1_local_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln21_fu_369_p1, zext_ln16_fu_384_p1, zext_ln27_fu_616_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            vec_local_address1_local <= zext_ln27_fu_616_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            vec_local_address1_local <= zext_ln16_fu_384_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vec_local_address1_local <= zext_ln21_fu_369_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vec_local_address1_local <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            vec_local_address1_local <= "XXXXXXXXXX";
        end if; 
    end process;


    vec_local_ce0_local_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            vec_local_ce0_local <= ap_const_logic_1;
        else 
            vec_local_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    vec_local_ce1_local_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            vec_local_ce1_local <= ap_const_logic_1;
        else 
            vec_local_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    vec_local_d0_local_assign_proc : process(i_vec_q0, ap_CS_fsm_pp0_stage0, grp_fu_231_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter11, ap_block_pp0_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1))) then 
            vec_local_d0_local <= grp_fu_231_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec_local_d0_local <= i_vec_q0;
        else 
            vec_local_d0_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vec_local_we0_local_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter11)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            vec_local_we0_local <= ap_const_logic_1;
        else 
            vec_local_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln10_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i1_phi_fu_155_p4),64));
    zext_ln16_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_add_ln1723_phi_fu_166_p4),64));
    zext_ln18_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_fu_378_p2),64));
    zext_ln21_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln21_5_fu_364_p2),64));
    zext_ln27_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_224_phi_fu_197_p4),64));
    zext_ln35_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_327_phi_fu_208_p4),64));
end behav;
