-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_kernel_softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_vec_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    i_vec_ce0 : OUT STD_LOGIC;
    i_vec_we0 : OUT STD_LOGIC;
    i_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vec_size : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_kernel_softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_142 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_153 : STD_LOGIC_VECTOR (30 downto 0);
    signal max_val_1_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_186 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_209 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal add_ln9_fu_256_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln9_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln9_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_reg_644 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln16_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln16_1_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_2_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal and_ln20_1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_1_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_4_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_1_fu_426_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln16_1_reg_695 : STD_LOGIC_VECTOR (30 downto 0);
    signal max_val_3_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal max_val_5_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_536_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln26_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_715_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal vec_local_addr_4_reg_719 : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_addr_4_reg_719_pp2_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal add_ln34_fu_586_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln34_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_747_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_751_pp3_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_predicate_tran8to9_state7 : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state24 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal vec_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_local_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_1_phi_fu_157_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal max_val_0_lcssa_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_phi_fu_201_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln15_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_7_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal i_vec_ce0_local : STD_LOGIC;
    signal i_vec_address0_local : STD_LOGIC_VECTOR (8 downto 0);
    signal i_vec_we0_local : STD_LOGIC;
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_local_we0_local : STD_LOGIC;
    signal vec_local_ce0_local : STD_LOGIC;
    signal vec_local_address0_local : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_ce1_local : STD_LOGIC;
    signal vec_local_address1_local : STD_LOGIC_VECTOR (8 downto 0);
    signal vec_local_we1_local : STD_LOGIC;
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln9_1_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_6_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_fu_310_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln15_8_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_1_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_338_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_fu_348_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln20_1_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_356_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_1_fu_366_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln20_3_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_2_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln20_2_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_3_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_442_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_2_fu_452_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln20_5_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_4_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_3_fu_470_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln20_7_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_6_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_3_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_2_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_2_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_3_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_1_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_1_fu_592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1_00001 : BOOLEAN;
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_fsub_32ns_32ns_32_1_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_fadd_32ns_32ns_32_1_primitive_dsp_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_fdiv_32ns_32ns_32_11_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_fcmp_32ns_32ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_mhsa_fexp_32ns_32ns_32_9_med_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_kernel_softmax_vec_local_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    vec_local_U : component kernel_mhsa_kernel_softmax_vec_local_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec_local_address0_local,
        ce0 => vec_local_ce0_local,
        we0 => vec_local_we0_local,
        d0 => i_vec_q0,
        q0 => vec_local_q0,
        address1 => vec_local_address1_local,
        ce1 => vec_local_ce1_local,
        we1 => vec_local_we1_local,
        d1 => grp_fu_242_p2,
        q1 => vec_local_q1);

    fsub_32ns_32ns_32_1_primitive_dsp_1_U792 : component kernel_mhsa_fsub_32ns_32ns_32_1_primitive_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        dout => grp_fu_220_p2);

    fadd_32ns_32ns_32_1_primitive_dsp_1_x_U793 : component kernel_mhsa_fadd_32ns_32ns_32_1_primitive_dsp_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_225_p0,
        din1 => grp_fu_225_p1,
        dout => grp_fu_225_p2);

    fdiv_32ns_32ns_32_11_no_dsp_1_U794 : component kernel_mhsa_fdiv_32ns_32ns_32_11_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_248,
        din1 => sum_reg_197,
        ce => ap_const_logic_1,
        dout => grp_fu_230_p2);

    fcmp_32ns_32ns_1_1_no_dsp_1_U795 : component kernel_mhsa_fcmp_32ns_32ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_236_p0,
        din1 => grp_fu_236_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_236_p2);

    fexp_32ns_32ns_32_9_med_dsp_1_U796 : component kernel_mhsa_fexp_32ns_32ns_32_9_med_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => sub_reg_726,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state24))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state24)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state24);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_153 <= ap_const_lv31_1;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln16_1_reg_668 = ap_const_lv1_1) and (icmp_ln16_reg_659 = ap_const_lv1_1))) then 
                i_1_reg_153 <= add_ln16_1_reg_695;
            end if; 
        end if;
    end process;

    i_2_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_2_reg_186 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln26_fu_546_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                i_2_reg_186 <= add_ln26_fu_536_p2;
            end if; 
        end if;
    end process;

    i_3_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_3_reg_209 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln34_fu_596_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_3_reg_209 <= add_ln34_fu_586_p2;
            end if; 
        end if;
    end process;

    i_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_142 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_142 <= add_ln9_fu_256_p2;
            end if; 
        end if;
    end process;

    max_val_0_lcssa_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln16_1_reg_668 = ap_const_lv1_0) and (icmp_ln16_reg_659 = ap_const_lv1_1))) then 
                max_val_0_lcssa_reg_175 <= max_val_3_fu_432_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0_reg = ap_const_logic_1) and (icmp_ln16_reg_659 = ap_const_lv1_0))) then 
                max_val_0_lcssa_reg_175 <= max_val_1_reg_165;
            end if; 
        end if;
    end process;

    max_val_1_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                max_val_1_reg_165 <= vec_local_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln16_1_reg_668 = ap_const_lv1_1) and (icmp_ln16_reg_659 = ap_const_lv1_1))) then 
                max_val_1_reg_165 <= max_val_5_fu_529_p3;
            end if; 
        end if;
    end process;

    reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                reg_248 <= vec_local_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
                reg_248 <= vec_local_q0;
            end if; 
        end if;
    end process;

    sum_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                sum_reg_197 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1) and (icmp_ln26_reg_715_pp2_iter11_reg = ap_const_lv1_1))) then 
                sum_reg_197 <= grp_fu_225_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0_reg = ap_const_logic_1))) then
                add_ln16_1_reg_695 <= add_ln16_1_fu_426_p2;
                max_val_2_reg_677 <= vec_local_q1;
                max_val_4_reg_687 <= vec_local_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                and_ln20_1_reg_682 <= and_ln20_1_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                grp_fu_220_p0 <= vec_local_q0;
                grp_fu_220_p1 <= max_val_0_lcssa_reg_175;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1))) then
                grp_fu_225_p0 <= ap_phi_mux_sum_phi_fu_201_p4;
                grp_fu_225_p1 <= grp_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln16_1_reg_668 <= icmp_ln16_1_fu_325_p2;
                icmp_ln16_reg_659 <= icmp_ln16_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln26_reg_715 <= icmp_ln26_fu_546_p2;
                icmp_ln26_reg_715_pp2_iter1_reg <= icmp_ln26_reg_715;
                vec_local_addr_4_reg_719 <= zext_ln26_fu_551_p1(9 - 1 downto 0);
                vec_local_addr_4_reg_719_pp2_iter1_reg <= vec_local_addr_4_reg_719;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln26_reg_715_pp2_iter10_reg <= icmp_ln26_reg_715_pp2_iter9_reg;
                icmp_ln26_reg_715_pp2_iter11_reg <= icmp_ln26_reg_715_pp2_iter10_reg;
                icmp_ln26_reg_715_pp2_iter2_reg <= icmp_ln26_reg_715_pp2_iter1_reg;
                icmp_ln26_reg_715_pp2_iter3_reg <= icmp_ln26_reg_715_pp2_iter2_reg;
                icmp_ln26_reg_715_pp2_iter4_reg <= icmp_ln26_reg_715_pp2_iter3_reg;
                icmp_ln26_reg_715_pp2_iter5_reg <= icmp_ln26_reg_715_pp2_iter4_reg;
                icmp_ln26_reg_715_pp2_iter6_reg <= icmp_ln26_reg_715_pp2_iter5_reg;
                icmp_ln26_reg_715_pp2_iter7_reg <= icmp_ln26_reg_715_pp2_iter6_reg;
                icmp_ln26_reg_715_pp2_iter8_reg <= icmp_ln26_reg_715_pp2_iter7_reg;
                icmp_ln26_reg_715_pp2_iter9_reg <= icmp_ln26_reg_715_pp2_iter8_reg;
                sub_reg_726 <= grp_fu_220_p2;
                vec_local_addr_4_reg_719_pp2_iter10_reg <= vec_local_addr_4_reg_719_pp2_iter9_reg;
                vec_local_addr_4_reg_719_pp2_iter2_reg <= vec_local_addr_4_reg_719_pp2_iter1_reg;
                vec_local_addr_4_reg_719_pp2_iter3_reg <= vec_local_addr_4_reg_719_pp2_iter2_reg;
                vec_local_addr_4_reg_719_pp2_iter4_reg <= vec_local_addr_4_reg_719_pp2_iter3_reg;
                vec_local_addr_4_reg_719_pp2_iter5_reg <= vec_local_addr_4_reg_719_pp2_iter4_reg;
                vec_local_addr_4_reg_719_pp2_iter6_reg <= vec_local_addr_4_reg_719_pp2_iter5_reg;
                vec_local_addr_4_reg_719_pp2_iter7_reg <= vec_local_addr_4_reg_719_pp2_iter6_reg;
                vec_local_addr_4_reg_719_pp2_iter8_reg <= vec_local_addr_4_reg_719_pp2_iter7_reg;
                vec_local_addr_4_reg_719_pp2_iter9_reg <= vec_local_addr_4_reg_719_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln34_reg_747 <= icmp_ln34_fu_596_p2;
                icmp_ln34_reg_747_pp3_iter1_reg <= icmp_ln34_reg_747;
                    zext_ln34_reg_751(30 downto 0) <= zext_ln34_fu_601_p1(30 downto 0);
                    zext_ln34_reg_751_pp3_iter1_reg(30 downto 0) <= zext_ln34_reg_751(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln34_reg_747_pp3_iter10_reg <= icmp_ln34_reg_747_pp3_iter9_reg;
                icmp_ln34_reg_747_pp3_iter11_reg <= icmp_ln34_reg_747_pp3_iter10_reg;
                icmp_ln34_reg_747_pp3_iter2_reg <= icmp_ln34_reg_747_pp3_iter1_reg;
                icmp_ln34_reg_747_pp3_iter3_reg <= icmp_ln34_reg_747_pp3_iter2_reg;
                icmp_ln34_reg_747_pp3_iter4_reg <= icmp_ln34_reg_747_pp3_iter3_reg;
                icmp_ln34_reg_747_pp3_iter5_reg <= icmp_ln34_reg_747_pp3_iter4_reg;
                icmp_ln34_reg_747_pp3_iter6_reg <= icmp_ln34_reg_747_pp3_iter5_reg;
                icmp_ln34_reg_747_pp3_iter7_reg <= icmp_ln34_reg_747_pp3_iter6_reg;
                icmp_ln34_reg_747_pp3_iter8_reg <= icmp_ln34_reg_747_pp3_iter7_reg;
                icmp_ln34_reg_747_pp3_iter9_reg <= icmp_ln34_reg_747_pp3_iter8_reg;
                    zext_ln34_reg_751_pp3_iter10_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter9_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter11_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter10_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter2_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter1_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter3_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter2_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter4_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter3_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter5_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter4_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter6_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter5_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter7_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter6_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter8_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter7_reg(30 downto 0);
                    zext_ln34_reg_751_pp3_iter9_reg(30 downto 0) <= zext_ln34_reg_751_pp3_iter8_reg(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln9_reg_640 <= icmp_ln9_fu_266_p2;
                    zext_ln9_reg_644(30 downto 0) <= zext_ln9_fu_271_p1(30 downto 0);
            end if;
        end if;
    end process;
    zext_ln9_reg_644(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter1_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter2_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter3_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter4_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter5_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter6_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter7_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter8_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter9_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter10_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln34_reg_751_pp3_iter11_reg(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln9_fu_266_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter0, icmp_ln26_fu_546_p2, ap_enable_reg_pp2_iter12, ap_enable_reg_pp3_iter0, icmp_ln34_fu_596_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage1_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter11, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln26_fu_546_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln26_fu_546_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln34_fu_596_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln34_fu_596_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln16_1_fu_426_p2 <= std_logic_vector(unsigned(i_1_reg_153) + unsigned(ap_const_lv31_2));
    add_ln16_fu_310_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_157_p4) + unsigned(ap_const_lv31_1));
    add_ln26_fu_536_p2 <= std_logic_vector(unsigned(i_2_reg_186) + unsigned(ap_const_lv31_1));
    add_ln34_fu_586_p2 <= std_logic_vector(unsigned(i_3_reg_209) + unsigned(ap_const_lv31_1));
    add_ln9_fu_256_p2 <= std_logic_vector(unsigned(i_reg_142) + unsigned(ap_const_lv31_1));
    and_ln20_1_fu_420_p2 <= (grp_fu_236_p2 and and_ln20_fu_414_p2);
    and_ln20_2_fu_517_p2 <= (or_ln20_3_fu_504_p2 and or_ln20_2_fu_486_p2);
    and_ln20_3_fu_523_p2 <= (grp_fu_236_p2 and and_ln20_2_fu_517_p2);
    and_ln20_fu_414_p2 <= (or_ln20_fu_382_p2 and or_ln20_1_fu_400_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state23 <= ap_CS_fsm(8);
    ap_CS_fsm_state37 <= ap_CS_fsm(10);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln9_fu_266_p2)
    begin
        if ((icmp_ln9_fu_266_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_subdone, ap_predicate_tran8to9_state7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_predicate_tran8to9_state7 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state10_assign_proc : process(icmp_ln26_fu_546_p2)
    begin
        if ((icmp_ln26_fu_546_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state24_assign_proc : process(icmp_ln34_fu_596_p2)
    begin
        if ((icmp_ln34_fu_596_p2 = ap_const_lv1_0)) then 
            ap_condition_pp3_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_157_p4_assign_proc : process(i_1_reg_153, icmp_ln16_reg_659, ap_CS_fsm_pp1_stage0, icmp_ln16_1_reg_668, add_ln16_1_reg_695, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln16_1_reg_668 = ap_const_lv1_1) and (icmp_ln16_reg_659 = ap_const_lv1_1))) then 
            ap_phi_mux_i_1_phi_fu_157_p4 <= add_ln16_1_reg_695;
        else 
            ap_phi_mux_i_1_phi_fu_157_p4 <= i_1_reg_153;
        end if; 
    end process;


    ap_phi_mux_sum_phi_fu_201_p4_assign_proc : process(sum_reg_197, icmp_ln26_reg_715_pp2_iter11_reg, grp_fu_225_p2, ap_enable_reg_pp2_iter12, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1) and (icmp_ln26_reg_715_pp2_iter11_reg = ap_const_lv1_1))) then 
            ap_phi_mux_sum_phi_fu_201_p4 <= grp_fu_225_p2;
        else 
            ap_phi_mux_sum_phi_fu_201_p4 <= sum_reg_197;
        end if; 
    end process;


    ap_predicate_tran8to9_state7_assign_proc : process(icmp_ln16_reg_659, icmp_ln16_1_reg_668)
    begin
                ap_predicate_tran8to9_state7 <= ((icmp_ln16_1_reg_668 = ap_const_lv1_0) or (icmp_ln16_reg_659 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln20_1_fu_352_p1 <= max_val_1_reg_165;
    bitcast_ln20_2_fu_439_p1 <= max_val_4_reg_687;
    bitcast_ln20_3_fu_456_p1 <= max_val_3_fu_432_p3;
    bitcast_ln20_fu_334_p1 <= vec_local_q1;

    grp_fu_236_p0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0_reg, max_val_4_reg_687, ap_enable_reg_pp1_iter1, vec_local_q1, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_236_p0 <= max_val_4_reg_687;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0_reg = ap_const_logic_1))) then 
            grp_fu_236_p0 <= vec_local_q1;
        else 
            grp_fu_236_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_236_p1_assign_proc : process(max_val_1_reg_165, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0_reg, max_val_3_fu_432_p3, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_236_p1 <= max_val_3_fu_432_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0_reg = ap_const_logic_1))) then 
            grp_fu_236_p1 <= max_val_1_reg_165;
        else 
            grp_fu_236_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_vec_address0 <= i_vec_address0_local;

    i_vec_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln9_fu_266_p2, zext_ln9_fu_271_p1, icmp_ln34_reg_747_pp3_iter11_reg, zext_ln34_reg_751_pp3_iter11_reg, ap_enable_reg_pp3_iter12, ap_block_pp0_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (icmp_ln34_reg_747_pp3_iter11_reg = ap_const_lv1_1))) then 
            i_vec_address0_local <= zext_ln34_reg_751_pp3_iter11_reg(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            i_vec_address0_local <= zext_ln9_fu_271_p1(9 - 1 downto 0);
        else 
            i_vec_address0_local <= "XXXXXXXXX";
        end if; 
    end process;

    i_vec_ce0 <= i_vec_ce0_local;

    i_vec_ce0_local_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, icmp_ln9_fu_266_p2, icmp_ln34_reg_747_pp3_iter11_reg, ap_enable_reg_pp3_iter12)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (icmp_ln34_reg_747_pp3_iter11_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            i_vec_ce0_local <= ap_const_logic_1;
        else 
            i_vec_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    i_vec_d0 <= grp_fu_230_p2;
    i_vec_we0 <= i_vec_we0_local;

    i_vec_we0_local_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln34_reg_747_pp3_iter11_reg, ap_enable_reg_pp3_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (icmp_ln34_reg_747_pp3_iter11_reg = ap_const_lv1_1))) then 
            i_vec_we0_local <= ap_const_logic_1;
        else 
            i_vec_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln16_1_fu_325_p2 <= "1" when (signed(zext_ln15_8_fu_321_p1) < signed(vec_size)) else "0";
    icmp_ln16_fu_296_p2 <= "1" when (signed(zext_ln15_6_fu_292_p1) < signed(vec_size)) else "0";
    icmp_ln20_1_fu_376_p2 <= "1" when (trunc_ln20_fu_348_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_2_fu_388_p2 <= "0" when (tmp_6_fu_356_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_3_fu_394_p2 <= "1" when (trunc_ln20_1_fu_366_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_4_fu_474_p2 <= "0" when (tmp_8_fu_442_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_5_fu_480_p2 <= "1" when (trunc_ln20_2_fu_452_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_6_fu_492_p2 <= "0" when (tmp_9_fu_460_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_7_fu_498_p2 <= "1" when (trunc_ln20_3_fu_470_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_fu_370_p2 <= "0" when (tmp_5_fu_338_p4 = ap_const_lv8_FF) else "1";
    icmp_ln26_fu_546_p2 <= "1" when (signed(zext_ln26_1_fu_542_p1) < signed(vec_size)) else "0";
    icmp_ln34_fu_596_p2 <= "1" when (signed(zext_ln34_1_fu_592_p1) < signed(vec_size)) else "0";
    icmp_ln9_fu_266_p2 <= "1" when (signed(zext_ln9_1_fu_262_p1) < signed(vec_size)) else "0";
    max_val_3_fu_432_p3 <= 
        max_val_2_reg_677 when (and_ln20_1_reg_682(0) = '1') else 
        max_val_1_reg_165;
    max_val_5_fu_529_p3 <= 
        max_val_4_reg_687 when (and_ln20_3_fu_523_p2(0) = '1') else 
        max_val_3_fu_432_p3;
    or_ln20_1_fu_400_p2 <= (icmp_ln20_3_fu_394_p2 or icmp_ln20_2_fu_388_p2);
    or_ln20_2_fu_486_p2 <= (icmp_ln20_5_fu_480_p2 or icmp_ln20_4_fu_474_p2);
    or_ln20_3_fu_504_p2 <= (icmp_ln20_7_fu_498_p2 or icmp_ln20_6_fu_492_p2);
    or_ln20_fu_382_p2 <= (icmp_ln20_fu_370_p2 or icmp_ln20_1_fu_376_p2);
    tmp_5_fu_338_p4 <= bitcast_ln20_fu_334_p1(30 downto 23);
    tmp_6_fu_356_p4 <= bitcast_ln20_1_fu_352_p1(30 downto 23);
    tmp_8_fu_442_p4 <= bitcast_ln20_2_fu_439_p1(30 downto 23);
    tmp_9_fu_460_p4 <= bitcast_ln20_3_fu_456_p1(30 downto 23);
    trunc_ln20_1_fu_366_p1 <= bitcast_ln20_1_fu_352_p1(23 - 1 downto 0);
    trunc_ln20_2_fu_452_p1 <= bitcast_ln20_2_fu_439_p1(23 - 1 downto 0);
    trunc_ln20_3_fu_470_p1 <= bitcast_ln20_3_fu_456_p1(23 - 1 downto 0);
    trunc_ln20_fu_348_p1 <= bitcast_ln20_fu_334_p1(23 - 1 downto 0);

    vec_local_address0_local_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_640, zext_ln9_reg_644, ap_CS_fsm_state4, icmp_ln16_fu_296_p2, ap_CS_fsm_pp1_stage0, icmp_ln16_1_fu_325_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, icmp_ln26_fu_546_p2, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp0_stage0, zext_ln15_7_fu_316_p1, zext_ln26_fu_551_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln26_fu_546_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            vec_local_address0_local <= zext_ln26_fu_551_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln16_1_fu_325_p2 = ap_const_lv1_1) and (icmp_ln16_fu_296_p2 = ap_const_lv1_1))) then 
            vec_local_address0_local <= zext_ln15_7_fu_316_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vec_local_address0_local <= ap_const_lv64_0(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_640 = ap_const_lv1_1))) then 
            vec_local_address0_local <= zext_ln9_reg_644(9 - 1 downto 0);
        else 
            vec_local_address0_local <= "XXXXXXXXX";
        end if; 
    end process;


    vec_local_address1_local_assign_proc : process(ap_CS_fsm_pp3_stage0, icmp_ln16_fu_296_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln26_reg_715_pp2_iter10_reg, vec_local_addr_4_reg_719_pp2_iter10_reg, ap_enable_reg_pp3_iter0, icmp_ln34_fu_596_p2, zext_ln34_fu_601_p1, ap_enable_reg_pp2_iter11, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln15_fu_301_p1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln34_fu_596_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            vec_local_address1_local <= zext_ln34_fu_601_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (icmp_ln26_reg_715_pp2_iter10_reg = ap_const_lv1_1))) then 
            vec_local_address1_local <= vec_local_addr_4_reg_719_pp2_iter10_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln16_fu_296_p2 = ap_const_lv1_1))) then 
            vec_local_address1_local <= zext_ln15_fu_301_p1(9 - 1 downto 0);
        else 
            vec_local_address1_local <= "XXXXXXXXX";
        end if; 
    end process;


    vec_local_ce0_local_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln9_reg_640, ap_CS_fsm_state4, icmp_ln16_fu_296_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln16_1_fu_325_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, icmp_ln26_fu_546_p2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln26_fu_546_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln16_1_fu_325_p2 = ap_const_lv1_1) and (icmp_ln16_fu_296_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_640 = ap_const_lv1_1)))) then 
            vec_local_ce0_local <= ap_const_logic_1;
        else 
            vec_local_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    vec_local_ce1_local_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, icmp_ln16_fu_296_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, icmp_ln26_reg_715_pp2_iter10_reg, ap_enable_reg_pp3_iter0, icmp_ln34_fu_596_p2, ap_enable_reg_pp2_iter11)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (icmp_ln26_reg_715_pp2_iter10_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln34_fu_596_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln16_fu_296_p2 = ap_const_lv1_1)))) then 
            vec_local_ce1_local <= ap_const_logic_1;
        else 
            vec_local_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    vec_local_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln9_reg_640, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_640 = ap_const_lv1_1))) then 
            vec_local_we0_local <= ap_const_logic_1;
        else 
            vec_local_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    vec_local_we1_local_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln26_reg_715_pp2_iter10_reg, ap_enable_reg_pp2_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (icmp_ln26_reg_715_pp2_iter10_reg = ap_const_lv1_1))) then 
            vec_local_we1_local <= ap_const_logic_1;
        else 
            vec_local_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln15_6_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_157_p4),32));
    zext_ln15_7_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_fu_310_p2),64));
    zext_ln15_8_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_fu_310_p2),32));
    zext_ln15_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_157_p4),64));
    zext_ln26_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_186),32));
    zext_ln26_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_186),64));
    zext_ln34_1_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_209),32));
    zext_ln34_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_209),64));
    zext_ln9_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_142),32));
    zext_ln9_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_142),64));
end behav;
