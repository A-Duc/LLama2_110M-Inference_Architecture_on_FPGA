-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_load_mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_WREADY : IN STD_LOGIC;
    m_axi_gmem1_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RVALID : IN STD_LOGIC;
    m_axi_gmem1_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_RLAST : IN STD_LOGIC;
    m_axi_gmem1_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_gmem1_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_BVALID : IN STD_LOGIC;
    m_axi_gmem1_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    i_mat : IN STD_LOGIC_VECTOR (63 downto 0);
    matrix_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    matrix_stream_full_n : IN STD_LOGIC;
    matrix_stream_write : OUT STD_LOGIC;
    matrix_stream_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    matrix_stream_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of kernel_mhsa_load_mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_90000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000010010000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem1_blk_n_AR : STD_LOGIC;
    signal trunc_ln_fu_68_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln_reg_97 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_idle : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_ready : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWVALID : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WVALID : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WLAST : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARVALID : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_RREADY : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_BREADY : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_matrix_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_matrix_stream_write : STD_LOGIC;
    signal grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln23_fu_78_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_WREADY : IN STD_LOGIC;
        m_axi_gmem1_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RVALID : IN STD_LOGIC;
        m_axi_gmem1_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_RLAST : IN STD_LOGIC;
        m_axi_gmem1_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_gmem1_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_BVALID : IN STD_LOGIC;
        m_axi_gmem1_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        matrix_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        matrix_stream_full_n : IN STD_LOGIC;
        matrix_stream_write : OUT STD_LOGIC;
        matrix_stream_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        matrix_stream_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        sext_ln23 : IN STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59 : component kernel_mhsa_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start,
        ap_done => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done,
        ap_idle => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_idle,
        ap_ready => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_ready,
        m_axi_gmem1_0_AWVALID => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY => ap_const_logic_0,
        m_axi_gmem1_0_AWADDR => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY => ap_const_logic_0,
        m_axi_gmem1_0_WDATA => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY => m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID => m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA => m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST => m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID => m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM => m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER => m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP => m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID => ap_const_logic_0,
        m_axi_gmem1_0_BREADY => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP => ap_const_lv2_0,
        m_axi_gmem1_0_BID => ap_const_lv1_0,
        m_axi_gmem1_0_BUSER => ap_const_lv1_0,
        matrix_stream_din => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_matrix_stream_din,
        matrix_stream_full_n => matrix_stream_full_n,
        matrix_stream_write => grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_matrix_stream_write,
        matrix_stream_num_data_valid => ap_const_lv7_0,
        matrix_stream_fifo_cap => ap_const_lv7_0,
        sext_ln23 => trunc_ln_reg_97);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln_reg_97 <= i_mat(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem1_0_ARREADY, ap_block_state1, grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_gmem1_0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done)
    begin
        if ((grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(m_axi_gmem1_0_ARREADY, ap_block_state1)
    begin
        if (((m_axi_gmem1_0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem1_0_ARREADY)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem1_blk_n_AR <= m_axi_gmem1_0_ARREADY;
        else 
            gmem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_ap_start_reg;

    m_axi_gmem1_0_ARADDR_assign_proc : process(ap_CS_fsm_state1, m_axi_gmem1_0_ARREADY, ap_block_state1, grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARADDR, ap_CS_fsm_state12, ap_CS_fsm_state13, sext_ln23_fu_78_p1)
    begin
        if ((not(((m_axi_gmem1_0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem1_0_ARADDR <= sext_ln23_fu_78_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARADDR <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARADDR;
        else 
            m_axi_gmem1_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem1_0_ARBURST_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARBURST, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARBURST <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARBURST;
        else 
            m_axi_gmem1_0_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARCACHE_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARCACHE, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARCACHE <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARCACHE;
        else 
            m_axi_gmem1_0_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARID_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARID, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARID <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARID;
        else 
            m_axi_gmem1_0_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARLEN_assign_proc : process(ap_CS_fsm_state1, m_axi_gmem1_0_ARREADY, ap_block_state1, grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARLEN, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((not(((m_axi_gmem1_0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem1_0_ARLEN <= ap_const_lv64_90000(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARLEN <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARLEN;
        else 
            m_axi_gmem1_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem1_0_ARLOCK_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARLOCK, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARLOCK <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARLOCK;
        else 
            m_axi_gmem1_0_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARPROT_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARPROT, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARPROT <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARPROT;
        else 
            m_axi_gmem1_0_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARQOS_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARQOS, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARQOS <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARQOS;
        else 
            m_axi_gmem1_0_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARREGION_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARREGION, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARREGION <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARREGION;
        else 
            m_axi_gmem1_0_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARSIZE_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARSIZE, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARSIZE <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARSIZE;
        else 
            m_axi_gmem1_0_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARUSER_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARUSER, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARUSER <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARUSER;
        else 
            m_axi_gmem1_0_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem1_0_ARVALID_assign_proc : process(ap_CS_fsm_state1, m_axi_gmem1_0_ARREADY, ap_block_state1, grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARVALID, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((not(((m_axi_gmem1_0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem1_0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_ARVALID <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_ARVALID;
        else 
            m_axi_gmem1_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_0_AWID <= ap_const_lv1_0;
    m_axi_gmem1_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_0_BREADY <= ap_const_logic_0;

    m_axi_gmem1_0_RREADY_assign_proc : process(grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_RREADY, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem1_0_RREADY <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_m_axi_gmem1_0_RREADY;
        else 
            m_axi_gmem1_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_0_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_0_WID <= ap_const_lv1_0;
    m_axi_gmem1_0_WLAST <= ap_const_logic_0;
    m_axi_gmem1_0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_WVALID <= ap_const_logic_0;
    matrix_stream_din <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_matrix_stream_din;
    matrix_stream_write <= grp_load_mat_Pipeline_mem_rd_VITIS_LOOP_25_1_fu_59_matrix_stream_write;
        sext_ln23_fu_78_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_68_p4),64));

    trunc_ln_fu_68_p4 <= i_mat(63 downto 2);
end behav;
