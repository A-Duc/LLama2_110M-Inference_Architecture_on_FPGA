-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_compute_matmul_Pipeline_execute_dot_product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matrix_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_stream_empty_n : IN STD_LOGIC;
    matrix_stream_read : OUT STD_LOGIC;
    matrix_stream_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    matrix_stream_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    result_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_stream_full_n : IN STD_LOGIC;
    result_stream_write : OUT STD_LOGIC;
    result_stream_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    result_stream_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0 : OUT STD_LOGIC;
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0 : OUT STD_LOGIC;
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0 : OUT STD_LOGIC;
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0 : OUT STD_LOGIC;
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_compute_matmul_Pipeline_execute_dot_product is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv20_90000 : STD_LOGIC_VECTOR (19 downto 0) := "10010000000000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln53_1_reg_385 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_385_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln50_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal result_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal matrix_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln53_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_355_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln53_fu_205_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln53_reg_360 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln53_1_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_385_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_265_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_stream_read_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal zext_ln52_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sum_local_01_fu_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_151_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sum_local_01_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_78 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln53_fu_243_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_fu_82 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal add_ln50_fu_176_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (19 downto 0);
    signal matrix_stream_read_local : STD_LOGIC;
    signal bitcast_ln58_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal result_stream_write_local : STD_LOGIC;
    signal compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local : STD_LOGIC;
    signal compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local : STD_LOGIC;
    signal compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local : STD_LOGIC;
    signal compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local : STD_LOGIC;
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_fu_197_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_fu_209_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_265_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_265_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_265_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_265_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_265_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_sparsemux_9_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1_U261 : component kernel_mhsa_fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => tmp_reg_389,
        din2 => grp_fu_151_p2,
        din3 => grp_fu_151_p3,
        ce => grp_fu_151_ce,
        dout => grp_fu_151_p4);

    sparsemux_9_2_32_1_1_U262 : component kernel_mhsa_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_q0,
        din1 => compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_q0,
        din2 => compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_q0,
        din3 => compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_q0,
        def => tmp_fu_265_p9,
        sel => trunc_ln53_reg_360,
        dout => tmp_fu_265_p11);

    flow_control_loop_pipe_sequential_init_U : component kernel_mhsa_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln50_fu_182_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_82 <= add_ln50_fu_176_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_82 <= ap_const_lv20_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln50_fu_182_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_78 <= add_ln53_fu_243_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_78 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    sum_local_01_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    sum_local_01_fu_74 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    sum_local_01_fu_74 <= grp_fu_151_p4;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln53_1_reg_385 <= icmp_ln53_1_fu_249_p2;
                icmp_ln53_1_reg_385_pp0_iter1_reg <= icmp_ln53_1_reg_385;
                icmp_ln53_reg_355 <= icmp_ln53_fu_191_p2;
                icmp_ln53_reg_355_pp0_iter1_reg <= icmp_ln53_reg_355;
                tmp_reg_389 <= tmp_fu_265_p11;
                trunc_ln53_reg_360 <= trunc_ln53_fu_205_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln53_1_reg_385_pp0_iter2_reg <= icmp_ln53_1_reg_385_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                matrix_stream_read_reg_395 <= matrix_stream_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_fu_176_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv20_1));
    add_ln53_fu_243_p2 <= std_logic_vector(unsigned(select_ln50_fu_197_p3) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, matrix_stream_empty_n, ap_block_state4_pp0_stage0_iter3_grp1)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3_grp1)) or ((matrix_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, matrix_stream_empty_n, ap_block_state4_pp0_stage0_iter3_grp1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3_grp1)) or ((matrix_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, matrix_stream_empty_n, ap_block_state4_pp0_stage0_iter3_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3_grp1)) or ((matrix_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, matrix_stream_empty_n, ap_block_state4_pp0_stage0_iter3_grp1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3_grp1)) or ((matrix_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_grp1_assign_proc : process(result_stream_full_n, icmp_ln53_1_reg_385_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3_grp1 <= ((icmp_ln53_1_reg_385_pp0_iter2_reg = ap_const_lv1_1) and (result_stream_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln50_fu_182_p2)
    begin
        if (((icmp_ln50_fu_182_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv20_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_sum_local_01_load_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_grp1, sum_local_01_fu_74, grp_fu_151_p4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_sum_local_01_load <= grp_fu_151_p4;
        else 
            ap_sig_allocacmp_sum_local_01_load <= sum_local_01_fu_74;
        end if; 
    end process;

    bitcast_ln58_fu_316_p1 <= grp_fu_151_p4;
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_address0 <= zext_ln52_fu_219_p1(8 - 1 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0 <= compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local;

    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln50_fu_182_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local <= ap_const_logic_1;
        else 
            compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_address0 <= zext_ln52_fu_219_p1(8 - 1 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0 <= compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local;

    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln50_fu_182_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local <= ap_const_logic_1;
        else 
            compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_address0 <= zext_ln52_fu_219_p1(8 - 1 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0 <= compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local;

    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln50_fu_182_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local <= ap_const_logic_1;
        else 
            compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_address0 <= zext_ln52_fu_219_p1(8 - 1 downto 0);
    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0 <= compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local;

    compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln50_fu_182_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local <= ap_const_logic_1;
        else 
            compute_matmul_stream_float_0_stream_float_0_stream_float_0_vec_local_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_151_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_151_ce <= ap_const_logic_1;
        else 
            grp_fu_151_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_151_p2 <= matrix_stream_read_reg_395;
    grp_fu_151_p3 <= 
        ap_const_lv32_0 when (icmp_ln53_reg_355_pp0_iter1_reg(0) = '1') else 
        ap_sig_allocacmp_sum_local_01_load;
    icmp_ln50_fu_182_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv20_90000) else "0";
    icmp_ln53_1_fu_249_p2 <= "1" when (add_ln53_fu_243_p2 = ap_const_lv10_300) else "0";
    icmp_ln53_fu_191_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv10_300) else "0";
    lshr_ln_fu_209_p4 <= select_ln50_fu_197_p3(9 downto 2);

    matrix_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, matrix_stream_empty_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            matrix_stream_blk_n <= matrix_stream_empty_n;
        else 
            matrix_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    matrix_stream_read <= matrix_stream_read_local;

    matrix_stream_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            matrix_stream_read_local <= ap_const_logic_1;
        else 
            matrix_stream_read_local <= ap_const_logic_0;
        end if; 
    end process;


    result_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, result_stream_full_n, icmp_ln53_1_reg_385_pp0_iter2_reg, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (icmp_ln53_1_reg_385_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            result_stream_blk_n <= result_stream_full_n;
        else 
            result_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    result_stream_din <= bitcast_ln58_fu_316_p1;
    result_stream_write <= result_stream_write_local;

    result_stream_write_local_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln53_1_reg_385_pp0_iter2_reg, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln53_1_reg_385_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            result_stream_write_local <= ap_const_logic_1;
        else 
            result_stream_write_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln50_fu_197_p3 <= 
        ap_const_lv10_0 when (icmp_ln53_fu_191_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_fu_265_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln53_fu_205_p1 <= select_ln50_fu_197_p3(2 - 1 downto 0);
    zext_ln52_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_209_p4),64));
end behav;
