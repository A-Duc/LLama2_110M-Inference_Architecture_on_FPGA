-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_kernel_mhsa_Pipeline_ACCUM_WRITEBACK is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xb_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb_7_ce0 : OUT STD_LOGIC;
    xb_7_we0 : OUT STD_LOGIC;
    xb_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xb_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb_6_ce0 : OUT STD_LOGIC;
    xb_6_we0 : OUT STD_LOGIC;
    xb_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xb_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb_5_ce0 : OUT STD_LOGIC;
    xb_5_we0 : OUT STD_LOGIC;
    xb_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xb_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb_4_ce0 : OUT STD_LOGIC;
    xb_4_we0 : OUT STD_LOGIC;
    xb_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xb_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb_3_ce0 : OUT STD_LOGIC;
    xb_3_we0 : OUT STD_LOGIC;
    xb_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xb_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb_2_ce0 : OUT STD_LOGIC;
    xb_2_we0 : OUT STD_LOGIC;
    xb_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xb_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb_1_ce0 : OUT STD_LOGIC;
    xb_1_we0 : OUT STD_LOGIC;
    xb_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xb_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb_ce0 : OUT STD_LOGIC;
    xb_we0 : OUT STD_LOGIC;
    xb_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_accum_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_8_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_12_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_16_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_20_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_24_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_28_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_32_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_36_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_40_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_44_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_48_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_52_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_56_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_60_load : IN STD_LOGIC_VECTOR (31 downto 0);
    p_udiv1 : IN STD_LOGIC_VECTOR (6 downto 0);
    local_accum_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_9_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_13_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_17_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_21_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_25_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_29_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_33_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_37_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_41_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_45_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_49_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_53_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_57_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_61_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_14_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_18_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_22_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_26_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_30_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_34_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_38_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_42_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_46_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_50_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_54_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_58_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_62_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_11_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_15_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_19_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_23_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_27_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_31_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_35_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_39_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_43_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_47_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_51_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_55_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_59_load : IN STD_LOGIC_VECTOR (31 downto 0);
    local_accum_63_load : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_kernel_mhsa_Pipeline_ACCUM_WRITEBACK is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_fu_736_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln188_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_218 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln185_fu_1122_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_8 : STD_LOGIC_VECTOR (6 downto 0);
    signal xb_4_we0_local : STD_LOGIC;
    signal icmp_ln188_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_752_p35 : STD_LOGIC_VECTOR (31 downto 0);
    signal xb_4_ce0_local : STD_LOGIC;
    signal xb_5_we0_local : STD_LOGIC;
    signal tmp_1_fu_859_p35 : STD_LOGIC_VECTOR (31 downto 0);
    signal xb_5_ce0_local : STD_LOGIC;
    signal xb_6_we0_local : STD_LOGIC;
    signal tmp_s_fu_934_p35 : STD_LOGIC_VECTOR (31 downto 0);
    signal xb_6_ce0_local : STD_LOGIC;
    signal xb_7_we0_local : STD_LOGIC;
    signal tmp_2_fu_1009_p35 : STD_LOGIC_VECTOR (31 downto 0);
    signal xb_7_ce0_local : STD_LOGIC;
    signal xb_we0_local : STD_LOGIC;
    signal xb_ce0_local : STD_LOGIC;
    signal xb_1_we0_local : STD_LOGIC;
    signal xb_1_ce0_local : STD_LOGIC;
    signal xb_2_we0_local : STD_LOGIC;
    signal xb_2_ce0_local : STD_LOGIC;
    signal xb_3_we0_local : STD_LOGIC;
    signal xb_3_ce0_local : STD_LOGIC;
    signal tmp_9_fu_752_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln185_1_fu_748_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln8_fu_827_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln188_1_fu_837_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln188_fu_841_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_859_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_934_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1009_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln185_fu_744_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_9_fu_752_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p17 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p19 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p21 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p23 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p25 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p27 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p29 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_752_p31 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p17 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p19 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p21 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p23 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p25 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p27 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p29 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_859_p31 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p17 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p19 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p21 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p23 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p25 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p27 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p29 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_934_p31 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p17 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p19 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p21 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p23 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p25 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p27 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p29 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1009_p31 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_sparsemux_33_6_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (5 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (5 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (5 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (5 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (5 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (5 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (5 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (5 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (5 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (5 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (5 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (5 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (5 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (5 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (5 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (5 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_33_6_32_1_1_U548 : component kernel_mhsa_sparsemux_33_6_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000000",
        din0_WIDTH => 32,
        CASE1 => "000100",
        din1_WIDTH => 32,
        CASE2 => "001000",
        din2_WIDTH => 32,
        CASE3 => "001100",
        din3_WIDTH => 32,
        CASE4 => "010000",
        din4_WIDTH => 32,
        CASE5 => "010100",
        din5_WIDTH => 32,
        CASE6 => "011000",
        din6_WIDTH => 32,
        CASE7 => "011100",
        din7_WIDTH => 32,
        CASE8 => "100000",
        din8_WIDTH => 32,
        CASE9 => "100100",
        din9_WIDTH => 32,
        CASE10 => "101000",
        din10_WIDTH => 32,
        CASE11 => "101100",
        din11_WIDTH => 32,
        CASE12 => "110000",
        din12_WIDTH => 32,
        CASE13 => "110100",
        din13_WIDTH => 32,
        CASE14 => "111000",
        din14_WIDTH => 32,
        CASE15 => "111100",
        din15_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => local_accum_load,
        din1 => local_accum_4_load,
        din2 => local_accum_8_load,
        din3 => local_accum_12_load,
        din4 => local_accum_16_load,
        din5 => local_accum_20_load,
        din6 => local_accum_24_load,
        din7 => local_accum_28_load,
        din8 => local_accum_32_load,
        din9 => local_accum_36_load,
        din10 => local_accum_40_load,
        din11 => local_accum_44_load,
        din12 => local_accum_48_load,
        din13 => local_accum_52_load,
        din14 => local_accum_56_load,
        din15 => local_accum_60_load,
        def => tmp_9_fu_752_p33,
        sel => trunc_ln185_1_fu_748_p1,
        dout => tmp_9_fu_752_p35);

    sparsemux_33_6_32_1_1_U549 : component kernel_mhsa_sparsemux_33_6_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000000",
        din0_WIDTH => 32,
        CASE1 => "000100",
        din1_WIDTH => 32,
        CASE2 => "001000",
        din2_WIDTH => 32,
        CASE3 => "001100",
        din3_WIDTH => 32,
        CASE4 => "010000",
        din4_WIDTH => 32,
        CASE5 => "010100",
        din5_WIDTH => 32,
        CASE6 => "011000",
        din6_WIDTH => 32,
        CASE7 => "011100",
        din7_WIDTH => 32,
        CASE8 => "100000",
        din8_WIDTH => 32,
        CASE9 => "100100",
        din9_WIDTH => 32,
        CASE10 => "101000",
        din10_WIDTH => 32,
        CASE11 => "101100",
        din11_WIDTH => 32,
        CASE12 => "110000",
        din12_WIDTH => 32,
        CASE13 => "110100",
        din13_WIDTH => 32,
        CASE14 => "111000",
        din14_WIDTH => 32,
        CASE15 => "111100",
        din15_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => local_accum_1_load,
        din1 => local_accum_5_load,
        din2 => local_accum_9_load,
        din3 => local_accum_13_load,
        din4 => local_accum_17_load,
        din5 => local_accum_21_load,
        din6 => local_accum_25_load,
        din7 => local_accum_29_load,
        din8 => local_accum_33_load,
        din9 => local_accum_37_load,
        din10 => local_accum_41_load,
        din11 => local_accum_45_load,
        din12 => local_accum_49_load,
        din13 => local_accum_53_load,
        din14 => local_accum_57_load,
        din15 => local_accum_61_load,
        def => tmp_1_fu_859_p33,
        sel => trunc_ln185_1_fu_748_p1,
        dout => tmp_1_fu_859_p35);

    sparsemux_33_6_32_1_1_U550 : component kernel_mhsa_sparsemux_33_6_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000000",
        din0_WIDTH => 32,
        CASE1 => "000100",
        din1_WIDTH => 32,
        CASE2 => "001000",
        din2_WIDTH => 32,
        CASE3 => "001100",
        din3_WIDTH => 32,
        CASE4 => "010000",
        din4_WIDTH => 32,
        CASE5 => "010100",
        din5_WIDTH => 32,
        CASE6 => "011000",
        din6_WIDTH => 32,
        CASE7 => "011100",
        din7_WIDTH => 32,
        CASE8 => "100000",
        din8_WIDTH => 32,
        CASE9 => "100100",
        din9_WIDTH => 32,
        CASE10 => "101000",
        din10_WIDTH => 32,
        CASE11 => "101100",
        din11_WIDTH => 32,
        CASE12 => "110000",
        din12_WIDTH => 32,
        CASE13 => "110100",
        din13_WIDTH => 32,
        CASE14 => "111000",
        din14_WIDTH => 32,
        CASE15 => "111100",
        din15_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => local_accum_2_load,
        din1 => local_accum_6_load,
        din2 => local_accum_10_load,
        din3 => local_accum_14_load,
        din4 => local_accum_18_load,
        din5 => local_accum_22_load,
        din6 => local_accum_26_load,
        din7 => local_accum_30_load,
        din8 => local_accum_34_load,
        din9 => local_accum_38_load,
        din10 => local_accum_42_load,
        din11 => local_accum_46_load,
        din12 => local_accum_50_load,
        din13 => local_accum_54_load,
        din14 => local_accum_58_load,
        din15 => local_accum_62_load,
        def => tmp_s_fu_934_p33,
        sel => trunc_ln185_1_fu_748_p1,
        dout => tmp_s_fu_934_p35);

    sparsemux_33_6_32_1_1_U551 : component kernel_mhsa_sparsemux_33_6_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000000",
        din0_WIDTH => 32,
        CASE1 => "000100",
        din1_WIDTH => 32,
        CASE2 => "001000",
        din2_WIDTH => 32,
        CASE3 => "001100",
        din3_WIDTH => 32,
        CASE4 => "010000",
        din4_WIDTH => 32,
        CASE5 => "010100",
        din5_WIDTH => 32,
        CASE6 => "011000",
        din6_WIDTH => 32,
        CASE7 => "011100",
        din7_WIDTH => 32,
        CASE8 => "100000",
        din8_WIDTH => 32,
        CASE9 => "100100",
        din9_WIDTH => 32,
        CASE10 => "101000",
        din10_WIDTH => 32,
        CASE11 => "101100",
        din11_WIDTH => 32,
        CASE12 => "110000",
        din12_WIDTH => 32,
        CASE13 => "110100",
        din13_WIDTH => 32,
        CASE14 => "111000",
        din14_WIDTH => 32,
        CASE15 => "111100",
        din15_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => local_accum_3_load,
        din1 => local_accum_7_load,
        din2 => local_accum_11_load,
        din3 => local_accum_15_load,
        din4 => local_accum_19_load,
        din5 => local_accum_23_load,
        din6 => local_accum_27_load,
        din7 => local_accum_31_load,
        din8 => local_accum_35_load,
        din9 => local_accum_39_load,
        din10 => local_accum_43_load,
        din11 => local_accum_47_load,
        din12 => local_accum_51_load,
        din13 => local_accum_55_load,
        din14 => local_accum_59_load,
        din15 => local_accum_63_load,
        def => tmp_2_fu_1009_p33,
        sel => trunc_ln185_1_fu_748_p1,
        dout => tmp_2_fu_1009_p35);

    flow_control_loop_pipe_sequential_init_U : component kernel_mhsa_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((tmp_fu_736_p3 = ap_const_lv1_0)) then 
                    i_fu_218 <= add_ln185_fu_1122_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_218 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln185_fu_1122_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_8) + unsigned(ap_const_lv7_4));
    add_ln188_fu_841_p2 <= std_logic_vector(unsigned(zext_ln188_1_fu_837_p1) + unsigned(p_udiv1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_8_assign_proc : process(ap_CS_fsm_state1, i_fu_218, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_8 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_8 <= i_fu_218;
        end if; 
    end process;

    icmp_ln188_fu_1084_p2 <= "1" when (trunc_ln185_fu_744_p1 = ap_const_lv3_0) else "0";
    lshr_ln8_fu_827_p4 <= ap_sig_allocacmp_i_8(6 downto 3);
    tmp_1_fu_859_p33 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_2_fu_1009_p33 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_9_fu_752_p33 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_736_p3 <= ap_sig_allocacmp_i_8(6 downto 6);
    tmp_s_fu_934_p33 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln185_1_fu_748_p1 <= ap_sig_allocacmp_i_8(6 - 1 downto 0);
    trunc_ln185_fu_744_p1 <= ap_sig_allocacmp_i_8(3 - 1 downto 0);
    xb_1_address0 <= zext_ln188_fu_847_p1(7 - 1 downto 0);
    xb_1_ce0 <= xb_1_ce0_local;

    xb_1_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_1_ce0_local <= ap_const_logic_1;
        else 
            xb_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_1_d0 <= tmp_1_fu_859_p35;
    xb_1_we0 <= xb_1_we0_local;

    xb_1_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_1_we0_local <= ap_const_logic_1;
        else 
            xb_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_2_address0 <= zext_ln188_fu_847_p1(7 - 1 downto 0);
    xb_2_ce0 <= xb_2_ce0_local;

    xb_2_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_2_ce0_local <= ap_const_logic_1;
        else 
            xb_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_2_d0 <= tmp_s_fu_934_p35;
    xb_2_we0 <= xb_2_we0_local;

    xb_2_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_2_we0_local <= ap_const_logic_1;
        else 
            xb_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_3_address0 <= zext_ln188_fu_847_p1(7 - 1 downto 0);
    xb_3_ce0 <= xb_3_ce0_local;

    xb_3_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_3_ce0_local <= ap_const_logic_1;
        else 
            xb_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_3_d0 <= tmp_2_fu_1009_p35;
    xb_3_we0 <= xb_3_we0_local;

    xb_3_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_3_we0_local <= ap_const_logic_1;
        else 
            xb_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_4_address0 <= zext_ln188_fu_847_p1(7 - 1 downto 0);
    xb_4_ce0 <= xb_4_ce0_local;

    xb_4_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_4_ce0_local <= ap_const_logic_1;
        else 
            xb_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_4_d0 <= tmp_9_fu_752_p35;
    xb_4_we0 <= xb_4_we0_local;

    xb_4_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_4_we0_local <= ap_const_logic_1;
        else 
            xb_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_5_address0 <= zext_ln188_fu_847_p1(7 - 1 downto 0);
    xb_5_ce0 <= xb_5_ce0_local;

    xb_5_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_5_ce0_local <= ap_const_logic_1;
        else 
            xb_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_5_d0 <= tmp_1_fu_859_p35;
    xb_5_we0 <= xb_5_we0_local;

    xb_5_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_5_we0_local <= ap_const_logic_1;
        else 
            xb_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_6_address0 <= zext_ln188_fu_847_p1(7 - 1 downto 0);
    xb_6_ce0 <= xb_6_ce0_local;

    xb_6_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_6_ce0_local <= ap_const_logic_1;
        else 
            xb_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_6_d0 <= tmp_s_fu_934_p35;
    xb_6_we0 <= xb_6_we0_local;

    xb_6_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_6_we0_local <= ap_const_logic_1;
        else 
            xb_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_7_address0 <= zext_ln188_fu_847_p1(7 - 1 downto 0);
    xb_7_ce0 <= xb_7_ce0_local;

    xb_7_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_7_ce0_local <= ap_const_logic_1;
        else 
            xb_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_7_d0 <= tmp_2_fu_1009_p35;
    xb_7_we0 <= xb_7_we0_local;

    xb_7_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_7_we0_local <= ap_const_logic_1;
        else 
            xb_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_address0 <= zext_ln188_fu_847_p1(7 - 1 downto 0);
    xb_ce0 <= xb_ce0_local;

    xb_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_ce0_local <= ap_const_logic_1;
        else 
            xb_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb_d0 <= tmp_9_fu_752_p35;
    xb_we0 <= xb_we0_local;

    xb_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_736_p3, icmp_ln188_fu_1084_p2)
    begin
        if (((tmp_fu_736_p3 = ap_const_lv1_0) and (icmp_ln188_fu_1084_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xb_we0_local <= ap_const_logic_1;
        else 
            xb_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln188_1_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln8_fu_827_p4),7));
    zext_ln188_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_fu_841_p2),64));
end behav;
