-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_kernel_mhsa_Pipeline_VITIS_LOOP_27_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_WREADY : IN STD_LOGIC;
    m_axi_gmem1_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RVALID : IN STD_LOGIC;
    m_axi_gmem1_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_RLAST : IN STD_LOGIC;
    m_axi_gmem1_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_gmem1_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_BVALID : IN STD_LOGIC;
    m_axi_gmem1_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln27 : IN STD_LOGIC_VECTOR (61 downto 0);
    out_rms_vec_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_rms_vec_7_ce0 : OUT STD_LOGIC;
    out_rms_vec_7_we0 : OUT STD_LOGIC;
    out_rms_vec_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_rms_vec_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_rms_vec_6_ce0 : OUT STD_LOGIC;
    out_rms_vec_6_we0 : OUT STD_LOGIC;
    out_rms_vec_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_rms_vec_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_rms_vec_5_ce0 : OUT STD_LOGIC;
    out_rms_vec_5_we0 : OUT STD_LOGIC;
    out_rms_vec_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_rms_vec_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_rms_vec_4_ce0 : OUT STD_LOGIC;
    out_rms_vec_4_we0 : OUT STD_LOGIC;
    out_rms_vec_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_rms_vec_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_rms_vec_3_ce0 : OUT STD_LOGIC;
    out_rms_vec_3_we0 : OUT STD_LOGIC;
    out_rms_vec_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_rms_vec_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_rms_vec_2_ce0 : OUT STD_LOGIC;
    out_rms_vec_2_we0 : OUT STD_LOGIC;
    out_rms_vec_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_rms_vec_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_rms_vec_1_ce0 : OUT STD_LOGIC;
    out_rms_vec_1_we0 : OUT STD_LOGIC;
    out_rms_vec_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_rms_vec_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_rms_vec_ce0 : OUT STD_LOGIC;
    out_rms_vec_we0 : OUT STD_LOGIC;
    out_rms_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_ce0 : OUT STD_LOGIC;
    current_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_8_ce0 : OUT STD_LOGIC;
    current_input_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_9_ce0 : OUT STD_LOGIC;
    current_input_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_10_ce0 : OUT STD_LOGIC;
    current_input_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_11_ce0 : OUT STD_LOGIC;
    current_input_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_12_ce0 : OUT STD_LOGIC;
    current_input_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_13_ce0 : OUT STD_LOGIC;
    current_input_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_14_ce0 : OUT STD_LOGIC;
    current_input_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    norm : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4540_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4540_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4540_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_kernel_mhsa_Pipeline_VITIS_LOOP_27_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln27_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln27_fu_366_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_565 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_565_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_565_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_565_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_565_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_565_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal out_rms_vec_addr_reg_610 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_addr_reg_610_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_addr_reg_610_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_addr_reg_610_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_addr_reg_610_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_addr_reg_610_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_1_addr_reg_616 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_1_addr_reg_616_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_1_addr_reg_616_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_1_addr_reg_616_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_1_addr_reg_616_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_1_addr_reg_616_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_2_addr_reg_622 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_2_addr_reg_622_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_2_addr_reg_622_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_2_addr_reg_622_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_2_addr_reg_622_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_2_addr_reg_622_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_3_addr_reg_628 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_3_addr_reg_628_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_3_addr_reg_628_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_3_addr_reg_628_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_3_addr_reg_628_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_3_addr_reg_628_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_4_addr_reg_634 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_4_addr_reg_634_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_4_addr_reg_634_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_4_addr_reg_634_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_4_addr_reg_634_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_4_addr_reg_634_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_5_addr_reg_640 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_5_addr_reg_640_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_5_addr_reg_640_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_5_addr_reg_640_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_5_addr_reg_640_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_5_addr_reg_640_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_6_addr_reg_646 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_6_addr_reg_646_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_6_addr_reg_646_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_6_addr_reg_646_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_6_addr_reg_646_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_6_addr_reg_646_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_7_addr_reg_652 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_7_addr_reg_652_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_7_addr_reg_652_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_7_addr_reg_652_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_7_addr_reg_652_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal out_rms_vec_7_addr_reg_652_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_455_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul10_i_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul13_i_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_110 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln27_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_7 : STD_LOGIC_VECTOR (9 downto 0);
    signal current_input_ce0_local : STD_LOGIC;
    signal current_input_8_ce0_local : STD_LOGIC;
    signal current_input_9_ce0_local : STD_LOGIC;
    signal current_input_10_ce0_local : STD_LOGIC;
    signal current_input_11_ce0_local : STD_LOGIC;
    signal current_input_12_ce0_local : STD_LOGIC;
    signal current_input_13_ce0_local : STD_LOGIC;
    signal current_input_14_ce0_local : STD_LOGIC;
    signal out_rms_vec_6_we0_local : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal out_rms_vec_6_ce0_local : STD_LOGIC;
    signal out_rms_vec_5_we0_local : STD_LOGIC;
    signal out_rms_vec_5_ce0_local : STD_LOGIC;
    signal out_rms_vec_4_we0_local : STD_LOGIC;
    signal out_rms_vec_4_ce0_local : STD_LOGIC;
    signal out_rms_vec_3_we0_local : STD_LOGIC;
    signal out_rms_vec_3_ce0_local : STD_LOGIC;
    signal out_rms_vec_2_we0_local : STD_LOGIC;
    signal out_rms_vec_2_ce0_local : STD_LOGIC;
    signal out_rms_vec_1_we0_local : STD_LOGIC;
    signal out_rms_vec_1_ce0_local : STD_LOGIC;
    signal out_rms_vec_we0_local : STD_LOGIC;
    signal out_rms_vec_ce0_local : STD_LOGIC;
    signal out_rms_vec_7_we0_local : STD_LOGIC;
    signal out_rms_vec_7_ce0_local : STD_LOGIC;
    signal grp_fu_331_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p0_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p1_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln4_fu_370_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_455_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_2_fu_455_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_455_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_455_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_455_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_455_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_455_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_455_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_455_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_fmul_32ns_32ns_32_1_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fmul_32ns_32ns_32_1_primitive_dsp_1_U217 : component kernel_mhsa_fmul_32ns_32ns_32_1_primitive_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_335_p0,
        din1 => grp_fu_335_p1,
        dout => grp_fu_335_p2);

    sparsemux_17_3_32_1_1_U218 : component kernel_mhsa_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => current_input_q0,
        din1 => current_input_8_q0,
        din2 => current_input_9_q0,
        din3 => current_input_10_q0,
        din4 => current_input_11_q0,
        din5 => current_input_12_q0,
        din6 => current_input_13_q0,
        din7 => current_input_14_q0,
        def => tmp_2_fu_455_p17,
        sel => trunc_ln27_reg_565,
        dout => tmp_2_fu_455_p19);

    flow_control_loop_pipe_sequential_init_U : component kernel_mhsa_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                    ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0))) then 
                    i_fu_110 <= add_ln27_fu_354_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_110 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                out_rms_vec_1_addr_reg_616 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
                out_rms_vec_1_addr_reg_616_pp0_iter1_reg <= out_rms_vec_1_addr_reg_616;
                out_rms_vec_2_addr_reg_622 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
                out_rms_vec_2_addr_reg_622_pp0_iter1_reg <= out_rms_vec_2_addr_reg_622;
                out_rms_vec_3_addr_reg_628 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
                out_rms_vec_3_addr_reg_628_pp0_iter1_reg <= out_rms_vec_3_addr_reg_628;
                out_rms_vec_4_addr_reg_634 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
                out_rms_vec_4_addr_reg_634_pp0_iter1_reg <= out_rms_vec_4_addr_reg_634;
                out_rms_vec_5_addr_reg_640 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
                out_rms_vec_5_addr_reg_640_pp0_iter1_reg <= out_rms_vec_5_addr_reg_640;
                out_rms_vec_6_addr_reg_646 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
                out_rms_vec_6_addr_reg_646_pp0_iter1_reg <= out_rms_vec_6_addr_reg_646;
                out_rms_vec_7_addr_reg_652 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
                out_rms_vec_7_addr_reg_652_pp0_iter1_reg <= out_rms_vec_7_addr_reg_652;
                out_rms_vec_addr_reg_610 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
                out_rms_vec_addr_reg_610_pp0_iter1_reg <= out_rms_vec_addr_reg_610;
                tmp_2_reg_658 <= tmp_2_fu_455_p19;
                trunc_ln27_reg_565 <= trunc_ln27_fu_366_p1;
                trunc_ln27_reg_565_pp0_iter1_reg <= trunc_ln27_reg_565;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                mul10_i_reg_664 <= grp_fu_4540_p_dout0;
                mul13_i_reg_675 <= grp_fu_335_p2;
                out_rms_vec_1_addr_reg_616_pp0_iter2_reg <= out_rms_vec_1_addr_reg_616_pp0_iter1_reg;
                out_rms_vec_1_addr_reg_616_pp0_iter3_reg <= out_rms_vec_1_addr_reg_616_pp0_iter2_reg;
                out_rms_vec_1_addr_reg_616_pp0_iter4_reg <= out_rms_vec_1_addr_reg_616_pp0_iter3_reg;
                out_rms_vec_1_addr_reg_616_pp0_iter5_reg <= out_rms_vec_1_addr_reg_616_pp0_iter4_reg;
                out_rms_vec_2_addr_reg_622_pp0_iter2_reg <= out_rms_vec_2_addr_reg_622_pp0_iter1_reg;
                out_rms_vec_2_addr_reg_622_pp0_iter3_reg <= out_rms_vec_2_addr_reg_622_pp0_iter2_reg;
                out_rms_vec_2_addr_reg_622_pp0_iter4_reg <= out_rms_vec_2_addr_reg_622_pp0_iter3_reg;
                out_rms_vec_2_addr_reg_622_pp0_iter5_reg <= out_rms_vec_2_addr_reg_622_pp0_iter4_reg;
                out_rms_vec_3_addr_reg_628_pp0_iter2_reg <= out_rms_vec_3_addr_reg_628_pp0_iter1_reg;
                out_rms_vec_3_addr_reg_628_pp0_iter3_reg <= out_rms_vec_3_addr_reg_628_pp0_iter2_reg;
                out_rms_vec_3_addr_reg_628_pp0_iter4_reg <= out_rms_vec_3_addr_reg_628_pp0_iter3_reg;
                out_rms_vec_3_addr_reg_628_pp0_iter5_reg <= out_rms_vec_3_addr_reg_628_pp0_iter4_reg;
                out_rms_vec_4_addr_reg_634_pp0_iter2_reg <= out_rms_vec_4_addr_reg_634_pp0_iter1_reg;
                out_rms_vec_4_addr_reg_634_pp0_iter3_reg <= out_rms_vec_4_addr_reg_634_pp0_iter2_reg;
                out_rms_vec_4_addr_reg_634_pp0_iter4_reg <= out_rms_vec_4_addr_reg_634_pp0_iter3_reg;
                out_rms_vec_4_addr_reg_634_pp0_iter5_reg <= out_rms_vec_4_addr_reg_634_pp0_iter4_reg;
                out_rms_vec_5_addr_reg_640_pp0_iter2_reg <= out_rms_vec_5_addr_reg_640_pp0_iter1_reg;
                out_rms_vec_5_addr_reg_640_pp0_iter3_reg <= out_rms_vec_5_addr_reg_640_pp0_iter2_reg;
                out_rms_vec_5_addr_reg_640_pp0_iter4_reg <= out_rms_vec_5_addr_reg_640_pp0_iter3_reg;
                out_rms_vec_5_addr_reg_640_pp0_iter5_reg <= out_rms_vec_5_addr_reg_640_pp0_iter4_reg;
                out_rms_vec_6_addr_reg_646_pp0_iter2_reg <= out_rms_vec_6_addr_reg_646_pp0_iter1_reg;
                out_rms_vec_6_addr_reg_646_pp0_iter3_reg <= out_rms_vec_6_addr_reg_646_pp0_iter2_reg;
                out_rms_vec_6_addr_reg_646_pp0_iter4_reg <= out_rms_vec_6_addr_reg_646_pp0_iter3_reg;
                out_rms_vec_6_addr_reg_646_pp0_iter5_reg <= out_rms_vec_6_addr_reg_646_pp0_iter4_reg;
                out_rms_vec_7_addr_reg_652_pp0_iter2_reg <= out_rms_vec_7_addr_reg_652_pp0_iter1_reg;
                out_rms_vec_7_addr_reg_652_pp0_iter3_reg <= out_rms_vec_7_addr_reg_652_pp0_iter2_reg;
                out_rms_vec_7_addr_reg_652_pp0_iter4_reg <= out_rms_vec_7_addr_reg_652_pp0_iter3_reg;
                out_rms_vec_7_addr_reg_652_pp0_iter5_reg <= out_rms_vec_7_addr_reg_652_pp0_iter4_reg;
                out_rms_vec_addr_reg_610_pp0_iter2_reg <= out_rms_vec_addr_reg_610_pp0_iter1_reg;
                out_rms_vec_addr_reg_610_pp0_iter3_reg <= out_rms_vec_addr_reg_610_pp0_iter2_reg;
                out_rms_vec_addr_reg_610_pp0_iter4_reg <= out_rms_vec_addr_reg_610_pp0_iter3_reg;
                out_rms_vec_addr_reg_610_pp0_iter5_reg <= out_rms_vec_addr_reg_610_pp0_iter4_reg;
                trunc_ln27_reg_565_pp0_iter2_reg <= trunc_ln27_reg_565_pp0_iter1_reg;
                trunc_ln27_reg_565_pp0_iter3_reg <= trunc_ln27_reg_565_pp0_iter2_reg;
                trunc_ln27_reg_565_pp0_iter4_reg <= trunc_ln27_reg_565_pp0_iter3_reg;
                trunc_ln27_reg_565_pp0_iter5_reg <= trunc_ln27_reg_565_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                grp_fu_331_p0_keep <= tmp_2_reg_658;
                grp_fu_331_p1_keep <= norm;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                grp_fu_335_p0 <= mul10_i_reg_664;
                grp_fu_335_p1 <= bitcast_ln28_fu_508_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln27_fu_354_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_7) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(m_axi_gmem1_0_RVALID)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (m_axi_gmem1_0_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln27_fu_360_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_110, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_7 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_7 <= i_fu_110;
        end if; 
    end process;

    bitcast_ln28_fu_508_p1 <= m_axi_gmem1_0_RDATA;
    current_input_10_address0 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
    current_input_10_ce0 <= current_input_10_ce0_local;

    current_input_10_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_360_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_input_10_ce0_local <= ap_const_logic_1;
        else 
            current_input_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_11_address0 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
    current_input_11_ce0 <= current_input_11_ce0_local;

    current_input_11_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_360_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_input_11_ce0_local <= ap_const_logic_1;
        else 
            current_input_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_12_address0 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
    current_input_12_ce0 <= current_input_12_ce0_local;

    current_input_12_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_360_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_input_12_ce0_local <= ap_const_logic_1;
        else 
            current_input_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_13_address0 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
    current_input_13_ce0 <= current_input_13_ce0_local;

    current_input_13_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_360_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_input_13_ce0_local <= ap_const_logic_1;
        else 
            current_input_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_14_address0 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
    current_input_14_ce0 <= current_input_14_ce0_local;

    current_input_14_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_360_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_input_14_ce0_local <= ap_const_logic_1;
        else 
            current_input_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_8_address0 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
    current_input_8_ce0 <= current_input_8_ce0_local;

    current_input_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_360_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_input_8_ce0_local <= ap_const_logic_1;
        else 
            current_input_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_9_address0 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
    current_input_9_ce0 <= current_input_9_ce0_local;

    current_input_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_360_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_input_9_ce0_local <= ap_const_logic_1;
        else 
            current_input_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_address0 <= zext_ln27_fu_380_p1(7 - 1 downto 0);
    current_input_ce0 <= current_input_ce0_local;

    current_input_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_360_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln27_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_input_ce0_local <= ap_const_logic_1;
        else 
            current_input_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_gmem1_0_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem1_blk_n_R <= m_axi_gmem1_0_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_331_p0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_2_reg_658, grp_fu_331_p0_keep)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_331_p0 <= tmp_2_reg_658;
        else 
            grp_fu_331_p0 <= grp_fu_331_p0_keep;
        end if; 
    end process;


    grp_fu_331_p1_assign_proc : process(ap_enable_reg_pp0_iter2, norm, ap_block_pp0_stage0_11001, grp_fu_331_p1_keep)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_331_p1 <= norm;
        else 
            grp_fu_331_p1 <= grp_fu_331_p1_keep;
        end if; 
    end process;

    grp_fu_4540_p_din0 <= grp_fu_331_p0;
    grp_fu_4540_p_din1 <= grp_fu_331_p1;
    icmp_ln27_fu_360_p2 <= "1" when (ap_sig_allocacmp_i_7 = ap_const_lv10_300) else "0";
    lshr_ln4_fu_370_p4 <= ap_sig_allocacmp_i_7(9 downto 3);
    m_axi_gmem1_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_0_ARID <= ap_const_lv1_0;
    m_axi_gmem1_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_0_AWID <= ap_const_lv1_0;
    m_axi_gmem1_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_0_BREADY <= ap_const_logic_0;

    m_axi_gmem1_0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem1_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_0_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_0_WID <= ap_const_lv1_0;
    m_axi_gmem1_0_WLAST <= ap_const_logic_0;
    m_axi_gmem1_0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_WVALID <= ap_const_logic_0;
    out_rms_vec_1_address0 <= out_rms_vec_1_addr_reg_616_pp0_iter5_reg;
    out_rms_vec_1_ce0 <= out_rms_vec_1_ce0_local;

    out_rms_vec_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_1_ce0_local <= ap_const_logic_1;
        else 
            out_rms_vec_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_1_d0 <= mul13_i_reg_675;
    out_rms_vec_1_we0 <= out_rms_vec_1_we0_local;

    out_rms_vec_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_1_we0_local <= ap_const_logic_1;
        else 
            out_rms_vec_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_2_address0 <= out_rms_vec_2_addr_reg_622_pp0_iter5_reg;
    out_rms_vec_2_ce0 <= out_rms_vec_2_ce0_local;

    out_rms_vec_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_2_ce0_local <= ap_const_logic_1;
        else 
            out_rms_vec_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_2_d0 <= mul13_i_reg_675;
    out_rms_vec_2_we0 <= out_rms_vec_2_we0_local;

    out_rms_vec_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_2_we0_local <= ap_const_logic_1;
        else 
            out_rms_vec_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_3_address0 <= out_rms_vec_3_addr_reg_628_pp0_iter5_reg;
    out_rms_vec_3_ce0 <= out_rms_vec_3_ce0_local;

    out_rms_vec_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_3_ce0_local <= ap_const_logic_1;
        else 
            out_rms_vec_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_3_d0 <= mul13_i_reg_675;
    out_rms_vec_3_we0 <= out_rms_vec_3_we0_local;

    out_rms_vec_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_3_we0_local <= ap_const_logic_1;
        else 
            out_rms_vec_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_4_address0 <= out_rms_vec_4_addr_reg_634_pp0_iter5_reg;
    out_rms_vec_4_ce0 <= out_rms_vec_4_ce0_local;

    out_rms_vec_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_4_ce0_local <= ap_const_logic_1;
        else 
            out_rms_vec_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_4_d0 <= mul13_i_reg_675;
    out_rms_vec_4_we0 <= out_rms_vec_4_we0_local;

    out_rms_vec_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_4_we0_local <= ap_const_logic_1;
        else 
            out_rms_vec_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_5_address0 <= out_rms_vec_5_addr_reg_640_pp0_iter5_reg;
    out_rms_vec_5_ce0 <= out_rms_vec_5_ce0_local;

    out_rms_vec_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_5_ce0_local <= ap_const_logic_1;
        else 
            out_rms_vec_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_5_d0 <= mul13_i_reg_675;
    out_rms_vec_5_we0 <= out_rms_vec_5_we0_local;

    out_rms_vec_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_5_we0_local <= ap_const_logic_1;
        else 
            out_rms_vec_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_6_address0 <= out_rms_vec_6_addr_reg_646_pp0_iter5_reg;
    out_rms_vec_6_ce0 <= out_rms_vec_6_ce0_local;

    out_rms_vec_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_6_ce0_local <= ap_const_logic_1;
        else 
            out_rms_vec_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_6_d0 <= mul13_i_reg_675;
    out_rms_vec_6_we0 <= out_rms_vec_6_we0_local;

    out_rms_vec_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_6_we0_local <= ap_const_logic_1;
        else 
            out_rms_vec_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_7_address0 <= out_rms_vec_7_addr_reg_652_pp0_iter5_reg;
    out_rms_vec_7_ce0 <= out_rms_vec_7_ce0_local;

    out_rms_vec_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_7_ce0_local <= ap_const_logic_1;
        else 
            out_rms_vec_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_7_d0 <= mul13_i_reg_675;
    out_rms_vec_7_we0 <= out_rms_vec_7_we0_local;

    out_rms_vec_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_7_we0_local <= ap_const_logic_1;
        else 
            out_rms_vec_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_address0 <= out_rms_vec_addr_reg_610_pp0_iter5_reg;
    out_rms_vec_ce0 <= out_rms_vec_ce0_local;

    out_rms_vec_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_ce0_local <= ap_const_logic_1;
        else 
            out_rms_vec_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_rms_vec_d0 <= mul13_i_reg_675;
    out_rms_vec_we0 <= out_rms_vec_we0_local;

    out_rms_vec_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, trunc_ln27_reg_565_pp0_iter5_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln27_reg_565_pp0_iter5_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            out_rms_vec_we0_local <= ap_const_logic_1;
        else 
            out_rms_vec_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_455_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln27_fu_366_p1 <= ap_sig_allocacmp_i_7(3 - 1 downto 0);
    zext_ln27_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_370_p4),64));
end behav;
