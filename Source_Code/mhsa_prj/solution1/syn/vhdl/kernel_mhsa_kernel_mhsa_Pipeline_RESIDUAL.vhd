-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_mhsa_kernel_mhsa_Pipeline_RESIDUAL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    current_input_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_14_ce0 : OUT STD_LOGIC;
    current_input_14_we0 : OUT STD_LOGIC;
    current_input_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_14_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_14_ce1 : OUT STD_LOGIC;
    current_input_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_13_ce0 : OUT STD_LOGIC;
    current_input_13_we0 : OUT STD_LOGIC;
    current_input_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_13_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_13_ce1 : OUT STD_LOGIC;
    current_input_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_12_ce0 : OUT STD_LOGIC;
    current_input_12_we0 : OUT STD_LOGIC;
    current_input_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_12_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_12_ce1 : OUT STD_LOGIC;
    current_input_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_11_ce0 : OUT STD_LOGIC;
    current_input_11_we0 : OUT STD_LOGIC;
    current_input_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_11_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_11_ce1 : OUT STD_LOGIC;
    current_input_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_10_ce0 : OUT STD_LOGIC;
    current_input_10_we0 : OUT STD_LOGIC;
    current_input_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_10_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_10_ce1 : OUT STD_LOGIC;
    current_input_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_9_ce0 : OUT STD_LOGIC;
    current_input_9_we0 : OUT STD_LOGIC;
    current_input_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_9_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_9_ce1 : OUT STD_LOGIC;
    current_input_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_8_ce0 : OUT STD_LOGIC;
    current_input_8_we0 : OUT STD_LOGIC;
    current_input_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_8_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_8_ce1 : OUT STD_LOGIC;
    current_input_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_input_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_ce0 : OUT STD_LOGIC;
    current_input_we0 : OUT STD_LOGIC;
    current_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_input_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    current_input_ce1 : OUT STD_LOGIC;
    current_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb2_ce0 : OUT STD_LOGIC;
    xb2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb2_1_ce0 : OUT STD_LOGIC;
    xb2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb2_2_ce0 : OUT STD_LOGIC;
    xb2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb2_3_ce0 : OUT STD_LOGIC;
    xb2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb2_4_ce0 : OUT STD_LOGIC;
    xb2_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb2_5_ce0 : OUT STD_LOGIC;
    xb2_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb2_6_ce0 : OUT STD_LOGIC;
    xb2_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xb2_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    xb2_7_ce0 : OUT STD_LOGIC;
    xb2_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2831_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2831_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2831_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_2831_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_mhsa_kernel_mhsa_Pipeline_RESIDUAL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln225_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln225_fu_353_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_reg_593 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_reg_593_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_reg_593_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_reg_593_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal current_input_addr_reg_599 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_addr_reg_599_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_addr_reg_599_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_addr_reg_599_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_8_addr_reg_606 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_8_addr_reg_606_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_8_addr_reg_606_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_8_addr_reg_606_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_9_addr_reg_613 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_9_addr_reg_613_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_9_addr_reg_613_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_9_addr_reg_613_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_10_addr_reg_620 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_10_addr_reg_620_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_10_addr_reg_620_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_10_addr_reg_620_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_11_addr_reg_627 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_11_addr_reg_627_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_11_addr_reg_627_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_11_addr_reg_627_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_12_addr_reg_634 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_12_addr_reg_634_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_12_addr_reg_634_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_12_addr_reg_634_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_13_addr_reg_641 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_13_addr_reg_641_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_13_addr_reg_641_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_13_addr_reg_641_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_14_addr_reg_648 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_14_addr_reg_648_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_14_addr_reg_648_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal current_input_14_addr_reg_648_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_474_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_513_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln225_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_82 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln225_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_8 : STD_LOGIC_VECTOR (9 downto 0);
    signal current_input_ce1_local : STD_LOGIC;
    signal current_input_we0_local : STD_LOGIC;
    signal current_input_ce0_local : STD_LOGIC;
    signal current_input_8_ce1_local : STD_LOGIC;
    signal current_input_8_we0_local : STD_LOGIC;
    signal current_input_8_ce0_local : STD_LOGIC;
    signal current_input_9_ce1_local : STD_LOGIC;
    signal current_input_9_we0_local : STD_LOGIC;
    signal current_input_9_ce0_local : STD_LOGIC;
    signal current_input_10_ce1_local : STD_LOGIC;
    signal current_input_10_we0_local : STD_LOGIC;
    signal current_input_10_ce0_local : STD_LOGIC;
    signal current_input_11_ce1_local : STD_LOGIC;
    signal current_input_11_we0_local : STD_LOGIC;
    signal current_input_11_ce0_local : STD_LOGIC;
    signal current_input_12_ce1_local : STD_LOGIC;
    signal current_input_12_we0_local : STD_LOGIC;
    signal current_input_12_ce0_local : STD_LOGIC;
    signal current_input_13_ce1_local : STD_LOGIC;
    signal current_input_13_we0_local : STD_LOGIC;
    signal current_input_13_ce0_local : STD_LOGIC;
    signal current_input_14_ce1_local : STD_LOGIC;
    signal current_input_14_we0_local : STD_LOGIC;
    signal current_input_14_ce0_local : STD_LOGIC;
    signal xb2_ce0_local : STD_LOGIC;
    signal xb2_1_ce0_local : STD_LOGIC;
    signal xb2_2_ce0_local : STD_LOGIC;
    signal xb2_3_ce0_local : STD_LOGIC;
    signal xb2_4_ce0_local : STD_LOGIC;
    signal xb2_5_ce0_local : STD_LOGIC;
    signal xb2_6_ce0_local : STD_LOGIC;
    signal xb2_7_ce0_local : STD_LOGIC;
    signal grp_fu_326_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p0_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p1_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln9_fu_357_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_474_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_513_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_27 : BOOLEAN;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_69 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_119 : BOOLEAN;
    signal ap_enable_state5_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_operation_29 : BOOLEAN;
    signal ap_enable_operation_70 : BOOLEAN;
    signal ap_enable_operation_115 : BOOLEAN;
    signal ap_enable_operation_31 : BOOLEAN;
    signal ap_enable_operation_71 : BOOLEAN;
    signal ap_enable_operation_111 : BOOLEAN;
    signal ap_enable_operation_33 : BOOLEAN;
    signal ap_enable_operation_72 : BOOLEAN;
    signal ap_enable_operation_107 : BOOLEAN;
    signal ap_enable_operation_35 : BOOLEAN;
    signal ap_enable_operation_73 : BOOLEAN;
    signal ap_enable_operation_103 : BOOLEAN;
    signal ap_enable_operation_37 : BOOLEAN;
    signal ap_enable_operation_74 : BOOLEAN;
    signal ap_enable_operation_99 : BOOLEAN;
    signal ap_enable_operation_39 : BOOLEAN;
    signal ap_enable_operation_75 : BOOLEAN;
    signal ap_enable_operation_95 : BOOLEAN;
    signal ap_enable_operation_41 : BOOLEAN;
    signal ap_enable_operation_76 : BOOLEAN;
    signal ap_enable_operation_123 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal tmp_5_fu_474_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_474_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_474_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_474_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_474_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_474_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_474_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_474_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_513_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_513_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_513_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_513_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_513_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_513_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_513_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_mhsa_fadd_32ns_32ns_32_1_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_mhsa_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_32_1_1_U1352 : component kernel_mhsa_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => current_input_q1,
        din1 => current_input_8_q1,
        din2 => current_input_9_q1,
        din3 => current_input_10_q1,
        din4 => current_input_11_q1,
        din5 => current_input_12_q1,
        din6 => current_input_13_q1,
        din7 => current_input_14_q1,
        def => tmp_5_fu_474_p17,
        sel => trunc_ln225_reg_593,
        dout => tmp_5_fu_474_p19);

    sparsemux_17_3_32_1_1_U1353 : component kernel_mhsa_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => xb2_q0,
        din1 => xb2_1_q0,
        din2 => xb2_2_q0,
        din3 => xb2_3_q0,
        din4 => xb2_4_q0,
        din5 => xb2_5_q0,
        din6 => xb2_6_q0,
        din7 => xb2_7_q0,
        def => tmp_6_fu_513_p17,
        sel => trunc_ln225_reg_593,
        dout => tmp_6_fu_513_p19);

    flow_control_loop_pipe_sequential_init_U : component kernel_mhsa_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    i_fu_82 <= add_ln225_fu_341_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_82 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_reg_707 <= grp_fu_2831_p_dout0;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                current_input_10_addr_reg_620_pp0_iter2_reg <= current_input_10_addr_reg_620_pp0_iter1_reg;
                current_input_10_addr_reg_620_pp0_iter3_reg <= current_input_10_addr_reg_620_pp0_iter2_reg;
                current_input_11_addr_reg_627_pp0_iter2_reg <= current_input_11_addr_reg_627_pp0_iter1_reg;
                current_input_11_addr_reg_627_pp0_iter3_reg <= current_input_11_addr_reg_627_pp0_iter2_reg;
                current_input_12_addr_reg_634_pp0_iter2_reg <= current_input_12_addr_reg_634_pp0_iter1_reg;
                current_input_12_addr_reg_634_pp0_iter3_reg <= current_input_12_addr_reg_634_pp0_iter2_reg;
                current_input_13_addr_reg_641_pp0_iter2_reg <= current_input_13_addr_reg_641_pp0_iter1_reg;
                current_input_13_addr_reg_641_pp0_iter3_reg <= current_input_13_addr_reg_641_pp0_iter2_reg;
                current_input_14_addr_reg_648_pp0_iter2_reg <= current_input_14_addr_reg_648_pp0_iter1_reg;
                current_input_14_addr_reg_648_pp0_iter3_reg <= current_input_14_addr_reg_648_pp0_iter2_reg;
                current_input_8_addr_reg_606_pp0_iter2_reg <= current_input_8_addr_reg_606_pp0_iter1_reg;
                current_input_8_addr_reg_606_pp0_iter3_reg <= current_input_8_addr_reg_606_pp0_iter2_reg;
                current_input_9_addr_reg_613_pp0_iter2_reg <= current_input_9_addr_reg_613_pp0_iter1_reg;
                current_input_9_addr_reg_613_pp0_iter3_reg <= current_input_9_addr_reg_613_pp0_iter2_reg;
                current_input_addr_reg_599_pp0_iter2_reg <= current_input_addr_reg_599_pp0_iter1_reg;
                current_input_addr_reg_599_pp0_iter3_reg <= current_input_addr_reg_599_pp0_iter2_reg;
                trunc_ln225_reg_593_pp0_iter2_reg <= trunc_ln225_reg_593_pp0_iter1_reg;
                trunc_ln225_reg_593_pp0_iter3_reg <= trunc_ln225_reg_593_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                current_input_10_addr_reg_620 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
                current_input_10_addr_reg_620_pp0_iter1_reg <= current_input_10_addr_reg_620;
                current_input_11_addr_reg_627 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
                current_input_11_addr_reg_627_pp0_iter1_reg <= current_input_11_addr_reg_627;
                current_input_12_addr_reg_634 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
                current_input_12_addr_reg_634_pp0_iter1_reg <= current_input_12_addr_reg_634;
                current_input_13_addr_reg_641 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
                current_input_13_addr_reg_641_pp0_iter1_reg <= current_input_13_addr_reg_641;
                current_input_14_addr_reg_648 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
                current_input_14_addr_reg_648_pp0_iter1_reg <= current_input_14_addr_reg_648;
                current_input_8_addr_reg_606 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
                current_input_8_addr_reg_606_pp0_iter1_reg <= current_input_8_addr_reg_606;
                current_input_9_addr_reg_613 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
                current_input_9_addr_reg_613_pp0_iter1_reg <= current_input_9_addr_reg_613;
                current_input_addr_reg_599 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
                current_input_addr_reg_599_pp0_iter1_reg <= current_input_addr_reg_599;
                tmp_5_reg_695 <= tmp_5_fu_474_p19;
                tmp_6_reg_701 <= tmp_6_fu_513_p19;
                trunc_ln225_reg_593 <= trunc_ln225_fu_353_p1;
                trunc_ln225_reg_593_pp0_iter1_reg <= trunc_ln225_reg_593;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                grp_fu_326_p0_keep <= tmp_5_reg_695;
                grp_fu_326_p1_keep <= tmp_6_reg_701;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln225_fu_341_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_8) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln225_fu_347_p2, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_103_assign_proc : process(trunc_ln225_reg_593_pp0_iter3_reg)
    begin
                ap_enable_operation_103 <= (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_4);
    end process;


    ap_enable_operation_107_assign_proc : process(trunc_ln225_reg_593_pp0_iter3_reg)
    begin
                ap_enable_operation_107 <= (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_3);
    end process;


    ap_enable_operation_111_assign_proc : process(trunc_ln225_reg_593_pp0_iter3_reg)
    begin
                ap_enable_operation_111 <= (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_2);
    end process;


    ap_enable_operation_115_assign_proc : process(trunc_ln225_reg_593_pp0_iter3_reg)
    begin
                ap_enable_operation_115 <= (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_1);
    end process;


    ap_enable_operation_119_assign_proc : process(trunc_ln225_reg_593_pp0_iter3_reg)
    begin
                ap_enable_operation_119 <= (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_0);
    end process;


    ap_enable_operation_123_assign_proc : process(trunc_ln225_reg_593_pp0_iter3_reg)
    begin
                ap_enable_operation_123 <= (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_7);
    end process;


    ap_enable_operation_27_assign_proc : process(icmp_ln225_fu_347_p2)
    begin
                ap_enable_operation_27 <= (icmp_ln225_fu_347_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_29_assign_proc : process(icmp_ln225_fu_347_p2)
    begin
                ap_enable_operation_29 <= (icmp_ln225_fu_347_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_31_assign_proc : process(icmp_ln225_fu_347_p2)
    begin
                ap_enable_operation_31 <= (icmp_ln225_fu_347_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_33_assign_proc : process(icmp_ln225_fu_347_p2)
    begin
                ap_enable_operation_33 <= (icmp_ln225_fu_347_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_35_assign_proc : process(icmp_ln225_fu_347_p2)
    begin
                ap_enable_operation_35 <= (icmp_ln225_fu_347_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_37_assign_proc : process(icmp_ln225_fu_347_p2)
    begin
                ap_enable_operation_37 <= (icmp_ln225_fu_347_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_39_assign_proc : process(icmp_ln225_fu_347_p2)
    begin
                ap_enable_operation_39 <= (icmp_ln225_fu_347_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_41_assign_proc : process(icmp_ln225_fu_347_p2)
    begin
                ap_enable_operation_41 <= (icmp_ln225_fu_347_p2 = ap_const_lv1_0);
    end process;

        ap_enable_operation_69 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_70 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_71 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_72 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_73 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_74 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_75 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_76 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_95_assign_proc : process(trunc_ln225_reg_593_pp0_iter3_reg)
    begin
                ap_enable_operation_95 <= (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_6);
    end process;


    ap_enable_operation_99_assign_proc : process(trunc_ln225_reg_593_pp0_iter3_reg)
    begin
                ap_enable_operation_99 <= (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_5);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_start_int)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state5_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_82, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_8 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_8 <= i_fu_82;
        end if; 
    end process;

    current_input_10_address0 <= current_input_10_addr_reg_620_pp0_iter3_reg;
    current_input_10_address1 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    current_input_10_ce0 <= current_input_10_ce0_local;

    current_input_10_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_3))) then 
            current_input_10_ce0_local <= ap_const_logic_1;
        else 
            current_input_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_10_ce1 <= current_input_10_ce1_local;

    current_input_10_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_input_10_ce1_local <= ap_const_logic_1;
        else 
            current_input_10_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_10_d0 <= add_reg_707;
    current_input_10_we0 <= current_input_10_we0_local;

    current_input_10_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_3))) then 
            current_input_10_we0_local <= ap_const_logic_1;
        else 
            current_input_10_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_11_address0 <= current_input_11_addr_reg_627_pp0_iter3_reg;
    current_input_11_address1 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    current_input_11_ce0 <= current_input_11_ce0_local;

    current_input_11_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_4))) then 
            current_input_11_ce0_local <= ap_const_logic_1;
        else 
            current_input_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_11_ce1 <= current_input_11_ce1_local;

    current_input_11_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_input_11_ce1_local <= ap_const_logic_1;
        else 
            current_input_11_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_11_d0 <= add_reg_707;
    current_input_11_we0 <= current_input_11_we0_local;

    current_input_11_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_4))) then 
            current_input_11_we0_local <= ap_const_logic_1;
        else 
            current_input_11_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_12_address0 <= current_input_12_addr_reg_634_pp0_iter3_reg;
    current_input_12_address1 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    current_input_12_ce0 <= current_input_12_ce0_local;

    current_input_12_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_5))) then 
            current_input_12_ce0_local <= ap_const_logic_1;
        else 
            current_input_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_12_ce1 <= current_input_12_ce1_local;

    current_input_12_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_input_12_ce1_local <= ap_const_logic_1;
        else 
            current_input_12_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_12_d0 <= add_reg_707;
    current_input_12_we0 <= current_input_12_we0_local;

    current_input_12_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_5))) then 
            current_input_12_we0_local <= ap_const_logic_1;
        else 
            current_input_12_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_13_address0 <= current_input_13_addr_reg_641_pp0_iter3_reg;
    current_input_13_address1 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    current_input_13_ce0 <= current_input_13_ce0_local;

    current_input_13_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_6))) then 
            current_input_13_ce0_local <= ap_const_logic_1;
        else 
            current_input_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_13_ce1 <= current_input_13_ce1_local;

    current_input_13_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_input_13_ce1_local <= ap_const_logic_1;
        else 
            current_input_13_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_13_d0 <= add_reg_707;
    current_input_13_we0 <= current_input_13_we0_local;

    current_input_13_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_6))) then 
            current_input_13_we0_local <= ap_const_logic_1;
        else 
            current_input_13_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_14_address0 <= current_input_14_addr_reg_648_pp0_iter3_reg;
    current_input_14_address1 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    current_input_14_ce0 <= current_input_14_ce0_local;

    current_input_14_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_7))) then 
            current_input_14_ce0_local <= ap_const_logic_1;
        else 
            current_input_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_14_ce1 <= current_input_14_ce1_local;

    current_input_14_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_input_14_ce1_local <= ap_const_logic_1;
        else 
            current_input_14_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_14_d0 <= add_reg_707;
    current_input_14_we0 <= current_input_14_we0_local;

    current_input_14_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_7))) then 
            current_input_14_we0_local <= ap_const_logic_1;
        else 
            current_input_14_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_8_address0 <= current_input_8_addr_reg_606_pp0_iter3_reg;
    current_input_8_address1 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    current_input_8_ce0 <= current_input_8_ce0_local;

    current_input_8_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_1))) then 
            current_input_8_ce0_local <= ap_const_logic_1;
        else 
            current_input_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_8_ce1 <= current_input_8_ce1_local;

    current_input_8_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_input_8_ce1_local <= ap_const_logic_1;
        else 
            current_input_8_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_8_d0 <= add_reg_707;
    current_input_8_we0 <= current_input_8_we0_local;

    current_input_8_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_1))) then 
            current_input_8_we0_local <= ap_const_logic_1;
        else 
            current_input_8_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_9_address0 <= current_input_9_addr_reg_613_pp0_iter3_reg;
    current_input_9_address1 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    current_input_9_ce0 <= current_input_9_ce0_local;

    current_input_9_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_2))) then 
            current_input_9_ce0_local <= ap_const_logic_1;
        else 
            current_input_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_9_ce1 <= current_input_9_ce1_local;

    current_input_9_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_input_9_ce1_local <= ap_const_logic_1;
        else 
            current_input_9_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_9_d0 <= add_reg_707;
    current_input_9_we0 <= current_input_9_we0_local;

    current_input_9_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_2))) then 
            current_input_9_we0_local <= ap_const_logic_1;
        else 
            current_input_9_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_address0 <= current_input_addr_reg_599_pp0_iter3_reg;
    current_input_address1 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    current_input_ce0 <= current_input_ce0_local;

    current_input_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_0))) then 
            current_input_ce0_local <= ap_const_logic_1;
        else 
            current_input_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_ce1 <= current_input_ce1_local;

    current_input_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_input_ce1_local <= ap_const_logic_1;
        else 
            current_input_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    current_input_d0 <= add_reg_707;
    current_input_we0 <= current_input_we0_local;

    current_input_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln225_reg_593_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln225_reg_593_pp0_iter3_reg = ap_const_lv3_0))) then 
            current_input_we0_local <= ap_const_logic_1;
        else 
            current_input_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2831_p_din0 <= grp_fu_326_p0;
    grp_fu_2831_p_din1 <= grp_fu_326_p1;
    grp_fu_2831_p_opcode <= ap_const_lv2_0;

    grp_fu_326_p0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_5_reg_695, grp_fu_326_p0_keep)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_326_p0 <= tmp_5_reg_695;
        else 
            grp_fu_326_p0 <= grp_fu_326_p0_keep;
        end if; 
    end process;


    grp_fu_326_p1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_6_reg_701, grp_fu_326_p1_keep)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_326_p1 <= tmp_6_reg_701;
        else 
            grp_fu_326_p1 <= grp_fu_326_p1_keep;
        end if; 
    end process;

    icmp_ln225_fu_347_p2 <= "1" when (ap_sig_allocacmp_i_8 = ap_const_lv10_300) else "0";
    lshr_ln9_fu_357_p4 <= ap_sig_allocacmp_i_8(9 downto 3);
    tmp_5_fu_474_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_6_fu_513_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln225_fu_353_p1 <= ap_sig_allocacmp_i_8(3 - 1 downto 0);
    xb2_1_address0 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    xb2_1_ce0 <= xb2_1_ce0_local;

    xb2_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xb2_1_ce0_local <= ap_const_logic_1;
        else 
            xb2_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_2_address0 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    xb2_2_ce0 <= xb2_2_ce0_local;

    xb2_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xb2_2_ce0_local <= ap_const_logic_1;
        else 
            xb2_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_3_address0 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    xb2_3_ce0 <= xb2_3_ce0_local;

    xb2_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xb2_3_ce0_local <= ap_const_logic_1;
        else 
            xb2_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_4_address0 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    xb2_4_ce0 <= xb2_4_ce0_local;

    xb2_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xb2_4_ce0_local <= ap_const_logic_1;
        else 
            xb2_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_5_address0 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    xb2_5_ce0 <= xb2_5_ce0_local;

    xb2_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xb2_5_ce0_local <= ap_const_logic_1;
        else 
            xb2_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_6_address0 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    xb2_6_ce0 <= xb2_6_ce0_local;

    xb2_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xb2_6_ce0_local <= ap_const_logic_1;
        else 
            xb2_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_7_address0 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    xb2_7_ce0 <= xb2_7_ce0_local;

    xb2_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xb2_7_ce0_local <= ap_const_logic_1;
        else 
            xb2_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xb2_address0 <= zext_ln225_fu_367_p1(7 - 1 downto 0);
    xb2_ce0 <= xb2_ce0_local;

    xb2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln225_fu_347_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((icmp_ln225_fu_347_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xb2_ce0_local <= ap_const_logic_1;
        else 
            xb2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln225_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln9_fu_357_p4),64));
end behav;
