-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFN is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of FFN is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFN_FFN,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcv80-lsva4737-2MHP-e-S,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=21242991,HLS_SYN_TPT=21242992,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=5937,HLS_SYN_LUT=8345,HLS_VERSION=2025_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal i_vec : STD_LOGIC_VECTOR (63 downto 0);
    signal o_vec : STD_LOGIC_VECTOR (63 downto 0);
    signal W1_vec : STD_LOGIC_VECTOR (63 downto 0);
    signal W2_vec : STD_LOGIC_VECTOR (63 downto 0);
    signal W3_vec : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_0_AWREADY : STD_LOGIC;
    signal gmem_0_WREADY : STD_LOGIC;
    signal gmem_0_ARREADY : STD_LOGIC;
    signal gmem_0_RVALID : STD_LOGIC;
    signal gmem_0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_0_RLAST : STD_LOGIC;
    signal gmem_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_0_BVALID : STD_LOGIC;
    signal gmem_0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_o_vec_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_o_vec_c_write : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWVALID : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WVALID : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WLAST : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARVALID : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_RREADY : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_BREADY : STD_LOGIC;
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_res_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_res_strm_write : STD_LOGIC;
    signal pull_tensor1d_U0_ap_start : STD_LOGIC;
    signal pull_tensor1d_U0_ap_done : STD_LOGIC;
    signal pull_tensor1d_U0_ap_continue : STD_LOGIC;
    signal pull_tensor1d_U0_ap_idle : STD_LOGIC;
    signal pull_tensor1d_U0_ap_ready : STD_LOGIC;
    signal pull_tensor1d_U0_tsor_read : STD_LOGIC;
    signal pull_tensor1d_U0_m_axi_gmem_0_AWVALID : STD_LOGIC;
    signal pull_tensor1d_U0_m_axi_gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_WVALID : STD_LOGIC;
    signal pull_tensor1d_U0_m_axi_gmem_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_WLAST : STD_LOGIC;
    signal pull_tensor1d_U0_m_axi_gmem_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARVALID : STD_LOGIC;
    signal pull_tensor1d_U0_m_axi_gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pull_tensor1d_U0_m_axi_gmem_0_RREADY : STD_LOGIC;
    signal pull_tensor1d_U0_m_axi_gmem_0_BREADY : STD_LOGIC;
    signal pull_tensor1d_U0_res_strm_read : STD_LOGIC;
    signal o_vec_c_full_n : STD_LOGIC;
    signal o_vec_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal o_vec_c_empty_n : STD_LOGIC;
    signal o_vec_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal o_vec_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal res_strm_full_n : STD_LOGIC;
    signal res_strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal res_strm_empty_n : STD_LOGIC;
    signal res_strm_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal res_strm_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready : STD_LOGIC;
    signal start_for_pull_tensor1d_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pull_tensor1d_U0_full_n : STD_LOGIC;
    signal start_for_pull_tensor1d_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pull_tensor1d_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FFN_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        o_vec : IN STD_LOGIC_VECTOR (63 downto 0);
        o_vec_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        o_vec_c_full_n : IN STD_LOGIC;
        o_vec_c_write : OUT STD_LOGIC;
        o_vec_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        o_vec_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component FFN_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem_0_WREADY : IN STD_LOGIC;
        m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RVALID : IN STD_LOGIC;
        m_axi_gmem_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_RLAST : IN STD_LOGIC;
        m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BVALID : IN STD_LOGIC;
        m_axi_gmem_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        i_vec : IN STD_LOGIC_VECTOR (63 downto 0);
        W1_vec : IN STD_LOGIC_VECTOR (63 downto 0);
        W2_vec : IN STD_LOGIC_VECTOR (63 downto 0);
        W3_vec : IN STD_LOGIC_VECTOR (63 downto 0);
        res_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_strm_full_n : IN STD_LOGIC;
        res_strm_write : OUT STD_LOGIC;
        res_strm_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        res_strm_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component FFN_pull_tensor1d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tsor_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        tsor_empty_n : IN STD_LOGIC;
        tsor_read : OUT STD_LOGIC;
        tsor_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        tsor_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem_0_WREADY : IN STD_LOGIC;
        m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RVALID : IN STD_LOGIC;
        m_axi_gmem_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_RLAST : IN STD_LOGIC;
        m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BVALID : IN STD_LOGIC;
        m_axi_gmem_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        res_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        res_strm_empty_n : IN STD_LOGIC;
        res_strm_read : OUT STD_LOGIC;
        res_strm_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        res_strm_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component FFN_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component FFN_fifo_w32_d64_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component FFN_start_for_pull_tensor1d_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FFN_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component FFN_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        i_vec : OUT STD_LOGIC_VECTOR (63 downto 0);
        o_vec : OUT STD_LOGIC_VECTOR (63 downto 0);
        W1_vec : OUT STD_LOGIC_VECTOR (63 downto 0);
        W2_vec : OUT STD_LOGIC_VECTOR (63 downto 0);
        W3_vec : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFN_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component FFN_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_r_s_axi_U : component FFN_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        i_vec => i_vec,
        o_vec => o_vec,
        W1_vec => W1_vec,
        W2_vec => W2_vec,
        W3_vec => W3_vec);

    gmem_m_axi_U : component FFN_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 10,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 9,
        CH0_USER_DW => 32,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARVALID,
        I_CH0_ARREADY => gmem_0_ARREADY,
        I_CH0_ARADDR => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARADDR,
        I_CH0_ARLEN => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARLEN,
        I_CH0_RVALID => gmem_0_RVALID,
        I_CH0_RREADY => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_RREADY,
        I_CH0_RDATA => gmem_0_RDATA,
        I_CH0_RFIFONUM => gmem_0_RFIFONUM,
        I_CH0_AWVALID => pull_tensor1d_U0_m_axi_gmem_0_AWVALID,
        I_CH0_AWREADY => gmem_0_AWREADY,
        I_CH0_AWADDR => pull_tensor1d_U0_m_axi_gmem_0_AWADDR,
        I_CH0_AWLEN => pull_tensor1d_U0_m_axi_gmem_0_AWLEN,
        I_CH0_WVALID => pull_tensor1d_U0_m_axi_gmem_0_WVALID,
        I_CH0_WREADY => gmem_0_WREADY,
        I_CH0_WDATA => pull_tensor1d_U0_m_axi_gmem_0_WDATA,
        I_CH0_WSTRB => pull_tensor1d_U0_m_axi_gmem_0_WSTRB,
        I_CH0_BVALID => gmem_0_BVALID,
        I_CH0_BREADY => pull_tensor1d_U0_m_axi_gmem_0_BREADY);

    entry_proc_U0 : component FFN_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_pull_tensor1d_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        o_vec => o_vec,
        o_vec_c_din => entry_proc_U0_o_vec_c_din,
        o_vec_c_full_n => o_vec_c_full_n,
        o_vec_c_write => entry_proc_U0_o_vec_c_write,
        o_vec_c_num_data_valid => o_vec_c_num_data_valid,
        o_vec_c_fifo_cap => o_vec_c_fifo_cap);

    Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0 : component FFN_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_start,
        ap_done => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_done,
        ap_continue => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_continue,
        ap_idle => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_idle,
        ap_ready => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready,
        m_axi_gmem_0_AWVALID => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY => ap_const_logic_0,
        m_axi_gmem_0_AWADDR => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY => ap_const_logic_0,
        m_axi_gmem_0_WDATA => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY => gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID => gmem_0_RVALID,
        m_axi_gmem_0_RREADY => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA => gmem_0_RDATA,
        m_axi_gmem_0_RLAST => gmem_0_RLAST,
        m_axi_gmem_0_RID => gmem_0_RID,
        m_axi_gmem_0_RFIFONUM => gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER => gmem_0_RUSER,
        m_axi_gmem_0_RRESP => gmem_0_RRESP,
        m_axi_gmem_0_BVALID => ap_const_logic_0,
        m_axi_gmem_0_BREADY => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP => ap_const_lv2_0,
        m_axi_gmem_0_BID => ap_const_lv1_0,
        m_axi_gmem_0_BUSER => ap_const_lv1_0,
        i_vec => i_vec,
        W1_vec => W1_vec,
        W2_vec => W2_vec,
        W3_vec => W3_vec,
        res_strm_din => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_res_strm_din,
        res_strm_full_n => res_strm_full_n,
        res_strm_write => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_res_strm_write,
        res_strm_num_data_valid => res_strm_num_data_valid,
        res_strm_fifo_cap => res_strm_fifo_cap);

    pull_tensor1d_U0 : component FFN_pull_tensor1d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pull_tensor1d_U0_ap_start,
        ap_done => pull_tensor1d_U0_ap_done,
        ap_continue => pull_tensor1d_U0_ap_continue,
        ap_idle => pull_tensor1d_U0_ap_idle,
        ap_ready => pull_tensor1d_U0_ap_ready,
        tsor_dout => o_vec_c_dout,
        tsor_empty_n => o_vec_c_empty_n,
        tsor_read => pull_tensor1d_U0_tsor_read,
        tsor_num_data_valid => o_vec_c_num_data_valid,
        tsor_fifo_cap => o_vec_c_fifo_cap,
        m_axi_gmem_0_AWVALID => pull_tensor1d_U0_m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY => gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR => pull_tensor1d_U0_m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID => pull_tensor1d_U0_m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN => pull_tensor1d_U0_m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE => pull_tensor1d_U0_m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST => pull_tensor1d_U0_m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK => pull_tensor1d_U0_m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE => pull_tensor1d_U0_m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT => pull_tensor1d_U0_m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS => pull_tensor1d_U0_m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION => pull_tensor1d_U0_m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER => pull_tensor1d_U0_m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID => pull_tensor1d_U0_m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY => gmem_0_WREADY,
        m_axi_gmem_0_WDATA => pull_tensor1d_U0_m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB => pull_tensor1d_U0_m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST => pull_tensor1d_U0_m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID => pull_tensor1d_U0_m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER => pull_tensor1d_U0_m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID => pull_tensor1d_U0_m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY => ap_const_logic_0,
        m_axi_gmem_0_ARADDR => pull_tensor1d_U0_m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID => pull_tensor1d_U0_m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN => pull_tensor1d_U0_m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE => pull_tensor1d_U0_m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST => pull_tensor1d_U0_m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK => pull_tensor1d_U0_m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE => pull_tensor1d_U0_m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT => pull_tensor1d_U0_m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS => pull_tensor1d_U0_m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION => pull_tensor1d_U0_m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER => pull_tensor1d_U0_m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID => ap_const_logic_0,
        m_axi_gmem_0_RREADY => pull_tensor1d_U0_m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA => ap_const_lv32_0,
        m_axi_gmem_0_RLAST => ap_const_logic_0,
        m_axi_gmem_0_RID => ap_const_lv1_0,
        m_axi_gmem_0_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_0_RUSER => ap_const_lv1_0,
        m_axi_gmem_0_RRESP => ap_const_lv2_0,
        m_axi_gmem_0_BVALID => gmem_0_BVALID,
        m_axi_gmem_0_BREADY => pull_tensor1d_U0_m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP => gmem_0_BRESP,
        m_axi_gmem_0_BID => gmem_0_BID,
        m_axi_gmem_0_BUSER => gmem_0_BUSER,
        res_strm_dout => res_strm_dout,
        res_strm_empty_n => res_strm_empty_n,
        res_strm_read => pull_tensor1d_U0_res_strm_read,
        res_strm_num_data_valid => res_strm_num_data_valid,
        res_strm_fifo_cap => res_strm_fifo_cap);

    o_vec_c_U : component FFN_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_o_vec_c_din,
        if_full_n => o_vec_c_full_n,
        if_write => entry_proc_U0_o_vec_c_write,
        if_dout => o_vec_c_dout,
        if_empty_n => o_vec_c_empty_n,
        if_read => pull_tensor1d_U0_tsor_read,
        if_num_data_valid => o_vec_c_num_data_valid,
        if_fifo_cap => o_vec_c_fifo_cap);

    res_strm_U : component FFN_fifo_w32_d64_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_res_strm_din,
        if_full_n => res_strm_full_n,
        if_write => Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_res_strm_write,
        if_dout => res_strm_dout,
        if_empty_n => res_strm_empty_n,
        if_read => pull_tensor1d_U0_res_strm_read,
        if_num_data_valid => res_strm_num_data_valid,
        if_fifo_cap => res_strm_fifo_cap);

    start_for_pull_tensor1d_U0_U : component FFN_start_for_pull_tensor1d_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pull_tensor1d_U0_din,
        if_full_n => start_for_pull_tensor1d_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_pull_tensor1d_U0_dout,
        if_empty_n => start_for_pull_tensor1d_U0_empty_n,
        if_read => pull_tensor1d_U0_ap_ready);





    ap_sync_reg_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready <= ap_sync_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_continue <= ap_const_logic_1;
    Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_start <= ((ap_sync_reg_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready xor ap_const_logic_1) and ap_start and ap_const_logic_1);
    ap_done <= pull_tensor1d_U0_ap_done;
    ap_idle <= (pull_tensor1d_U0_ap_idle and entry_proc_U0_ap_idle and Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready <= (ap_sync_reg_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready or Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start and ap_const_logic_1);
    gmem_0_BID <= ap_const_lv1_0;
    gmem_0_BRESP <= ap_const_lv2_0;
    gmem_0_BUSER <= ap_const_lv1_0;
    gmem_0_RID <= ap_const_lv1_0;
    gmem_0_RLAST <= ap_const_logic_0;
    gmem_0_RRESP <= ap_const_lv2_0;
    gmem_0_RUSER <= ap_const_lv1_0;
    pull_tensor1d_U0_ap_continue <= ap_const_logic_1;
    pull_tensor1d_U0_ap_start <= start_for_pull_tensor1d_U0_empty_n;
    start_for_pull_tensor1d_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
