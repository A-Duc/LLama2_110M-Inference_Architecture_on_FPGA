-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFN_pull_tensor1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tsor_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    tsor_empty_n : IN STD_LOGIC;
    tsor_read : OUT STD_LOGIC;
    tsor_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    tsor_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    res_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    res_strm_empty_n : IN STD_LOGIC;
    res_strm_read : OUT STD_LOGIC;
    res_strm_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    res_strm_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of FFN_pull_tensor1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_300 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2FF : STD_LOGIC_VECTOR (9 downto 0) := "1011111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal first_iter_0_reg_111 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_block_state2_io_grp1 : BOOLEAN;
    signal icmp_ln18_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp0_stage0_iter13_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln18_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal tsor_blk_n : STD_LOGIC;
    signal res_strm_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_219_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_219_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln18_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal i1_fu_70 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal i_fu_131_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_i1_load : STD_LOGIC_VECTOR (9 downto 0);
    signal tsor_read_local : STD_LOGIC;
    signal res_strm_read_local : STD_LOGIC;
    signal trunc_ln_fu_150_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_379 : BOOLEAN;
    signal ap_condition_288 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component FFN_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component FFN_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    first_iter_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_379)) then 
                    first_iter_0_reg_111 <= ap_const_lv1_0;
                elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    first_iter_0_reg_111 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_288)) then
                i1_fu_70 <= i_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln18_reg_219_pp0_iter10_reg <= icmp_ln18_reg_219_pp0_iter9_reg;
                icmp_ln18_reg_219_pp0_iter11_reg <= icmp_ln18_reg_219_pp0_iter10_reg;
                icmp_ln18_reg_219_pp0_iter12_reg <= icmp_ln18_reg_219_pp0_iter11_reg;
                icmp_ln18_reg_219_pp0_iter2_reg <= icmp_ln18_reg_219_pp0_iter1_reg;
                icmp_ln18_reg_219_pp0_iter3_reg <= icmp_ln18_reg_219_pp0_iter2_reg;
                icmp_ln18_reg_219_pp0_iter4_reg <= icmp_ln18_reg_219_pp0_iter3_reg;
                icmp_ln18_reg_219_pp0_iter5_reg <= icmp_ln18_reg_219_pp0_iter4_reg;
                icmp_ln18_reg_219_pp0_iter6_reg <= icmp_ln18_reg_219_pp0_iter5_reg;
                icmp_ln18_reg_219_pp0_iter7_reg <= icmp_ln18_reg_219_pp0_iter6_reg;
                icmp_ln18_reg_219_pp0_iter8_reg <= icmp_ln18_reg_219_pp0_iter7_reg;
                icmp_ln18_reg_219_pp0_iter9_reg <= icmp_ln18_reg_219_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln18_reg_219 <= icmp_ln18_fu_137_p2;
                icmp_ln18_reg_219_pp0_iter1_reg <= icmp_ln18_reg_219;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, res_strm_empty_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state14_pp0_stage0_iter13_grp1, ap_start_int)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13_grp1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (res_strm_empty_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, m_axi_gmem_0_WREADY, res_strm_empty_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state2_io_grp1, ap_block_state14_pp0_stage0_iter13_grp1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13_grp1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((m_axi_gmem_0_WREADY = ap_const_logic_0) or (res_strm_empty_n = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io_grp1) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_grp0_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001_grp0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, m_axi_gmem_0_WREADY, res_strm_empty_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state2_io_grp1, ap_block_state14_pp0_stage0_iter13_grp1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13_grp1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((m_axi_gmem_0_WREADY = ap_const_logic_0) or (res_strm_empty_n = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io_grp1) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, m_axi_gmem_0_WREADY, res_strm_empty_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1_grp1, ap_block_state2_io_grp1, ap_block_state14_pp0_stage0_iter13_grp1, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13_grp1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((m_axi_gmem_0_WREADY = ap_const_logic_0) or (res_strm_empty_n = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io_grp1) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_grp0_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone_grp0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state14_pp0_stage0_iter13_grp1_assign_proc : process(m_axi_gmem_0_BVALID, icmp_ln18_reg_219_pp0_iter12_reg)
    begin
                ap_block_state14_pp0_stage0_iter13_grp1 <= ((icmp_ln18_reg_219_pp0_iter12_reg = ap_const_lv1_1) and (m_axi_gmem_0_BVALID = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_io_grp1_assign_proc : process(m_axi_gmem_0_AWREADY, first_iter_0_reg_111)
    begin
                ap_block_state2_io_grp1 <= ((m_axi_gmem_0_AWREADY = ap_const_logic_0) and (first_iter_0_reg_111 = ap_const_lv1_1));
    end process;


    ap_block_state2_pp0_stage0_iter1_grp1_assign_proc : process(tsor_empty_n, first_iter_0_reg_111)
    begin
                ap_block_state2_pp0_stage0_iter1_grp1 <= ((tsor_empty_n = ap_const_logic_0) and (first_iter_0_reg_111 = ap_const_lv1_1));
    end process;


    ap_condition_288_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_288 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_379_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln18_reg_219, ap_block_pp0_stage0_11001)
    begin
                ap_condition_379 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_219 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln18_fu_137_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_fu_137_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter13_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, i1_fu_70, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i1_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i1_load <= i1_fu_70;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_0_AWREADY, first_iter_0_reg_111, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (first_iter_0_reg_111 = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_0_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_gmem_0_BVALID, icmp_ln18_reg_219_pp0_iter12_reg, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (icmp_ln18_reg_219_pp0_iter12_reg = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_0_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_0_WREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            gmem_blk_n_W <= m_axi_gmem_0_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    i_fu_131_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i1_load) + unsigned(ap_const_lv10_1));
    icmp_ln18_fu_137_p2 <= "1" when (ap_sig_allocacmp_i1_load = ap_const_lv10_2FF) else "0";
    m_axi_gmem_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem_0_AWADDR <= sext_ln18_fu_160_p1;
    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_0_AWLEN <= ap_const_lv64_300(32 - 1 downto 0);
    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_0_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_111, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (first_iter_0_reg_111 = ap_const_lv1_1))) then 
            m_axi_gmem_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_0_BREADY_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln18_reg_219_pp0_iter12_reg, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln18_reg_219_pp0_iter12_reg = ap_const_lv1_1))) then 
            m_axi_gmem_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_RREADY <= ap_const_logic_0;
    m_axi_gmem_0_WDATA <= res_strm_dout;
    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem_0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            m_axi_gmem_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    res_strm_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_strm_empty_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            res_strm_blk_n <= res_strm_empty_n;
        else 
            res_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_strm_read <= res_strm_read_local;

    res_strm_read_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            res_strm_read_local <= ap_const_logic_1;
        else 
            res_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln18_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_150_p4),64));

    trunc_ln_fu_150_p4 <= tsor_dout(63 downto 2);

    tsor_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tsor_empty_n, first_iter_0_reg_111, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (first_iter_0_reg_111 = ap_const_lv1_1))) then 
            tsor_blk_n <= tsor_empty_n;
        else 
            tsor_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsor_read <= tsor_read_local;

    tsor_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_111, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (first_iter_0_reg_111 = ap_const_lv1_1))) then 
            tsor_read_local <= ap_const_logic_1;
        else 
            tsor_read_local <= ap_const_logic_0;
        end if; 
    end process;

end behav;
