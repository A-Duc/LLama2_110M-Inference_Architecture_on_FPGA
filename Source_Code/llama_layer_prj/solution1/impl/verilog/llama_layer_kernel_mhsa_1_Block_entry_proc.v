// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module llama_layer_kernel_mhsa_1_Block_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer,
        position,
        key_cache,
        value_cache,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [3:0] layer;
input  [31:0] position;
input  [63:0] key_cache;
input  [63:0] value_cache;
output  [22:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [32:0] ap_return_3;
output  [31:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[22:0] ap_return_0;
reg[63:0] ap_return_1;
reg[63:0] ap_return_2;
reg[32:0] ap_return_3;
reg[31:0] ap_return_4;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire  signed [31:0] position_cast_fu_66_p0;
wire   [20:0] tmp_fu_78_p3;
wire   [22:0] p_shl_fu_70_p3;
wire   [22:0] p_shl11_fu_86_p1;
wire   [22:0] mul7_out_0_fu_90_p2;
wire  signed [31:0] empty_fu_100_p0;
wire  signed [31:0] empty_259_fu_106_p0;
wire   [31:0] empty_fu_100_p2;
wire   [31:0] empty_259_fu_106_p2;
wire   [31:0] mul8_fu_112_p2;
wire   [31:0] mul7_cast_fu_96_p1;
wire   [31:0] add_fu_118_p2;
wire   [33:0] shl_ln_fu_124_p3;
wire  signed [63:0] sext_ln54_fu_132_p1;
wire  signed [32:0] position_cast_fu_66_p1;
wire  signed [31:0] add126_out_0_fu_154_p0;
wire   [63:0] add_ln54_fu_136_p2;
wire   [63:0] add_ln54_2_fu_142_p2;
wire   [32:0] add_ln67_fu_148_p2;
wire   [31:0] add126_out_0_fu_154_p2;
reg   [22:0] ap_return_0_preg;
reg   [63:0] ap_return_1_preg;
reg   [63:0] ap_return_2_preg;
reg   [32:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 23'd0;
#0 ap_return_1_preg = 64'd0;
#0 ap_return_2_preg = 64'd0;
#0 ap_return_3_preg = 33'd0;
#0 ap_return_4_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[17] <= 1'b0;
        ap_return_0_preg[18] <= 1'b0;
        ap_return_0_preg[19] <= 1'b0;
        ap_return_0_preg[20] <= 1'b0;
        ap_return_0_preg[21] <= 1'b0;
        ap_return_0_preg[22] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[22 : 17] <= mul7_out_0_fu_90_p2[22 : 17];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 64'd0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= add_ln54_fu_136_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 64'd0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_2_preg <= add_ln54_2_fu_142_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 33'd0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_3_preg <= add_ln67_fu_148_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_4_preg <= add126_out_0_fu_154_p2;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = mul7_out_0_fu_90_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = add_ln54_fu_136_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = add_ln54_2_fu_142_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = add_ln67_fu_148_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = add126_out_0_fu_154_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add126_out_0_fu_154_p0 = position;

assign add126_out_0_fu_154_p2 = ($signed(add126_out_0_fu_154_p0) + $signed(32'd1));

assign add_fu_118_p2 = (mul8_fu_112_p2 + mul7_cast_fu_96_p1);

assign add_ln54_2_fu_142_p2 = ($signed(sext_ln54_fu_132_p1) + $signed(value_cache));

assign add_ln54_fu_136_p2 = ($signed(sext_ln54_fu_132_p1) + $signed(key_cache));

assign add_ln67_fu_148_p2 = ($signed(position_cast_fu_66_p1) + $signed(33'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign empty_259_fu_106_p0 = position;

assign empty_259_fu_106_p2 = empty_259_fu_106_p0 << 32'd8;

assign empty_fu_100_p0 = position;

assign empty_fu_100_p2 = empty_fu_100_p0 << 32'd10;

assign mul7_cast_fu_96_p1 = mul7_out_0_fu_90_p2;

assign mul7_out_0_fu_90_p2 = (p_shl_fu_70_p3 - p_shl11_fu_86_p1);

assign mul8_fu_112_p2 = (empty_fu_100_p2 - empty_259_fu_106_p2);

assign p_shl11_fu_86_p1 = tmp_fu_78_p3;

assign p_shl_fu_70_p3 = {{layer}, {19'd0}};

assign position_cast_fu_66_p0 = position;

assign position_cast_fu_66_p1 = position_cast_fu_66_p0;

assign sext_ln54_fu_132_p1 = $signed(shl_ln_fu_124_p3);

assign shl_ln_fu_124_p3 = {{add_fu_118_p2}, {2'd0}};

assign tmp_fu_78_p3 = {{layer}, {17'd0}};

always @ (posedge ap_clk) begin
    ap_return_0_preg[16:0] <= 17'b00000000000000000;
end

endmodule //llama_layer_kernel_mhsa_1_Block_entry_proc
