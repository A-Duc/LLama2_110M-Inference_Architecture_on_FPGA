// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module llama_layer_llama_layer_Pipeline_VITIS_LOOP_150_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        sext_ln100,
        current_token_address0,
        current_token_ce0,
        current_token_q0,
        current_token_19_address0,
        current_token_19_ce0,
        current_token_19_q0,
        current_token_20_address0,
        current_token_20_ce0,
        current_token_20_q0,
        current_token_21_address0,
        current_token_21_ce0,
        current_token_21_q0,
        current_token_22_address0,
        current_token_22_ce0,
        current_token_22_q0,
        current_token_23_address0,
        current_token_23_ce0,
        current_token_23_q0,
        current_token_24_address0,
        current_token_24_ce0,
        current_token_24_q0,
        current_token_25_address0,
        current_token_25_ce0,
        current_token_25_q0,
        current_token_26_address0,
        current_token_26_ce0,
        current_token_26_q0,
        current_token_27_address0,
        current_token_27_ce0,
        current_token_27_q0,
        p_ZZ11llama_layerE13current_token_10_address0,
        p_ZZ11llama_layerE13current_token_10_ce0,
        p_ZZ11llama_layerE13current_token_10_q0,
        p_ZZ11llama_layerE13current_token_11_address0,
        p_ZZ11llama_layerE13current_token_11_ce0,
        p_ZZ11llama_layerE13current_token_11_q0,
        p_ZZ11llama_layerE13current_token_12_address0,
        p_ZZ11llama_layerE13current_token_12_ce0,
        p_ZZ11llama_layerE13current_token_12_q0,
        p_ZZ11llama_layerE13current_token_13_address0,
        p_ZZ11llama_layerE13current_token_13_ce0,
        p_ZZ11llama_layerE13current_token_13_q0,
        p_ZZ11llama_layerE13current_token_14_address0,
        p_ZZ11llama_layerE13current_token_14_ce0,
        p_ZZ11llama_layerE13current_token_14_q0,
        p_ZZ11llama_layerE13current_token_15_address0,
        p_ZZ11llama_layerE13current_token_15_ce0,
        p_ZZ11llama_layerE13current_token_15_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [63:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [31:0] m_axi_gmem0_0_WDATA;
output  [3:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [63:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [31:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [12:0] m_axi_gmem0_0_RFIFONUM;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
input  [61:0] sext_ln100;
output  [5:0] current_token_address0;
output   current_token_ce0;
input  [31:0] current_token_q0;
output  [5:0] current_token_19_address0;
output   current_token_19_ce0;
input  [31:0] current_token_19_q0;
output  [5:0] current_token_20_address0;
output   current_token_20_ce0;
input  [31:0] current_token_20_q0;
output  [5:0] current_token_21_address0;
output   current_token_21_ce0;
input  [31:0] current_token_21_q0;
output  [5:0] current_token_22_address0;
output   current_token_22_ce0;
input  [31:0] current_token_22_q0;
output  [5:0] current_token_23_address0;
output   current_token_23_ce0;
input  [31:0] current_token_23_q0;
output  [5:0] current_token_24_address0;
output   current_token_24_ce0;
input  [31:0] current_token_24_q0;
output  [5:0] current_token_25_address0;
output   current_token_25_ce0;
input  [31:0] current_token_25_q0;
output  [5:0] current_token_26_address0;
output   current_token_26_ce0;
input  [31:0] current_token_26_q0;
output  [5:0] current_token_27_address0;
output   current_token_27_ce0;
input  [31:0] current_token_27_q0;
output  [5:0] p_ZZ11llama_layerE13current_token_10_address0;
output   p_ZZ11llama_layerE13current_token_10_ce0;
input  [31:0] p_ZZ11llama_layerE13current_token_10_q0;
output  [5:0] p_ZZ11llama_layerE13current_token_11_address0;
output   p_ZZ11llama_layerE13current_token_11_ce0;
input  [31:0] p_ZZ11llama_layerE13current_token_11_q0;
output  [5:0] p_ZZ11llama_layerE13current_token_12_address0;
output   p_ZZ11llama_layerE13current_token_12_ce0;
input  [31:0] p_ZZ11llama_layerE13current_token_12_q0;
output  [5:0] p_ZZ11llama_layerE13current_token_13_address0;
output   p_ZZ11llama_layerE13current_token_13_ce0;
input  [31:0] p_ZZ11llama_layerE13current_token_13_q0;
output  [5:0] p_ZZ11llama_layerE13current_token_14_address0;
output   p_ZZ11llama_layerE13current_token_14_ce0;
input  [31:0] p_ZZ11llama_layerE13current_token_14_q0;
output  [5:0] p_ZZ11llama_layerE13current_token_15_address0;
output   p_ZZ11llama_layerE13current_token_15_ce0;
input  [31:0] p_ZZ11llama_layerE13current_token_15_q0;

reg ap_idle;
reg m_axi_gmem0_0_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln150_fu_374_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln150_fu_380_p1;
reg   [3:0] trunc_ln150_reg_588;
wire   [63:0] zext_ln150_fu_394_p1;
wire    ap_block_pp0_stage0_01001;
reg   [9:0] i_10_fu_130;
wire   [9:0] add_ln150_fu_368_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i;
reg    current_token_ce0_local;
reg    current_token_19_ce0_local;
reg    current_token_20_ce0_local;
reg    current_token_21_ce0_local;
reg    current_token_22_ce0_local;
reg    current_token_23_ce0_local;
reg    current_token_24_ce0_local;
reg    current_token_25_ce0_local;
reg    current_token_26_ce0_local;
reg    current_token_27_ce0_local;
reg    p_ZZ11llama_layerE13current_token_10_ce0_local;
reg    p_ZZ11llama_layerE13current_token_11_ce0_local;
reg    p_ZZ11llama_layerE13current_token_12_ce0_local;
reg    p_ZZ11llama_layerE13current_token_13_ce0_local;
reg    p_ZZ11llama_layerE13current_token_14_ce0_local;
reg    p_ZZ11llama_layerE13current_token_15_ce0_local;
wire   [5:0] lshr_ln6_fu_384_p4;
wire   [31:0] tmp_1_fu_489_p33;
wire   [31:0] tmp_1_fu_489_p35;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [3:0] tmp_1_fu_489_p1;
wire   [3:0] tmp_1_fu_489_p3;
wire   [3:0] tmp_1_fu_489_p5;
wire   [3:0] tmp_1_fu_489_p7;
wire   [3:0] tmp_1_fu_489_p9;
wire   [3:0] tmp_1_fu_489_p11;
wire   [3:0] tmp_1_fu_489_p13;
wire   [3:0] tmp_1_fu_489_p15;
wire  signed [3:0] tmp_1_fu_489_p17;
wire  signed [3:0] tmp_1_fu_489_p19;
wire  signed [3:0] tmp_1_fu_489_p21;
wire  signed [3:0] tmp_1_fu_489_p23;
wire  signed [3:0] tmp_1_fu_489_p25;
wire  signed [3:0] tmp_1_fu_489_p27;
wire  signed [3:0] tmp_1_fu_489_p29;
wire  signed [3:0] tmp_1_fu_489_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_10_fu_130 = 10'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) llama_layer_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U1610(
    .din0(current_token_q0),
    .din1(current_token_19_q0),
    .din2(current_token_20_q0),
    .din3(current_token_21_q0),
    .din4(current_token_22_q0),
    .din5(current_token_23_q0),
    .din6(current_token_24_q0),
    .din7(current_token_25_q0),
    .din8(current_token_26_q0),
    .din9(current_token_27_q0),
    .din10(p_ZZ11llama_layerE13current_token_10_q0),
    .din11(p_ZZ11llama_layerE13current_token_11_q0),
    .din12(p_ZZ11llama_layerE13current_token_12_q0),
    .din13(p_ZZ11llama_layerE13current_token_13_q0),
    .din14(p_ZZ11llama_layerE13current_token_14_q0),
    .din15(p_ZZ11llama_layerE13current_token_15_q0),
    .def(tmp_1_fu_489_p33),
    .sel(trunc_ln150_reg_588),
    .dout(tmp_1_fu_489_p35)
);

llama_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln150_fu_374_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_10_fu_130 <= add_ln150_fu_368_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_10_fu_130 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln150_reg_588 <= trunc_ln150_fu_380_p1;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 10'd0;
    end else begin
        ap_sig_allocacmp_i = i_10_fu_130;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_19_ce0_local = 1'b1;
    end else begin
        current_token_19_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_20_ce0_local = 1'b1;
    end else begin
        current_token_20_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_21_ce0_local = 1'b1;
    end else begin
        current_token_21_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_22_ce0_local = 1'b1;
    end else begin
        current_token_22_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_23_ce0_local = 1'b1;
    end else begin
        current_token_23_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_24_ce0_local = 1'b1;
    end else begin
        current_token_24_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_25_ce0_local = 1'b1;
    end else begin
        current_token_25_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_26_ce0_local = 1'b1;
    end else begin
        current_token_26_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_27_ce0_local = 1'b1;
    end else begin
        current_token_27_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_token_ce0_local = 1'b1;
    end else begin
        current_token_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem0_blk_n_W = m_axi_gmem0_0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem0_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZZ11llama_layerE13current_token_10_ce0_local = 1'b1;
    end else begin
        p_ZZ11llama_layerE13current_token_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZZ11llama_layerE13current_token_11_ce0_local = 1'b1;
    end else begin
        p_ZZ11llama_layerE13current_token_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZZ11llama_layerE13current_token_12_ce0_local = 1'b1;
    end else begin
        p_ZZ11llama_layerE13current_token_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZZ11llama_layerE13current_token_13_ce0_local = 1'b1;
    end else begin
        p_ZZ11llama_layerE13current_token_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZZ11llama_layerE13current_token_14_ce0_local = 1'b1;
    end else begin
        p_ZZ11llama_layerE13current_token_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZZ11llama_layerE13current_token_15_ce0_local = 1'b1;
    end else begin
        p_ZZ11llama_layerE13current_token_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln150_fu_368_p2 = (ap_sig_allocacmp_i + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign current_token_19_address0 = zext_ln150_fu_394_p1;

assign current_token_19_ce0 = current_token_19_ce0_local;

assign current_token_20_address0 = zext_ln150_fu_394_p1;

assign current_token_20_ce0 = current_token_20_ce0_local;

assign current_token_21_address0 = zext_ln150_fu_394_p1;

assign current_token_21_ce0 = current_token_21_ce0_local;

assign current_token_22_address0 = zext_ln150_fu_394_p1;

assign current_token_22_ce0 = current_token_22_ce0_local;

assign current_token_23_address0 = zext_ln150_fu_394_p1;

assign current_token_23_ce0 = current_token_23_ce0_local;

assign current_token_24_address0 = zext_ln150_fu_394_p1;

assign current_token_24_ce0 = current_token_24_ce0_local;

assign current_token_25_address0 = zext_ln150_fu_394_p1;

assign current_token_25_ce0 = current_token_25_ce0_local;

assign current_token_26_address0 = zext_ln150_fu_394_p1;

assign current_token_26_ce0 = current_token_26_ce0_local;

assign current_token_27_address0 = zext_ln150_fu_394_p1;

assign current_token_27_ce0 = current_token_27_ce0_local;

assign current_token_address0 = zext_ln150_fu_394_p1;

assign current_token_ce0 = current_token_ce0_local;

assign icmp_ln150_fu_374_p2 = ((ap_sig_allocacmp_i == 10'd768) ? 1'b1 : 1'b0);

assign lshr_ln6_fu_384_p4 = {{ap_sig_allocacmp_i[9:4]}};

assign m_axi_gmem0_0_ARADDR = 64'd0;

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLEN = 32'd0;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_ARVALID = 1'b0;

assign m_axi_gmem0_0_AWADDR = 64'd0;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 32'd0;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_AWVALID = 1'b0;

assign m_axi_gmem0_0_BREADY = 1'b0;

assign m_axi_gmem0_0_RREADY = 1'b0;

assign m_axi_gmem0_0_WDATA = tmp_1_fu_489_p35;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 4'd15;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign p_ZZ11llama_layerE13current_token_10_address0 = zext_ln150_fu_394_p1;

assign p_ZZ11llama_layerE13current_token_10_ce0 = p_ZZ11llama_layerE13current_token_10_ce0_local;

assign p_ZZ11llama_layerE13current_token_11_address0 = zext_ln150_fu_394_p1;

assign p_ZZ11llama_layerE13current_token_11_ce0 = p_ZZ11llama_layerE13current_token_11_ce0_local;

assign p_ZZ11llama_layerE13current_token_12_address0 = zext_ln150_fu_394_p1;

assign p_ZZ11llama_layerE13current_token_12_ce0 = p_ZZ11llama_layerE13current_token_12_ce0_local;

assign p_ZZ11llama_layerE13current_token_13_address0 = zext_ln150_fu_394_p1;

assign p_ZZ11llama_layerE13current_token_13_ce0 = p_ZZ11llama_layerE13current_token_13_ce0_local;

assign p_ZZ11llama_layerE13current_token_14_address0 = zext_ln150_fu_394_p1;

assign p_ZZ11llama_layerE13current_token_14_ce0 = p_ZZ11llama_layerE13current_token_14_ce0_local;

assign p_ZZ11llama_layerE13current_token_15_address0 = zext_ln150_fu_394_p1;

assign p_ZZ11llama_layerE13current_token_15_ce0 = p_ZZ11llama_layerE13current_token_15_ce0_local;

assign tmp_1_fu_489_p33 = 'bx;

assign trunc_ln150_fu_380_p1 = ap_sig_allocacmp_i[3:0];

assign zext_ln150_fu_394_p1 = lshr_ln6_fu_384_p4;

endmodule //llama_layer_llama_layer_Pipeline_VITIS_LOOP_150_5
