// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module llama_layer_kernel_softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_vec_address0,
        i_vec_ce0,
        i_vec_we0,
        i_vec_d0,
        i_vec_q0,
        vec_size
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_state4 = 11'd4;
parameter    ap_ST_fsm_state5 = 11'd8;
parameter    ap_ST_fsm_pp1_stage0 = 11'd16;
parameter    ap_ST_fsm_pp1_stage1 = 11'd32;
parameter    ap_ST_fsm_state9 = 11'd64;
parameter    ap_ST_fsm_pp2_stage0 = 11'd128;
parameter    ap_ST_fsm_state23 = 11'd256;
parameter    ap_ST_fsm_pp3_stage0 = 11'd512;
parameter    ap_ST_fsm_state37 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] i_vec_address0;
output   i_vec_ce0;
output   i_vec_we0;
output  [31:0] i_vec_d0;
input  [31:0] i_vec_q0;
input  [31:0] vec_size;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [30:0] i_reg_142;
reg   [30:0] i_11_reg_153;
reg   [31:0] max_val_1_reg_165;
reg   [30:0] i_12_reg_186;
reg   [31:0] sum_reg_197;
reg   [30:0] i_13_reg_209;
reg   [31:0] reg_248;
wire    ap_CS_fsm_state5;
wire    ap_block_pp3_stage0_11001;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0_11001;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire   [30:0] add_ln9_fu_256_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln9_fu_266_p2;
reg   [0:0] icmp_ln9_reg_640;
wire   [63:0] zext_ln9_fu_271_p1;
reg   [63:0] zext_ln9_reg_644;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln16_fu_296_p2;
reg   [0:0] icmp_ln16_reg_659;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln16_1_fu_325_p2;
reg   [0:0] icmp_ln16_1_reg_668;
reg   [31:0] max_val_2_reg_677;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
reg    ap_enable_reg_pp1_iter0_reg;
wire    ap_block_pp1_stage1_11001;
wire   [0:0] and_ln20_1_fu_420_p2;
reg   [0:0] and_ln20_1_reg_682;
reg   [31:0] max_val_4_reg_687;
wire   [30:0] add_ln16_1_fu_426_p2;
reg   [30:0] add_ln16_1_reg_695;
wire   [31:0] max_val_3_fu_432_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] max_val_5_fu_529_p3;
wire   [30:0] add_ln26_fu_536_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln26_fu_546_p2;
reg   [0:0] icmp_ln26_reg_715;
reg   [0:0] icmp_ln26_reg_715_pp2_iter1_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter2_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter3_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter4_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter5_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter6_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter7_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter8_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter9_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter10_reg;
reg   [0:0] icmp_ln26_reg_715_pp2_iter11_reg;
reg   [8:0] vec_local_addr_4_reg_719;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter1_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter2_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter3_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter4_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter5_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter6_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter7_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter8_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter9_reg;
reg   [8:0] vec_local_addr_4_reg_719_pp2_iter10_reg;
wire   [31:0] grp_fu_220_p2;
reg   [31:0] sub_reg_726;
wire   [31:0] grp_fu_242_p2;
wire   [31:0] grp_fu_225_p2;
reg    ap_enable_reg_pp2_iter12;
wire   [30:0] add_ln34_fu_586_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln34_fu_596_p2;
reg   [0:0] icmp_ln34_reg_747;
reg   [0:0] icmp_ln34_reg_747_pp3_iter1_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter2_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter3_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter4_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter5_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter6_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter7_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter8_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter9_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter10_reg;
reg   [0:0] icmp_ln34_reg_747_pp3_iter11_reg;
wire   [63:0] zext_ln34_fu_601_p1;
reg   [63:0] zext_ln34_reg_751;
reg   [63:0] zext_ln34_reg_751_pp3_iter1_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter2_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter3_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter4_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter5_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter6_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter7_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter8_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter9_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter10_reg;
reg   [63:0] zext_ln34_reg_751_pp3_iter11_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage1_subdone;
reg    ap_predicate_tran8to9_state7;
reg    ap_condition_pp1_flush_enable;
wire    ap_block_pp1_stage0_subdone;
wire    ap_CS_fsm_state9;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state10;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
wire    ap_CS_fsm_state23;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state24;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter10;
reg    ap_enable_reg_pp3_iter11;
reg    ap_enable_reg_pp3_iter12;
wire   [31:0] vec_local_q0;
wire   [31:0] vec_local_q1;
reg   [30:0] ap_phi_mux_i_11_phi_fu_157_p4;
wire    ap_block_pp1_stage0;
reg   [31:0] max_val_0_lcssa_reg_175;
reg   [31:0] ap_phi_mux_sum_phi_fu_201_p4;
wire    ap_block_pp2_stage0;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln15_fu_301_p1;
wire   [63:0] zext_ln15_12_fu_316_p1;
wire   [63:0] zext_ln26_fu_551_p1;
wire    ap_block_pp3_stage0;
reg    i_vec_ce0_local;
reg   [8:0] i_vec_address0_local;
reg    i_vec_we0_local;
wire   [31:0] grp_fu_230_p2;
reg    vec_local_we0_local;
reg    vec_local_ce0_local;
reg   [8:0] vec_local_address0_local;
reg    vec_local_ce1_local;
reg   [8:0] vec_local_address1_local;
reg    vec_local_we1_local;
reg   [31:0] grp_fu_220_p0;
reg   [31:0] grp_fu_220_p1;
reg   [31:0] grp_fu_225_p0;
reg   [31:0] grp_fu_225_p1;
reg   [31:0] grp_fu_236_p0;
reg   [31:0] grp_fu_236_p1;
wire    ap_block_pp1_stage1;
wire   [31:0] zext_ln9_1_fu_262_p1;
wire   [31:0] zext_ln15_11_fu_292_p1;
wire   [30:0] add_ln16_fu_310_p2;
wire   [31:0] zext_ln15_13_fu_321_p1;
wire   [31:0] bitcast_ln20_fu_334_p1;
wire   [31:0] bitcast_ln20_1_fu_352_p1;
wire   [7:0] tmp_5_fu_338_p4;
wire   [22:0] trunc_ln20_fu_348_p1;
wire   [0:0] icmp_ln20_1_fu_376_p2;
wire   [0:0] icmp_ln20_fu_370_p2;
wire   [7:0] tmp_6_fu_356_p4;
wire   [22:0] trunc_ln20_1_fu_366_p1;
wire   [0:0] icmp_ln20_3_fu_394_p2;
wire   [0:0] icmp_ln20_2_fu_388_p2;
wire   [0:0] or_ln20_1_fu_400_p2;
wire   [0:0] or_ln20_fu_382_p2;
wire   [0:0] and_ln20_fu_414_p2;
wire   [0:0] grp_fu_236_p2;
wire   [31:0] bitcast_ln20_2_fu_439_p1;
wire   [31:0] bitcast_ln20_3_fu_456_p1;
wire   [7:0] tmp_8_fu_442_p4;
wire   [22:0] trunc_ln20_2_fu_452_p1;
wire   [0:0] icmp_ln20_5_fu_480_p2;
wire   [0:0] icmp_ln20_4_fu_474_p2;
wire   [7:0] tmp_9_fu_460_p4;
wire   [22:0] trunc_ln20_3_fu_470_p1;
wire   [0:0] icmp_ln20_7_fu_498_p2;
wire   [0:0] icmp_ln20_6_fu_492_p2;
wire   [0:0] or_ln20_3_fu_504_p2;
wire   [0:0] or_ln20_2_fu_486_p2;
wire   [0:0] and_ln20_2_fu_517_p2;
wire   [0:0] and_ln20_3_fu_523_p2;
wire   [31:0] zext_ln26_1_fu_542_p1;
wire   [31:0] zext_ln34_1_fu_592_p1;
wire    ap_block_pp1_stage1_00001;
wire    ap_block_pp1_stage0_00001;
wire    ap_CS_fsm_state37;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state37_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0_reg = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter12 = 1'b0;
end

llama_layer_kernel_softmax_vec_local_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
vec_local_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec_local_address0_local),
    .ce0(vec_local_ce0_local),
    .we0(vec_local_we0_local),
    .d0(i_vec_q0),
    .q0(vec_local_q0),
    .address1(vec_local_address1_local),
    .ce1(vec_local_ce1_local),
    .we1(vec_local_we1_local),
    .d1(grp_fu_242_p2),
    .q1(vec_local_q1)
);

llama_layer_fsub_32ns_32ns_32_1_primitive_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_1_primitive_dsp_1_U884(
    .din0(grp_fu_220_p0),
    .din1(grp_fu_220_p1),
    .dout(grp_fu_220_p2)
);

llama_layer_fadd_32ns_32ns_32_1_primitive_dsp_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_1_primitive_dsp_1_x_U885(
    .din0(grp_fu_225_p0),
    .din1(grp_fu_225_p1),
    .dout(grp_fu_225_p2)
);

llama_layer_fdiv_32ns_32ns_32_11_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_11_no_dsp_1_U886(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_248),
    .din1(sum_reg_197),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

llama_layer_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U887(
    .din0(grp_fu_236_p0),
    .din1(grp_fu_236_p1),
    .opcode(5'd2),
    .dout(grp_fu_236_p2)
);

llama_layer_fexp_32ns_32ns_32_9_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fexp_32ns_32ns_32_9_med_dsp_1_U888(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(sub_reg_726),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state10))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state10)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state24))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state24)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state24);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp3_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_11_reg_153 <= 31'd1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_1_reg_668 == 1'd1) & (icmp_ln16_reg_659 == 1'd1))) begin
        i_11_reg_153 <= add_ln16_1_reg_695;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_12_reg_186 <= 31'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln26_fu_546_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_12_reg_186 <= add_ln26_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_13_reg_209 <= 31'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln34_fu_596_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_13_reg_209 <= add_ln34_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_142 <= 31'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_142 <= add_ln9_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_1_reg_668 == 1'd0) & (icmp_ln16_reg_659 == 1'd1))) begin
        max_val_0_lcssa_reg_175 <= max_val_3_fu_432_p3;
    end else if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (icmp_ln16_reg_659 == 1'd0))) begin
        max_val_0_lcssa_reg_175 <= max_val_1_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_val_1_reg_165 <= vec_local_q0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_1_reg_668 == 1'd1) & (icmp_ln16_reg_659 == 1'd1))) begin
        max_val_1_reg_165 <= max_val_5_fu_529_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        reg_248 <= vec_local_q1;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reg_248 <= vec_local_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_reg_197 <= 32'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter12 == 1'b1) & (icmp_ln26_reg_715_pp2_iter11_reg == 1'd1))) begin
        sum_reg_197 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        add_ln16_1_reg_695 <= add_ln16_1_fu_426_p2;
        max_val_2_reg_677 <= vec_local_q1;
        max_val_4_reg_687 <= vec_local_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        and_ln20_1_reg_682 <= and_ln20_1_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_220_p0 <= vec_local_q0;
        grp_fu_220_p1 <= max_val_0_lcssa_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        grp_fu_225_p0 <= ap_phi_mux_sum_phi_fu_201_p4;
        grp_fu_225_p1 <= grp_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln16_1_reg_668 <= icmp_ln16_1_fu_325_p2;
        icmp_ln16_reg_659 <= icmp_ln16_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln26_reg_715 <= icmp_ln26_fu_546_p2;
        icmp_ln26_reg_715_pp2_iter1_reg <= icmp_ln26_reg_715;
        vec_local_addr_4_reg_719 <= zext_ln26_fu_551_p1;
        vec_local_addr_4_reg_719_pp2_iter1_reg <= vec_local_addr_4_reg_719;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln26_reg_715_pp2_iter10_reg <= icmp_ln26_reg_715_pp2_iter9_reg;
        icmp_ln26_reg_715_pp2_iter11_reg <= icmp_ln26_reg_715_pp2_iter10_reg;
        icmp_ln26_reg_715_pp2_iter2_reg <= icmp_ln26_reg_715_pp2_iter1_reg;
        icmp_ln26_reg_715_pp2_iter3_reg <= icmp_ln26_reg_715_pp2_iter2_reg;
        icmp_ln26_reg_715_pp2_iter4_reg <= icmp_ln26_reg_715_pp2_iter3_reg;
        icmp_ln26_reg_715_pp2_iter5_reg <= icmp_ln26_reg_715_pp2_iter4_reg;
        icmp_ln26_reg_715_pp2_iter6_reg <= icmp_ln26_reg_715_pp2_iter5_reg;
        icmp_ln26_reg_715_pp2_iter7_reg <= icmp_ln26_reg_715_pp2_iter6_reg;
        icmp_ln26_reg_715_pp2_iter8_reg <= icmp_ln26_reg_715_pp2_iter7_reg;
        icmp_ln26_reg_715_pp2_iter9_reg <= icmp_ln26_reg_715_pp2_iter8_reg;
        sub_reg_726 <= grp_fu_220_p2;
        vec_local_addr_4_reg_719_pp2_iter10_reg <= vec_local_addr_4_reg_719_pp2_iter9_reg;
        vec_local_addr_4_reg_719_pp2_iter2_reg <= vec_local_addr_4_reg_719_pp2_iter1_reg;
        vec_local_addr_4_reg_719_pp2_iter3_reg <= vec_local_addr_4_reg_719_pp2_iter2_reg;
        vec_local_addr_4_reg_719_pp2_iter4_reg <= vec_local_addr_4_reg_719_pp2_iter3_reg;
        vec_local_addr_4_reg_719_pp2_iter5_reg <= vec_local_addr_4_reg_719_pp2_iter4_reg;
        vec_local_addr_4_reg_719_pp2_iter6_reg <= vec_local_addr_4_reg_719_pp2_iter5_reg;
        vec_local_addr_4_reg_719_pp2_iter7_reg <= vec_local_addr_4_reg_719_pp2_iter6_reg;
        vec_local_addr_4_reg_719_pp2_iter8_reg <= vec_local_addr_4_reg_719_pp2_iter7_reg;
        vec_local_addr_4_reg_719_pp2_iter9_reg <= vec_local_addr_4_reg_719_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln34_reg_747 <= icmp_ln34_fu_596_p2;
        icmp_ln34_reg_747_pp3_iter1_reg <= icmp_ln34_reg_747;
        zext_ln34_reg_751[30 : 0] <= zext_ln34_fu_601_p1[30 : 0];
        zext_ln34_reg_751_pp3_iter1_reg[30 : 0] <= zext_ln34_reg_751[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln34_reg_747_pp3_iter10_reg <= icmp_ln34_reg_747_pp3_iter9_reg;
        icmp_ln34_reg_747_pp3_iter11_reg <= icmp_ln34_reg_747_pp3_iter10_reg;
        icmp_ln34_reg_747_pp3_iter2_reg <= icmp_ln34_reg_747_pp3_iter1_reg;
        icmp_ln34_reg_747_pp3_iter3_reg <= icmp_ln34_reg_747_pp3_iter2_reg;
        icmp_ln34_reg_747_pp3_iter4_reg <= icmp_ln34_reg_747_pp3_iter3_reg;
        icmp_ln34_reg_747_pp3_iter5_reg <= icmp_ln34_reg_747_pp3_iter4_reg;
        icmp_ln34_reg_747_pp3_iter6_reg <= icmp_ln34_reg_747_pp3_iter5_reg;
        icmp_ln34_reg_747_pp3_iter7_reg <= icmp_ln34_reg_747_pp3_iter6_reg;
        icmp_ln34_reg_747_pp3_iter8_reg <= icmp_ln34_reg_747_pp3_iter7_reg;
        icmp_ln34_reg_747_pp3_iter9_reg <= icmp_ln34_reg_747_pp3_iter8_reg;
        zext_ln34_reg_751_pp3_iter10_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter9_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter11_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter10_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter2_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter1_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter3_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter2_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter4_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter3_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter5_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter4_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter6_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter5_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter7_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter6_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter8_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter7_reg[30 : 0];
        zext_ln34_reg_751_pp3_iter9_reg[30 : 0] <= zext_ln34_reg_751_pp3_iter8_reg[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln9_reg_640 <= icmp_ln9_fu_266_p2;
        zext_ln9_reg_644[30 : 0] <= zext_ln9_fu_271_p1[30 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln9_fu_266_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_predicate_tran8to9_state7 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_546_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_596_p2 == 1'd0)) begin
        ap_condition_pp3_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter12 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_1_reg_668 == 1'd1) & (icmp_ln16_reg_659 == 1'd1))) begin
        ap_phi_mux_i_11_phi_fu_157_p4 = add_ln16_1_reg_695;
    end else begin
        ap_phi_mux_i_11_phi_fu_157_p4 = i_11_reg_153;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter12 == 1'b1) & (icmp_ln26_reg_715_pp2_iter11_reg == 1'd1))) begin
        ap_phi_mux_sum_phi_fu_201_p4 = grp_fu_225_p2;
    end else begin
        ap_phi_mux_sum_phi_fu_201_p4 = sum_reg_197;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_236_p0 = max_val_4_reg_687;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        grp_fu_236_p0 = vec_local_q1;
    end else begin
        grp_fu_236_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_236_p1 = max_val_3_fu_432_p3;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        grp_fu_236_p1 = max_val_1_reg_165;
    end else begin
        grp_fu_236_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter12 == 1'b1) & (icmp_ln34_reg_747_pp3_iter11_reg == 1'd1))) begin
        i_vec_address0_local = zext_ln34_reg_751_pp3_iter11_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_vec_address0_local = zext_ln9_fu_271_p1;
    end else begin
        i_vec_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter12 == 1'b1) & (icmp_ln34_reg_747_pp3_iter11_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        i_vec_ce0_local = 1'b1;
    end else begin
        i_vec_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter12 == 1'b1) & (icmp_ln34_reg_747_pp3_iter11_reg == 1'd1))) begin
        i_vec_we0_local = 1'b1;
    end else begin
        i_vec_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln26_fu_546_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        vec_local_address0_local = zext_ln26_fu_551_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln16_1_fu_325_p2 == 1'd1) & (icmp_ln16_fu_296_p2 == 1'd1))) begin
        vec_local_address0_local = zext_ln15_12_fu_316_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_local_address0_local = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_640 == 1'd1))) begin
        vec_local_address0_local = zext_ln9_reg_644;
    end else begin
        vec_local_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln34_fu_596_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        vec_local_address1_local = zext_ln34_fu_601_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter11 == 1'b1) & (icmp_ln26_reg_715_pp2_iter10_reg == 1'd1))) begin
        vec_local_address1_local = vec_local_addr_4_reg_719_pp2_iter10_reg;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln16_fu_296_p2 == 1'd1))) begin
        vec_local_address1_local = zext_ln15_fu_301_p1;
    end else begin
        vec_local_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln26_fu_546_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln16_1_fu_325_p2 == 1'd1) & (icmp_ln16_fu_296_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_640 == 1'd1)))) begin
        vec_local_ce0_local = 1'b1;
    end else begin
        vec_local_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1) & (icmp_ln26_reg_715_pp2_iter10_reg == 1'd1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln34_fu_596_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln16_fu_296_p2 == 1'd1)))) begin
        vec_local_ce1_local = 1'b1;
    end else begin
        vec_local_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_640 == 1'd1))) begin
        vec_local_we0_local = 1'b1;
    end else begin
        vec_local_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1) & (icmp_ln26_reg_715_pp2_iter10_reg == 1'd1))) begin
        vec_local_we1_local = 1'b1;
    end else begin
        vec_local_we1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln9_fu_266_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln9_fu_266_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln26_fu_546_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln26_fu_546_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln34_fu_596_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter12 == 1'b1) & (ap_enable_reg_pp3_iter11 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln34_fu_596_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter12 == 1'b1) & (ap_enable_reg_pp3_iter11 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_1_fu_426_p2 = (i_11_reg_153 + 31'd2);

assign add_ln16_fu_310_p2 = (ap_phi_mux_i_11_phi_fu_157_p4 + 31'd1);

assign add_ln26_fu_536_p2 = (i_12_reg_186 + 31'd1);

assign add_ln34_fu_586_p2 = (i_13_reg_209 + 31'd1);

assign add_ln9_fu_256_p2 = (i_reg_142 + 31'd1);

assign and_ln20_1_fu_420_p2 = (grp_fu_236_p2 & and_ln20_fu_414_p2);

assign and_ln20_2_fu_517_p2 = (or_ln20_3_fu_504_p2 & or_ln20_2_fu_486_p2);

assign and_ln20_3_fu_523_p2 = (grp_fu_236_p2 & and_ln20_2_fu_517_p2);

assign and_ln20_fu_414_p2 = (or_ln20_fu_382_p2 & or_ln20_1_fu_400_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran8to9_state7 = ((icmp_ln16_1_reg_668 == 1'd0) | (icmp_ln16_reg_659 == 1'd0));
end

assign bitcast_ln20_1_fu_352_p1 = max_val_1_reg_165;

assign bitcast_ln20_2_fu_439_p1 = max_val_4_reg_687;

assign bitcast_ln20_3_fu_456_p1 = max_val_3_fu_432_p3;

assign bitcast_ln20_fu_334_p1 = vec_local_q1;

assign i_vec_address0 = i_vec_address0_local;

assign i_vec_ce0 = i_vec_ce0_local;

assign i_vec_d0 = grp_fu_230_p2;

assign i_vec_we0 = i_vec_we0_local;

assign icmp_ln16_1_fu_325_p2 = (($signed(zext_ln15_13_fu_321_p1) < $signed(vec_size)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_296_p2 = (($signed(zext_ln15_11_fu_292_p1) < $signed(vec_size)) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_376_p2 = ((trunc_ln20_fu_348_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_2_fu_388_p2 = ((tmp_6_fu_356_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_3_fu_394_p2 = ((trunc_ln20_1_fu_366_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_4_fu_474_p2 = ((tmp_8_fu_442_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_5_fu_480_p2 = ((trunc_ln20_2_fu_452_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_6_fu_492_p2 = ((tmp_9_fu_460_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_7_fu_498_p2 = ((trunc_ln20_3_fu_470_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_370_p2 = ((tmp_5_fu_338_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_546_p2 = (($signed(zext_ln26_1_fu_542_p1) < $signed(vec_size)) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_596_p2 = (($signed(zext_ln34_1_fu_592_p1) < $signed(vec_size)) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_266_p2 = (($signed(zext_ln9_1_fu_262_p1) < $signed(vec_size)) ? 1'b1 : 1'b0);

assign max_val_3_fu_432_p3 = ((and_ln20_1_reg_682[0:0] == 1'b1) ? max_val_2_reg_677 : max_val_1_reg_165);

assign max_val_5_fu_529_p3 = ((and_ln20_3_fu_523_p2[0:0] == 1'b1) ? max_val_4_reg_687 : max_val_3_fu_432_p3);

assign or_ln20_1_fu_400_p2 = (icmp_ln20_3_fu_394_p2 | icmp_ln20_2_fu_388_p2);

assign or_ln20_2_fu_486_p2 = (icmp_ln20_5_fu_480_p2 | icmp_ln20_4_fu_474_p2);

assign or_ln20_3_fu_504_p2 = (icmp_ln20_7_fu_498_p2 | icmp_ln20_6_fu_492_p2);

assign or_ln20_fu_382_p2 = (icmp_ln20_fu_370_p2 | icmp_ln20_1_fu_376_p2);

assign tmp_5_fu_338_p4 = {{bitcast_ln20_fu_334_p1[30:23]}};

assign tmp_6_fu_356_p4 = {{bitcast_ln20_1_fu_352_p1[30:23]}};

assign tmp_8_fu_442_p4 = {{bitcast_ln20_2_fu_439_p1[30:23]}};

assign tmp_9_fu_460_p4 = {{bitcast_ln20_3_fu_456_p1[30:23]}};

assign trunc_ln20_1_fu_366_p1 = bitcast_ln20_1_fu_352_p1[22:0];

assign trunc_ln20_2_fu_452_p1 = bitcast_ln20_2_fu_439_p1[22:0];

assign trunc_ln20_3_fu_470_p1 = bitcast_ln20_3_fu_456_p1[22:0];

assign trunc_ln20_fu_348_p1 = bitcast_ln20_fu_334_p1[22:0];

assign zext_ln15_11_fu_292_p1 = ap_phi_mux_i_11_phi_fu_157_p4;

assign zext_ln15_12_fu_316_p1 = add_ln16_fu_310_p2;

assign zext_ln15_13_fu_321_p1 = add_ln16_fu_310_p2;

assign zext_ln15_fu_301_p1 = ap_phi_mux_i_11_phi_fu_157_p4;

assign zext_ln26_1_fu_542_p1 = i_12_reg_186;

assign zext_ln26_fu_551_p1 = i_12_reg_186;

assign zext_ln34_1_fu_592_p1 = i_13_reg_209;

assign zext_ln34_fu_601_p1 = i_13_reg_209;

assign zext_ln9_1_fu_262_p1 = i_reg_142;

assign zext_ln9_fu_271_p1 = i_reg_142;

always @ (posedge ap_clk) begin
    zext_ln9_reg_644[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter1_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter2_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter3_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter4_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter5_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter6_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter7_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter8_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter9_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter10_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln34_reg_751_pp3_iter11_reg[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //llama_layer_kernel_softmax
