-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity llama_layer_load_vec_13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    vec_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    vec_stream_full_n : IN STD_LOGIC;
    vec_stream_write : OUT STD_LOGIC;
    vec_stream_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    vec_stream_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZZ11llama_layerE13current_token_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ11llama_layerE13current_token_10_ce0 : OUT STD_LOGIC;
    p_ZZ11llama_layerE13current_token_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ11llama_layerE13current_token_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ11llama_layerE13current_token_11_ce0 : OUT STD_LOGIC;
    p_ZZ11llama_layerE13current_token_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ11llama_layerE13current_token_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ11llama_layerE13current_token_12_ce0 : OUT STD_LOGIC;
    p_ZZ11llama_layerE13current_token_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ11llama_layerE13current_token_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ11llama_layerE13current_token_13_ce0 : OUT STD_LOGIC;
    p_ZZ11llama_layerE13current_token_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ11llama_layerE13current_token_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ11llama_layerE13current_token_14_ce0 : OUT STD_LOGIC;
    p_ZZ11llama_layerE13current_token_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ11llama_layerE13current_token_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ11llama_layerE13current_token_15_ce0 : OUT STD_LOGIC;
    p_ZZ11llama_layerE13current_token_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_ce0 : OUT STD_LOGIC;
    current_token_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_19_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_19_ce0 : OUT STD_LOGIC;
    current_token_19_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_20_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_20_ce0 : OUT STD_LOGIC;
    current_token_20_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_21_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_21_ce0 : OUT STD_LOGIC;
    current_token_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_22_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_22_ce0 : OUT STD_LOGIC;
    current_token_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_23_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_23_ce0 : OUT STD_LOGIC;
    current_token_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_24_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_24_ce0 : OUT STD_LOGIC;
    current_token_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_25_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_25_ce0 : OUT STD_LOGIC;
    current_token_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_26_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_26_ce0 : OUT STD_LOGIC;
    current_token_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_token_27_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    current_token_27_ce0 : OUT STD_LOGIC;
    current_token_27_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of llama_layer_load_vec_13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal vec_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln15_fu_415_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln15_reg_645 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln15_3_fu_603_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln15_3_fu_611_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add5_in_i_reg_381 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln13_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_390 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln15_5_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_162 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln13_fu_622_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bitcast_ln17_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_stream_write_local : STD_LOGIC;
    signal current_token_ce0_local : STD_LOGIC;
    signal current_token_19_ce0_local : STD_LOGIC;
    signal current_token_20_ce0_local : STD_LOGIC;
    signal current_token_21_ce0_local : STD_LOGIC;
    signal current_token_22_ce0_local : STD_LOGIC;
    signal current_token_23_ce0_local : STD_LOGIC;
    signal current_token_24_ce0_local : STD_LOGIC;
    signal current_token_25_ce0_local : STD_LOGIC;
    signal current_token_26_ce0_local : STD_LOGIC;
    signal current_token_27_ce0_local : STD_LOGIC;
    signal p_ZZ11llama_layerE13current_token_10_ce0_local : STD_LOGIC;
    signal p_ZZ11llama_layerE13current_token_11_ce0_local : STD_LOGIC;
    signal p_ZZ11llama_layerE13current_token_12_ce0_local : STD_LOGIC;
    signal p_ZZ11llama_layerE13current_token_13_ce0_local : STD_LOGIC;
    signal p_ZZ11llama_layerE13current_token_14_ce0_local : STD_LOGIC;
    signal p_ZZ11llama_layerE13current_token_15_ce0_local : STD_LOGIC;
    signal lshr_ln_fu_419_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_fu_517_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_517_p35 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_513_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln15_fu_597_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln15_6_fu_607_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal tmp_i_fu_517_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_517_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component llama_layer_sparsemux_33_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sparsemux_33_4_32_1_1_U353 : component llama_layer_sparsemux_33_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        CASE13 => "1101",
        din13_WIDTH => 32,
        CASE14 => "1110",
        din14_WIDTH => 32,
        CASE15 => "1111",
        din15_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => current_token_q0,
        din1 => current_token_19_q0,
        din2 => current_token_20_q0,
        din3 => current_token_21_q0,
        din4 => current_token_22_q0,
        din5 => current_token_23_q0,
        din6 => current_token_24_q0,
        din7 => current_token_25_q0,
        din8 => current_token_26_q0,
        din9 => current_token_27_q0,
        din10 => p_ZZ11llama_layerE13current_token_10_q0,
        din11 => p_ZZ11llama_layerE13current_token_11_q0,
        din12 => p_ZZ11llama_layerE13current_token_12_q0,
        din13 => p_ZZ11llama_layerE13current_token_13_q0,
        din14 => p_ZZ11llama_layerE13current_token_14_q0,
        din15 => p_ZZ11llama_layerE13current_token_15_q0,
        def => tmp_i_fu_517_p33,
        sel => trunc_ln15_reg_645,
        dout => tmp_i_fu_517_p35);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln13_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add5_in_i_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((vec_stream_full_n = ap_const_logic_1) and (icmp_ln15_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                add5_in_i_reg_381 <= add_ln15_3_fu_611_p2;
            elsif (((icmp_ln13_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                add5_in_i_reg_381 <= i_fu_162;
            end if; 
        end if;
    end process;

    i_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_162 <= ap_const_lv10_0;
            elsif (((vec_stream_full_n = ap_const_logic_1) and (icmp_ln15_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_fu_162 <= add_ln13_fu_622_p2;
            end if; 
        end if;
    end process;

    j_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((vec_stream_full_n = ap_const_logic_1) and (icmp_ln15_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_390 <= trunc_ln15_3_fu_603_p1;
            elsif (((icmp_ln13_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_390 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln15_reg_645 <= trunc_ln15_fu_415_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, vec_stream_full_n, ap_CS_fsm_state4, ap_CS_fsm_state2, icmp_ln13_fu_409_p2, icmp_ln15_fu_616_p2, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((vec_stream_full_n = ap_const_logic_1) and (icmp_ln15_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((vec_stream_full_n = ap_const_logic_1) and (icmp_ln15_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln13_fu_622_p2 <= std_logic_vector(unsigned(i_fu_162) + unsigned(ap_const_lv10_10));
    add_ln15_3_fu_611_p2 <= std_logic_vector(unsigned(i_fu_162) + unsigned(zext_ln15_6_fu_607_p1));
    add_ln15_fu_597_p2 <= std_logic_vector(unsigned(zext_ln15_fu_513_p1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(vec_stream_full_n)
    begin
        if ((vec_stream_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln13_fu_409_p2)
    begin
        if (((icmp_ln13_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bitcast_ln17_fu_588_p1 <= tmp_i_fu_517_p35;
    current_token_19_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_19_ce0 <= current_token_19_ce0_local;

    current_token_19_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_19_ce0_local <= ap_const_logic_1;
        else 
            current_token_19_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_20_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_20_ce0 <= current_token_20_ce0_local;

    current_token_20_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_20_ce0_local <= ap_const_logic_1;
        else 
            current_token_20_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_21_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_21_ce0 <= current_token_21_ce0_local;

    current_token_21_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_21_ce0_local <= ap_const_logic_1;
        else 
            current_token_21_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_22_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_22_ce0 <= current_token_22_ce0_local;

    current_token_22_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_22_ce0_local <= ap_const_logic_1;
        else 
            current_token_22_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_23_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_23_ce0 <= current_token_23_ce0_local;

    current_token_23_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_23_ce0_local <= ap_const_logic_1;
        else 
            current_token_23_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_24_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_24_ce0 <= current_token_24_ce0_local;

    current_token_24_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_24_ce0_local <= ap_const_logic_1;
        else 
            current_token_24_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_25_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_25_ce0 <= current_token_25_ce0_local;

    current_token_25_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_25_ce0_local <= ap_const_logic_1;
        else 
            current_token_25_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_26_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_26_ce0 <= current_token_26_ce0_local;

    current_token_26_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_26_ce0_local <= ap_const_logic_1;
        else 
            current_token_26_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_27_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_27_ce0 <= current_token_27_ce0_local;

    current_token_27_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_27_ce0_local <= ap_const_logic_1;
        else 
            current_token_27_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    current_token_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    current_token_ce0 <= current_token_ce0_local;

    current_token_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_token_ce0_local <= ap_const_logic_1;
        else 
            current_token_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln13_fu_409_p2 <= "1" when (unsigned(i_fu_162) < unsigned(ap_const_lv10_300)) else "0";
    icmp_ln15_fu_616_p2 <= "1" when (add_ln15_fu_597_p2 = ap_const_lv5_10) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_409_p2)
    begin
        if (((icmp_ln13_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_419_p4 <= add5_in_i_reg_381(9 downto 4);
    p_ZZ11llama_layerE13current_token_10_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    p_ZZ11llama_layerE13current_token_10_ce0 <= p_ZZ11llama_layerE13current_token_10_ce0_local;

    p_ZZ11llama_layerE13current_token_10_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ZZ11llama_layerE13current_token_10_ce0_local <= ap_const_logic_1;
        else 
            p_ZZ11llama_layerE13current_token_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ11llama_layerE13current_token_11_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    p_ZZ11llama_layerE13current_token_11_ce0 <= p_ZZ11llama_layerE13current_token_11_ce0_local;

    p_ZZ11llama_layerE13current_token_11_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ZZ11llama_layerE13current_token_11_ce0_local <= ap_const_logic_1;
        else 
            p_ZZ11llama_layerE13current_token_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ11llama_layerE13current_token_12_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    p_ZZ11llama_layerE13current_token_12_ce0 <= p_ZZ11llama_layerE13current_token_12_ce0_local;

    p_ZZ11llama_layerE13current_token_12_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ZZ11llama_layerE13current_token_12_ce0_local <= ap_const_logic_1;
        else 
            p_ZZ11llama_layerE13current_token_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ11llama_layerE13current_token_13_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    p_ZZ11llama_layerE13current_token_13_ce0 <= p_ZZ11llama_layerE13current_token_13_ce0_local;

    p_ZZ11llama_layerE13current_token_13_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ZZ11llama_layerE13current_token_13_ce0_local <= ap_const_logic_1;
        else 
            p_ZZ11llama_layerE13current_token_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ11llama_layerE13current_token_14_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    p_ZZ11llama_layerE13current_token_14_ce0 <= p_ZZ11llama_layerE13current_token_14_ce0_local;

    p_ZZ11llama_layerE13current_token_14_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ZZ11llama_layerE13current_token_14_ce0_local <= ap_const_logic_1;
        else 
            p_ZZ11llama_layerE13current_token_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ11llama_layerE13current_token_15_address0 <= zext_ln15_5_fu_429_p1(6 - 1 downto 0);
    p_ZZ11llama_layerE13current_token_15_ce0 <= p_ZZ11llama_layerE13current_token_15_ce0_local;

    p_ZZ11llama_layerE13current_token_15_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ZZ11llama_layerE13current_token_15_ce0_local <= ap_const_logic_1;
        else 
            p_ZZ11llama_layerE13current_token_15_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_fu_517_p33 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln15_3_fu_603_p1 <= add_ln15_fu_597_p2(4 - 1 downto 0);
    trunc_ln15_fu_415_p1 <= add5_in_i_reg_381(4 - 1 downto 0);

    vec_stream_blk_n_assign_proc : process(vec_stream_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vec_stream_blk_n <= vec_stream_full_n;
        else 
            vec_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vec_stream_din <= bitcast_ln17_fu_588_p1;
    vec_stream_write <= vec_stream_write_local;

    vec_stream_write_local_assign_proc : process(vec_stream_full_n, ap_CS_fsm_state4)
    begin
        if (((vec_stream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            vec_stream_write_local <= ap_const_logic_1;
        else 
            vec_stream_write_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln15_5_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_419_p4),64));
    zext_ln15_6_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_fu_597_p2),10));
    zext_ln15_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_390),5));
end behav;
