-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity llama_layer_kernel_mhsa_1_Block_entry_current_token_fb_proc_Pipeline_LOAD_V_CACHE_VITIS_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem4_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_0_WREADY : IN STD_LOGIC;
    m_axi_gmem4_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_RVALID : IN STD_LOGIC;
    m_axi_gmem4_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_0_RLAST : IN STD_LOGIC;
    m_axi_gmem4_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_gmem4_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_BVALID : IN STD_LOGIC;
    m_axi_gmem4_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    tmp_30 : IN STD_LOGIC_VECTOR (38 downto 0);
    v_cache_local_7_i_i_i_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_cache_local_7_i_i_i_ce0 : OUT STD_LOGIC;
    v_cache_local_7_i_i_i_we0 : OUT STD_LOGIC;
    v_cache_local_7_i_i_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_cache_local_6_i_i_i_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_cache_local_6_i_i_i_ce0 : OUT STD_LOGIC;
    v_cache_local_6_i_i_i_we0 : OUT STD_LOGIC;
    v_cache_local_6_i_i_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_cache_local_5_i_i_i_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_cache_local_5_i_i_i_ce0 : OUT STD_LOGIC;
    v_cache_local_5_i_i_i_we0 : OUT STD_LOGIC;
    v_cache_local_5_i_i_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_cache_local_4_i_i_i_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_cache_local_4_i_i_i_ce0 : OUT STD_LOGIC;
    v_cache_local_4_i_i_i_we0 : OUT STD_LOGIC;
    v_cache_local_4_i_i_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_cache_local_3_i_i_i_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_cache_local_3_i_i_i_ce0 : OUT STD_LOGIC;
    v_cache_local_3_i_i_i_we0 : OUT STD_LOGIC;
    v_cache_local_3_i_i_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_cache_local_2_i_i_i_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_cache_local_2_i_i_i_ce0 : OUT STD_LOGIC;
    v_cache_local_2_i_i_i_we0 : OUT STD_LOGIC;
    v_cache_local_2_i_i_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_cache_local_1_i_i_i_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_cache_local_1_i_i_i_ce0 : OUT STD_LOGIC;
    v_cache_local_1_i_i_i_we0 : OUT STD_LOGIC;
    v_cache_local_1_i_i_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_cache_local_0_i_i_i_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_cache_local_0_i_i_i_ce0 : OUT STD_LOGIC;
    v_cache_local_0_i_i_i_we0 : OUT STD_LOGIC;
    v_cache_local_0_i_i_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    zext_ln124_1 : IN STD_LOGIC_VECTOR (23 downto 0);
    value_cache : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of llama_layer_kernel_mhsa_1_Block_entry_current_token_fb_proc_Pipeline_LOAD_V_CACHE_VITIS_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv70_0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv70_1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal first_iter_1_reg_586 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln129_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem4_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal gmem4_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal value_cache_read_reg_567 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal zext_ln124_1_cast_fu_271_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln124_1_cast_reg_572 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_fu_275_p1 : STD_LOGIC_VECTOR (69 downto 0);
    signal bound_reg_577 : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal first_iter_1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln129_fu_383_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln129_reg_590 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln130_fu_388_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_595_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_599_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln132_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter11_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter12_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln132_reg_604_pp0_iter13_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln132_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln130_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_122 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln130_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal t_2_fu_126 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal select_ln129_1_fu_339_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten7_fu_130 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln129_2_fu_297_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal v_cache_local_6_i_i_i_we0_local : STD_LOGIC;
    signal bitcast_ln132_fu_483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_local_6_i_i_i_ce0_local : STD_LOGIC;
    signal v_cache_local_5_i_i_i_we0_local : STD_LOGIC;
    signal v_cache_local_5_i_i_i_ce0_local : STD_LOGIC;
    signal v_cache_local_4_i_i_i_we0_local : STD_LOGIC;
    signal v_cache_local_4_i_i_i_ce0_local : STD_LOGIC;
    signal v_cache_local_3_i_i_i_we0_local : STD_LOGIC;
    signal v_cache_local_3_i_i_i_ce0_local : STD_LOGIC;
    signal v_cache_local_2_i_i_i_we0_local : STD_LOGIC;
    signal v_cache_local_2_i_i_i_ce0_local : STD_LOGIC;
    signal v_cache_local_1_i_i_i_we0_local : STD_LOGIC;
    signal v_cache_local_1_i_i_i_ce0_local : STD_LOGIC;
    signal v_cache_local_0_i_i_i_we0_local : STD_LOGIC;
    signal v_cache_local_0_i_i_i_ce0_local : STD_LOGIC;
    signal v_cache_local_7_i_i_i_we0_local : STD_LOGIC;
    signal v_cache_local_7_i_i_i_ce0_local : STD_LOGIC;
    signal icmp_ln130_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln129_3_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln129_fu_325_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln129_fu_353_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln129_1_fu_365_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_shl_fu_357_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_shl9_fu_369_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal sub_ln129_fu_377_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln4_fu_440_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln129_1_fu_447_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_452_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln1_fu_496_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component llama_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component llama_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_122 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_fu_122 <= add_ln130_fu_424_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten7_fu_130 <= ap_const_lv70_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln129_fu_303_p2 = ap_const_lv1_0))) then 
                    indvar_flatten7_fu_130 <= add_ln129_2_fu_297_p2;
                end if;
            end if; 
        end if;
    end process;

    t_2_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_2_fu_126 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    t_2_fu_126 <= select_ln129_1_fu_339_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln129_reg_590 <= add_ln129_fu_383_p2;
                first_iter_1_reg_586 <= first_iter_1_fu_347_p2;
                lshr_ln_reg_599 <= select_ln129_fu_325_p3(5 downto 3);
                lshr_ln_reg_599_pp0_iter10_reg <= lshr_ln_reg_599_pp0_iter9_reg;
                lshr_ln_reg_599_pp0_iter11_reg <= lshr_ln_reg_599_pp0_iter10_reg;
                lshr_ln_reg_599_pp0_iter12_reg <= lshr_ln_reg_599_pp0_iter11_reg;
                lshr_ln_reg_599_pp0_iter13_reg <= lshr_ln_reg_599_pp0_iter12_reg;
                lshr_ln_reg_599_pp0_iter3_reg <= lshr_ln_reg_599;
                lshr_ln_reg_599_pp0_iter4_reg <= lshr_ln_reg_599_pp0_iter3_reg;
                lshr_ln_reg_599_pp0_iter5_reg <= lshr_ln_reg_599_pp0_iter4_reg;
                lshr_ln_reg_599_pp0_iter6_reg <= lshr_ln_reg_599_pp0_iter5_reg;
                lshr_ln_reg_599_pp0_iter7_reg <= lshr_ln_reg_599_pp0_iter6_reg;
                lshr_ln_reg_599_pp0_iter8_reg <= lshr_ln_reg_599_pp0_iter7_reg;
                lshr_ln_reg_599_pp0_iter9_reg <= lshr_ln_reg_599_pp0_iter8_reg;
                trunc_ln130_reg_595 <= trunc_ln130_fu_388_p1;
                trunc_ln130_reg_595_pp0_iter10_reg <= trunc_ln130_reg_595_pp0_iter9_reg;
                trunc_ln130_reg_595_pp0_iter11_reg <= trunc_ln130_reg_595_pp0_iter10_reg;
                trunc_ln130_reg_595_pp0_iter12_reg <= trunc_ln130_reg_595_pp0_iter11_reg;
                trunc_ln130_reg_595_pp0_iter13_reg <= trunc_ln130_reg_595_pp0_iter12_reg;
                trunc_ln130_reg_595_pp0_iter3_reg <= trunc_ln130_reg_595;
                trunc_ln130_reg_595_pp0_iter4_reg <= trunc_ln130_reg_595_pp0_iter3_reg;
                trunc_ln130_reg_595_pp0_iter5_reg <= trunc_ln130_reg_595_pp0_iter4_reg;
                trunc_ln130_reg_595_pp0_iter6_reg <= trunc_ln130_reg_595_pp0_iter5_reg;
                trunc_ln130_reg_595_pp0_iter7_reg <= trunc_ln130_reg_595_pp0_iter6_reg;
                trunc_ln130_reg_595_pp0_iter8_reg <= trunc_ln130_reg_595_pp0_iter7_reg;
                trunc_ln130_reg_595_pp0_iter9_reg <= trunc_ln130_reg_595_pp0_iter8_reg;
                trunc_ln132_reg_604 <= trunc_ln132_fu_402_p1;
                trunc_ln132_reg_604_pp0_iter10_reg <= trunc_ln132_reg_604_pp0_iter9_reg;
                trunc_ln132_reg_604_pp0_iter11_reg <= trunc_ln132_reg_604_pp0_iter10_reg;
                trunc_ln132_reg_604_pp0_iter12_reg <= trunc_ln132_reg_604_pp0_iter11_reg;
                trunc_ln132_reg_604_pp0_iter13_reg <= trunc_ln132_reg_604_pp0_iter12_reg;
                trunc_ln132_reg_604_pp0_iter3_reg <= trunc_ln132_reg_604;
                trunc_ln132_reg_604_pp0_iter4_reg <= trunc_ln132_reg_604_pp0_iter3_reg;
                trunc_ln132_reg_604_pp0_iter5_reg <= trunc_ln132_reg_604_pp0_iter4_reg;
                trunc_ln132_reg_604_pp0_iter6_reg <= trunc_ln132_reg_604_pp0_iter5_reg;
                trunc_ln132_reg_604_pp0_iter7_reg <= trunc_ln132_reg_604_pp0_iter6_reg;
                trunc_ln132_reg_604_pp0_iter8_reg <= trunc_ln132_reg_604_pp0_iter7_reg;
                trunc_ln132_reg_604_pp0_iter9_reg <= trunc_ln132_reg_604_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                bound_reg_577 <= bound_fu_275_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then
                value_cache_read_reg_567 <= value_cache;
                    zext_ln124_1_cast_reg_572(23 downto 0) <= zext_ln124_1_cast_fu_271_p1(23 downto 0);
            end if;
        end if;
    end process;
    zext_ln124_1_cast_reg_572(61 downto 24) <= "00000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln129_1_fu_447_p2 <= std_logic_vector(unsigned(shl_ln4_fu_440_p3) + unsigned(value_cache_read_reg_567));
    add_ln129_2_fu_297_p2 <= std_logic_vector(unsigned(indvar_flatten7_fu_130) + unsigned(ap_const_lv70_1));
    add_ln129_3_fu_333_p2 <= std_logic_vector(unsigned(t_2_fu_126) + unsigned(ap_const_lv64_1));
    add_ln129_fu_383_p2 <= std_logic_vector(unsigned(sub_ln129_fu_377_p2) + unsigned(zext_ln124_1_cast_reg_572));
    add_ln130_fu_424_p2 <= std_logic_vector(unsigned(select_ln129_fu_325_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter14, m_axi_gmem4_0_RVALID, ap_block_state4_io_grp1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_gmem4_0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io_grp1)));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter14, m_axi_gmem4_0_RVALID, ap_block_state4_io_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_gmem4_0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io_grp1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter14, m_axi_gmem4_0_RVALID, ap_block_state4_io_grp1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_gmem4_0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io_grp1)));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_grp1_assign_proc : process(m_axi_gmem4_0_ARREADY, first_iter_1_reg_586)
    begin
                ap_block_state4_io_grp1 <= ((m_axi_gmem4_0_ARREADY = ap_const_logic_0) and (first_iter_1_reg_586 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln129_fu_303_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln129_fu_303_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter13_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln132_fu_483_p1 <= m_axi_gmem4_0_RDATA;
        bound_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30),70));

    first_iter_1_fu_347_p2 <= "1" when (select_ln129_fu_325_p3 = ap_const_lv7_0) else "0";

    gmem4_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem4_0_ARREADY, first_iter_1_reg_586, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (first_iter_1_reg_586 = ap_const_lv1_1))) then 
            gmem4_blk_n_AR <= m_axi_gmem4_0_ARREADY;
        else 
            gmem4_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem4_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter14, m_axi_gmem4_0_RVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            gmem4_blk_n_R <= m_axi_gmem4_0_RVALID;
        else 
            gmem4_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln129_fu_303_p2 <= "1" when (indvar_flatten7_fu_130 = bound_reg_577) else "0";
    icmp_ln130_fu_319_p2 <= "1" when (i_fu_122 = ap_const_lv7_40) else "0";
    m_axi_gmem4_0_ARADDR <= sext_ln130_fu_462_p1;
    m_axi_gmem4_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem4_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem4_0_ARID <= ap_const_lv1_0;
    m_axi_gmem4_0_ARLEN <= ap_const_lv64_40(32 - 1 downto 0);
    m_axi_gmem4_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem4_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem4_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem4_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem4_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem4_0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem4_0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, first_iter_1_reg_586, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (first_iter_1_reg_586 = ap_const_lv1_1))) then 
            m_axi_gmem4_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem4_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem4_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem4_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem4_0_AWID <= ap_const_lv1_0;
    m_axi_gmem4_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem4_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem4_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem4_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem4_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem4_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem4_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem4_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem4_0_BREADY <= ap_const_logic_0;

    m_axi_gmem4_0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            m_axi_gmem4_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem4_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_0_WDATA <= ap_const_lv32_0;
    m_axi_gmem4_0_WID <= ap_const_lv1_0;
    m_axi_gmem4_0_WLAST <= ap_const_logic_0;
    m_axi_gmem4_0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem4_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem4_0_WVALID <= ap_const_logic_0;
    or_ln1_fu_496_p3 <= (trunc_ln132_reg_604_pp0_iter13_reg & lshr_ln_reg_599_pp0_iter13_reg);
    p_shl9_fu_369_p3 <= (trunc_ln129_1_fu_365_p1 & ap_const_lv8_0);
    p_shl_fu_357_p3 <= (trunc_ln129_fu_353_p1 & ap_const_lv10_0);
    select_ln129_1_fu_339_p3 <= 
        add_ln129_3_fu_333_p2 when (icmp_ln130_fu_319_p2(0) = '1') else 
        t_2_fu_126;
    select_ln129_fu_325_p3 <= 
        ap_const_lv7_0 when (icmp_ln130_fu_319_p2(0) = '1') else 
        i_fu_122;
        sext_ln130_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_452_p4),64));

    shl_ln4_fu_440_p3 <= (add_ln129_reg_590 & ap_const_lv2_0);
    sub_ln129_fu_377_p2 <= std_logic_vector(unsigned(p_shl_fu_357_p3) - unsigned(p_shl9_fu_369_p3));
    trunc_ln129_1_fu_365_p1 <= select_ln129_1_fu_339_p3(54 - 1 downto 0);
    trunc_ln129_fu_353_p1 <= select_ln129_1_fu_339_p3(52 - 1 downto 0);
    trunc_ln130_fu_388_p1 <= select_ln129_fu_325_p3(3 - 1 downto 0);
    trunc_ln132_fu_402_p1 <= select_ln129_1_fu_339_p3(9 - 1 downto 0);
    trunc_ln_fu_452_p4 <= add_ln129_1_fu_447_p2(63 downto 2);
    v_cache_local_0_i_i_i_address0 <= zext_ln132_fu_502_p1(12 - 1 downto 0);
    v_cache_local_0_i_i_i_ce0 <= v_cache_local_0_i_i_i_ce0_local;

    v_cache_local_0_i_i_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_0_i_i_i_ce0_local <= ap_const_logic_1;
        else 
            v_cache_local_0_i_i_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_0_i_i_i_d0 <= bitcast_ln132_fu_483_p1;
    v_cache_local_0_i_i_i_we0 <= v_cache_local_0_i_i_i_we0_local;

    v_cache_local_0_i_i_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_0_i_i_i_we0_local <= ap_const_logic_1;
        else 
            v_cache_local_0_i_i_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_1_i_i_i_address0 <= zext_ln132_fu_502_p1(12 - 1 downto 0);
    v_cache_local_1_i_i_i_ce0 <= v_cache_local_1_i_i_i_ce0_local;

    v_cache_local_1_i_i_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_1_i_i_i_ce0_local <= ap_const_logic_1;
        else 
            v_cache_local_1_i_i_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_1_i_i_i_d0 <= bitcast_ln132_fu_483_p1;
    v_cache_local_1_i_i_i_we0 <= v_cache_local_1_i_i_i_we0_local;

    v_cache_local_1_i_i_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_1_i_i_i_we0_local <= ap_const_logic_1;
        else 
            v_cache_local_1_i_i_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_2_i_i_i_address0 <= zext_ln132_fu_502_p1(12 - 1 downto 0);
    v_cache_local_2_i_i_i_ce0 <= v_cache_local_2_i_i_i_ce0_local;

    v_cache_local_2_i_i_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_2_i_i_i_ce0_local <= ap_const_logic_1;
        else 
            v_cache_local_2_i_i_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_2_i_i_i_d0 <= bitcast_ln132_fu_483_p1;
    v_cache_local_2_i_i_i_we0 <= v_cache_local_2_i_i_i_we0_local;

    v_cache_local_2_i_i_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_2_i_i_i_we0_local <= ap_const_logic_1;
        else 
            v_cache_local_2_i_i_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_3_i_i_i_address0 <= zext_ln132_fu_502_p1(12 - 1 downto 0);
    v_cache_local_3_i_i_i_ce0 <= v_cache_local_3_i_i_i_ce0_local;

    v_cache_local_3_i_i_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_3_i_i_i_ce0_local <= ap_const_logic_1;
        else 
            v_cache_local_3_i_i_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_3_i_i_i_d0 <= bitcast_ln132_fu_483_p1;
    v_cache_local_3_i_i_i_we0 <= v_cache_local_3_i_i_i_we0_local;

    v_cache_local_3_i_i_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_3_i_i_i_we0_local <= ap_const_logic_1;
        else 
            v_cache_local_3_i_i_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_4_i_i_i_address0 <= zext_ln132_fu_502_p1(12 - 1 downto 0);
    v_cache_local_4_i_i_i_ce0 <= v_cache_local_4_i_i_i_ce0_local;

    v_cache_local_4_i_i_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_4_i_i_i_ce0_local <= ap_const_logic_1;
        else 
            v_cache_local_4_i_i_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_4_i_i_i_d0 <= bitcast_ln132_fu_483_p1;
    v_cache_local_4_i_i_i_we0 <= v_cache_local_4_i_i_i_we0_local;

    v_cache_local_4_i_i_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_4_i_i_i_we0_local <= ap_const_logic_1;
        else 
            v_cache_local_4_i_i_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_5_i_i_i_address0 <= zext_ln132_fu_502_p1(12 - 1 downto 0);
    v_cache_local_5_i_i_i_ce0 <= v_cache_local_5_i_i_i_ce0_local;

    v_cache_local_5_i_i_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_5_i_i_i_ce0_local <= ap_const_logic_1;
        else 
            v_cache_local_5_i_i_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_5_i_i_i_d0 <= bitcast_ln132_fu_483_p1;
    v_cache_local_5_i_i_i_we0 <= v_cache_local_5_i_i_i_we0_local;

    v_cache_local_5_i_i_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_5_i_i_i_we0_local <= ap_const_logic_1;
        else 
            v_cache_local_5_i_i_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_6_i_i_i_address0 <= zext_ln132_fu_502_p1(12 - 1 downto 0);
    v_cache_local_6_i_i_i_ce0 <= v_cache_local_6_i_i_i_ce0_local;

    v_cache_local_6_i_i_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_6_i_i_i_ce0_local <= ap_const_logic_1;
        else 
            v_cache_local_6_i_i_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_6_i_i_i_d0 <= bitcast_ln132_fu_483_p1;
    v_cache_local_6_i_i_i_we0 <= v_cache_local_6_i_i_i_we0_local;

    v_cache_local_6_i_i_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_6_i_i_i_we0_local <= ap_const_logic_1;
        else 
            v_cache_local_6_i_i_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_7_i_i_i_address0 <= zext_ln132_fu_502_p1(12 - 1 downto 0);
    v_cache_local_7_i_i_i_ce0 <= v_cache_local_7_i_i_i_ce0_local;

    v_cache_local_7_i_i_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_7_i_i_i_ce0_local <= ap_const_logic_1;
        else 
            v_cache_local_7_i_i_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    v_cache_local_7_i_i_i_d0 <= bitcast_ln132_fu_483_p1;
    v_cache_local_7_i_i_i_we0 <= v_cache_local_7_i_i_i_we0_local;

    v_cache_local_7_i_i_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001_grp1, trunc_ln130_reg_595_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln130_reg_595_pp0_iter13_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            v_cache_local_7_i_i_i_we0_local <= ap_const_logic_1;
        else 
            v_cache_local_7_i_i_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln124_1_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln124_1),62));
    zext_ln132_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_496_p3),64));
end behav;
