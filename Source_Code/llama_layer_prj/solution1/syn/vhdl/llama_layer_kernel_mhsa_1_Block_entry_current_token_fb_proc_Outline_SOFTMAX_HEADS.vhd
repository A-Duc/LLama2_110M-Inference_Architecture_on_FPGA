-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity llama_layer_kernel_mhsa_1_Block_entry_current_token_fb_proc_Outline_SOFTMAX_HEADS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    att_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_10_ce0 : OUT STD_LOGIC;
    att_10_we0 : OUT STD_LOGIC;
    att_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_9_ce0 : OUT STD_LOGIC;
    att_9_we0 : OUT STD_LOGIC;
    att_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_8_ce0 : OUT STD_LOGIC;
    att_8_we0 : OUT STD_LOGIC;
    att_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_7_ce0 : OUT STD_LOGIC;
    att_7_we0 : OUT STD_LOGIC;
    att_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_6_ce0 : OUT STD_LOGIC;
    att_6_we0 : OUT STD_LOGIC;
    att_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_5_ce0 : OUT STD_LOGIC;
    att_5_we0 : OUT STD_LOGIC;
    att_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_4_ce0 : OUT STD_LOGIC;
    att_4_we0 : OUT STD_LOGIC;
    att_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_3_ce0 : OUT STD_LOGIC;
    att_3_we0 : OUT STD_LOGIC;
    att_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_2_ce0 : OUT STD_LOGIC;
    att_2_we0 : OUT STD_LOGIC;
    att_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_1_ce0 : OUT STD_LOGIC;
    att_1_we0 : OUT STD_LOGIC;
    att_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_0_ce0 : OUT STD_LOGIC;
    att_0_we0 : OUT STD_LOGIC;
    att_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    att_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    att_11_ce0 : OUT STD_LOGIC;
    att_11_we0 : OUT STD_LOGIC;
    att_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    att_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of llama_layer_kernel_mhsa_1_Block_entry_current_token_fb_proc_Outline_SOFTMAX_HEADS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h_1_load_fu_127_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_1_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln110_fu_130_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln110_reg_188 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel_softmax_fu_104_ap_start : STD_LOGIC;
    signal grp_kernel_softmax_fu_104_ap_done : STD_LOGIC;
    signal grp_kernel_softmax_fu_104_ap_idle : STD_LOGIC;
    signal grp_kernel_softmax_fu_104_ap_ready : STD_LOGIC;
    signal grp_kernel_softmax_fu_104_i_vec_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_kernel_softmax_fu_104_i_vec_ce0 : STD_LOGIC;
    signal grp_kernel_softmax_fu_104_i_vec_we0 : STD_LOGIC;
    signal grp_kernel_softmax_fu_104_i_vec_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kernel_softmax_fu_104_i_vec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kernel_softmax_fu_104_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln110_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal h_fu_94 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_predicate_op83_call_state3 : BOOLEAN;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_condition_330 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component llama_layer_kernel_softmax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i_vec_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        i_vec_ce0 : OUT STD_LOGIC;
        i_vec_we0 : OUT STD_LOGIC;
        i_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        vec_size : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_kernel_softmax_fu_104 : component llama_layer_kernel_softmax
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_kernel_softmax_fu_104_ap_start,
        ap_done => grp_kernel_softmax_fu_104_ap_done,
        ap_idle => grp_kernel_softmax_fu_104_ap_idle,
        ap_ready => grp_kernel_softmax_fu_104_ap_ready,
        i_vec_address0 => grp_kernel_softmax_fu_104_i_vec_address0,
        i_vec_ce0 => grp_kernel_softmax_fu_104_i_vec_ce0,
        i_vec_we0 => grp_kernel_softmax_fu_104_i_vec_we0,
        i_vec_d0 => grp_kernel_softmax_fu_104_i_vec_d0,
        i_vec_q0 => grp_kernel_softmax_fu_104_i_vec_q0,
        vec_size => p_read4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_kernel_softmax_fu_104_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_kernel_softmax_fu_104_ap_start_reg <= ap_const_logic_0;
            else
                if (((not((h_1_load_fu_127_p1 = ap_const_lv4_0)) and not((h_1_load_fu_127_p1 = ap_const_lv4_1)) and not((h_1_load_fu_127_p1 = ap_const_lv4_2)) and not((h_1_load_fu_127_p1 = ap_const_lv4_3)) and not((h_1_load_fu_127_p1 = ap_const_lv4_4)) and not((h_1_load_fu_127_p1 = ap_const_lv4_5)) and not((h_1_load_fu_127_p1 = ap_const_lv4_6)) and not((h_1_load_fu_127_p1 = ap_const_lv4_7)) and not((h_1_load_fu_127_p1 = ap_const_lv4_8)) and not((h_1_load_fu_127_p1 = ap_const_lv4_9)) and not((h_1_load_fu_127_p1 = ap_const_lv4_A)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_2)) or ((ap_const_logic_1 = ap_CS_fsm_state2) 
    and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_3)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_4)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_5)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_6)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_7)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_8)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_9)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_0) and (h_1_load_fu_127_p1 = ap_const_lv4_A)))) then 
                    grp_kernel_softmax_fu_104_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_kernel_softmax_fu_104_ap_ready = ap_const_logic_1)) then 
                    grp_kernel_softmax_fu_104_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_fu_94 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h_fu_94 <= add_ln110_reg_188;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln110_reg_188 <= add_ln110_fu_130_p2;
                h_1_reg_184 <= h_fu_94;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln110_fu_136_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln110_fu_130_p2 <= std_logic_vector(unsigned(h_fu_94) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_ap_done, ap_predicate_op83_call_state3)
    begin
                ap_block_state3_on_subcall_done <= (((ap_predicate_op83_call_state3 = ap_const_boolean_1) and (grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_0)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_1)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_2)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_3)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_4)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_5)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_6)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_7)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_8)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) 
    and (h_1_reg_184 = ap_const_lv4_9)) or ((grp_kernel_softmax_fu_104_ap_done = ap_const_logic_0) and (h_1_reg_184 = ap_const_lv4_A)));
    end process;


    ap_condition_330_assign_proc : process(h_1_reg_184)
    begin
                ap_condition_330 <= (not((h_1_reg_184 = ap_const_lv4_0)) and not((h_1_reg_184 = ap_const_lv4_1)) and not((h_1_reg_184 = ap_const_lv4_2)) and not((h_1_reg_184 = ap_const_lv4_3)) and not((h_1_reg_184 = ap_const_lv4_4)) and not((h_1_reg_184 = ap_const_lv4_5)) and not((h_1_reg_184 = ap_const_lv4_6)) and not((h_1_reg_184 = ap_const_lv4_7)) and not((h_1_reg_184 = ap_const_lv4_8)) and not((h_1_reg_184 = ap_const_lv4_9)) and not((h_1_reg_184 = ap_const_lv4_A)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln110_fu_136_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op83_call_state3_assign_proc : process(h_1_reg_184)
    begin
                ap_predicate_op83_call_state3 <= (not((h_1_reg_184 = ap_const_lv4_0)) and not((h_1_reg_184 = ap_const_lv4_1)) and not((h_1_reg_184 = ap_const_lv4_2)) and not((h_1_reg_184 = ap_const_lv4_3)) and not((h_1_reg_184 = ap_const_lv4_4)) and not((h_1_reg_184 = ap_const_lv4_5)) and not((h_1_reg_184 = ap_const_lv4_6)) and not((h_1_reg_184 = ap_const_lv4_7)) and not((h_1_reg_184 = ap_const_lv4_8)) and not((h_1_reg_184 = ap_const_lv4_9)) and not((h_1_reg_184 = ap_const_lv4_A)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln110_fu_136_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln110_fu_136_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    att_0_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_0_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_0))) then 
            att_0_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_0_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_0_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_0))) then 
            att_0_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_10_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_10_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_A))) then 
            att_10_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_10_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_10_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_A))) then 
            att_10_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_11_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_11_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if ((not((h_1_reg_184 = ap_const_lv4_0)) and not((h_1_reg_184 = ap_const_lv4_1)) and not((h_1_reg_184 = ap_const_lv4_2)) and not((h_1_reg_184 = ap_const_lv4_3)) and not((h_1_reg_184 = ap_const_lv4_4)) and not((h_1_reg_184 = ap_const_lv4_5)) and not((h_1_reg_184 = ap_const_lv4_6)) and not((h_1_reg_184 = ap_const_lv4_7)) and not((h_1_reg_184 = ap_const_lv4_8)) and not((h_1_reg_184 = ap_const_lv4_9)) and not((h_1_reg_184 = ap_const_lv4_A)) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            att_11_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_11_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_11_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if ((not((h_1_reg_184 = ap_const_lv4_0)) and not((h_1_reg_184 = ap_const_lv4_1)) and not((h_1_reg_184 = ap_const_lv4_2)) and not((h_1_reg_184 = ap_const_lv4_3)) and not((h_1_reg_184 = ap_const_lv4_4)) and not((h_1_reg_184 = ap_const_lv4_5)) and not((h_1_reg_184 = ap_const_lv4_6)) and not((h_1_reg_184 = ap_const_lv4_7)) and not((h_1_reg_184 = ap_const_lv4_8)) and not((h_1_reg_184 = ap_const_lv4_9)) and not((h_1_reg_184 = ap_const_lv4_A)) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            att_11_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_1_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_1_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_1))) then 
            att_1_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_1_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_1_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_1))) then 
            att_1_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_2_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_2_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_2))) then 
            att_2_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_2_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_2_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_2))) then 
            att_2_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_3_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_3_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_3))) then 
            att_3_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_3_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_3_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_3))) then 
            att_3_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_4_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_4_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_4))) then 
            att_4_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_4_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_4_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_4))) then 
            att_4_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_5_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_5_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_5))) then 
            att_5_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_5_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_5_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_5))) then 
            att_5_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_6_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_6_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_6))) then 
            att_6_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_6_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_6_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_6))) then 
            att_6_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_7_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_7_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_7))) then 
            att_7_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_7_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_7_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_7))) then 
            att_7_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_8_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_8_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_8))) then 
            att_8_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_8_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_8_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_8))) then 
            att_8_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    att_9_address0 <= grp_kernel_softmax_fu_104_i_vec_address0;

    att_9_ce0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_9))) then 
            att_9_ce0 <= grp_kernel_softmax_fu_104_i_vec_ce0;
        else 
            att_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    att_9_d0 <= grp_kernel_softmax_fu_104_i_vec_d0;

    att_9_we0_assign_proc : process(h_1_reg_184, grp_kernel_softmax_fu_104_i_vec_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (h_1_reg_184 = ap_const_lv4_9))) then 
            att_9_we0 <= grp_kernel_softmax_fu_104_i_vec_we0;
        else 
            att_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_kernel_softmax_fu_104_ap_start <= grp_kernel_softmax_fu_104_ap_start_reg;

    grp_kernel_softmax_fu_104_i_vec_q0_assign_proc : process(att_10_q0, att_9_q0, att_8_q0, att_7_q0, att_6_q0, att_5_q0, att_4_q0, att_3_q0, att_2_q0, att_1_q0, att_0_q0, att_11_q0, h_1_reg_184, ap_CS_fsm_state3, ap_condition_330)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((ap_const_boolean_1 = ap_condition_330)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_11_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_0)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_0_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_1)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_1_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_2)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_2_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_3)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_3_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_4)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_4_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_5)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_5_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_6)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_6_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_7)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_7_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_8)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_8_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_9)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_9_q0;
            elsif ((h_1_reg_184 = ap_const_lv4_A)) then 
                grp_kernel_softmax_fu_104_i_vec_q0 <= att_10_q0;
            else 
                grp_kernel_softmax_fu_104_i_vec_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_kernel_softmax_fu_104_i_vec_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_load_fu_127_p1 <= h_fu_94;
    icmp_ln110_fu_136_p2 <= "1" when (h_fu_94 = ap_const_lv4_C) else "0";
end behav;
