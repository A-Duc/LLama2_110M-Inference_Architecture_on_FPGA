-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity llama_layer_RoPE_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_1_ce0 : OUT STD_LOGIC;
    out_1_we0 : OUT STD_LOGIC;
    out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_2_ce0 : OUT STD_LOGIC;
    out_2_we0 : OUT STD_LOGIC;
    out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_3_ce0 : OUT STD_LOGIC;
    out_3_we0 : OUT STD_LOGIC;
    out_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_4_ce0 : OUT STD_LOGIC;
    out_4_we0 : OUT STD_LOGIC;
    out_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_5_ce0 : OUT STD_LOGIC;
    out_5_we0 : OUT STD_LOGIC;
    out_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_6_ce0 : OUT STD_LOGIC;
    out_6_we0 : OUT STD_LOGIC;
    out_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_7_ce0 : OUT STD_LOGIC;
    out_7_we0 : OUT STD_LOGIC;
    out_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_0_ce0 : OUT STD_LOGIC;
    in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_1_ce0 : OUT STD_LOGIC;
    in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_2_ce0 : OUT STD_LOGIC;
    in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_3_ce0 : OUT STD_LOGIC;
    in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_4_ce0 : OUT STD_LOGIC;
    in_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_5_ce0 : OUT STD_LOGIC;
    in_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_6_ce0 : OUT STD_LOGIC;
    in_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_7_ce0 : OUT STD_LOGIC;
    in_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_8_ce0 : OUT STD_LOGIC;
    in_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_9_ce0 : OUT STD_LOGIC;
    in_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_10_ce0 : OUT STD_LOGIC;
    in_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_11_ce0 : OUT STD_LOGIC;
    in_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_12_ce0 : OUT STD_LOGIC;
    in_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_13_ce0 : OUT STD_LOGIC;
    in_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_14_ce0 : OUT STD_LOGIC;
    in_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_15_ce0 : OUT STD_LOGIC;
    in_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3553_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3553_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3553_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3557_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3557_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3557_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3561_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3561_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3561_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3565_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3565_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3565_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3569_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3569_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3569_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3573_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3573_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3573_p_ce : OUT STD_LOGIC;
    grp_fu_3576_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3576_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3576_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3576_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3576_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3576_p_ce : OUT STD_LOGIC;
    grp_fu_3582_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3582_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3582_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3582_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3582_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3582_p_ce : OUT STD_LOGIC;
    grp_fu_3588_p_din0 : OUT STD_LOGIC_VECTOR (28 downto 0);
    grp_fu_3588_p_din1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_fu_3588_p_dout0 : IN STD_LOGIC_VECTOR (56 downto 0);
    grp_fu_3588_p_ce : OUT STD_LOGIC;
    grp_fu_3592_p_din0 : OUT STD_LOGIC_VECTOR (79 downto 0);
    grp_fu_3592_p_din1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    grp_fu_3592_p_dout0 : IN STD_LOGIC_VECTOR (79 downto 0);
    grp_fu_3592_p_ce : OUT STD_LOGIC;
    grp_pow_generic_float_s_fu_3596_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_3596_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of llama_layer_RoPE_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C0000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000000000000000000000000000";
    constant ap_const_lv32_3C800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111100100000000000000000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv29_10000000 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_1001_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_1001_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal cos_K02_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_K02_q0 : STD_LOGIC_VECTOR (27 downto 0);
    signal cos_K13_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_K13_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal cos_K24_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_K24_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal sin_K05_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_K05_q0 : STD_LOGIC_VECTOR (28 downto 0);
    signal sin_K16_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_K16_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal sin_K27_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_K27_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv_reg_2418 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_24_reg_2424 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_24_reg_2424_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter20_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter21_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter22_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter23_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter24_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter25_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter26_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter27_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter28_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter29_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter30_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter31_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_24_reg_2424_pp0_iter32_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln16_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln16_1_fu_869_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter33_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter34_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter35_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_1_reg_2437_pp0_iter36_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln18_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal mul_reg_2451 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_reg_2457 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2462 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_ignoreCallOp114 : BOOLEAN;
    signal val_reg_2468 : STD_LOGIC_VECTOR (31 downto 0);
    signal din_sign_reg_2473 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_2473_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_fu_926_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_reg_2479 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_reg_2479_pp0_iter23_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_reg_2479_pp0_iter24_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_reg_2479_pp0_iter25_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal din_sig_fu_934_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal din_sig_reg_2486 : STD_LOGIC_VECTOR (22 downto 0);
    signal din_sig_reg_2486_pp0_iter23_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_2492 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_2492_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_2492_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_2492_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln379_fu_977_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln379_reg_2503 : STD_LOGIC_VECTOR (3 downto 0);
    signal Med_reg_2508 : STD_LOGIC_VECTOR (79 downto 0);
    signal zext_ln468_fu_1005_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal and_ln179_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2519_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_1053_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_2529 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_2529_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_2529_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_2529_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_2529_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_2529_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_2529_pp0_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_2529_pp0_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_bits_3_fu_1070_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_bits_3_reg_2535 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_4_reg_2540 : STD_LOGIC_VECTOR (28 downto 0);
    signal Ex_1_fu_1126_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_2545 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_2545_pp0_iter27_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_2545_pp0_iter28_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_2545_pp0_iter29_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_2545_pp0_iter30_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_2545_pp0_iter31_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_2545_pp0_iter32_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_2552 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_2558 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_s_reg_2558_pp0_iter27_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_s_reg_2558_pp0_iter28_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_s_reg_2558_pp0_iter29_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_s_reg_2558_pp0_iter30_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln186_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_2564 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_2564_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_2564_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_2564_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_2564_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_2564_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_2564_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal B_fu_1192_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_2573 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_2573_pp0_iter28_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal A_reg_2579 : STD_LOGIC_VECTOR (6 downto 0);
    signal B_trunc_reg_2584 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_reg_2599 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1_reg_2625 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_reg_2630 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_6_reg_2635 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2_reg_2640 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln3_reg_2645 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln4_reg_2650 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln75_1_fu_1431_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln75_1_reg_2655 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln75_1_reg_2655_pp0_iter31_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln80_1_fu_1453_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln80_1_reg_2660 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln80_1_fu_1458_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln80_fu_1462_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln16_1_fu_1483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_1_reg_2675 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_1_reg_2675_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal cos_result_fu_1498_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal cos_result_reg_2687 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln276_fu_1530_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln276_reg_2692 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_3_fu_1534_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_3_reg_2697 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln281_fu_1542_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln281_reg_2702 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_4_fu_1586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_4_reg_2708 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln281_2_fu_1594_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln281_2_reg_2713 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_2_fu_1598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_2_reg_2719 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln281_3_fu_1606_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln281_3_reg_2724 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln6_reg_2729 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln306_fu_1620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_reg_2734 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln16_fu_1658_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln16_reg_2779 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln16_reg_2779_pp0_iter34_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1_reg_2784 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln1_reg_2784_pp0_iter34_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln1_reg_2784_pp0_iter35_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln1_reg_2784_pp0_iter36_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_results_sign_2_fu_2075_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_results_sign_2_reg_2789 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_results_exp_1_fu_2081_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_results_exp_1_reg_2794 : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_results_sig_1_fu_2088_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sin_results_sig_1_reg_2799 : STD_LOGIC_VECTOR (22 downto 0);
    signal cos_results_sign_2_fu_2100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_results_sign_2_reg_2804 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_results_exp_2_fu_2117_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cos_results_exp_2_reg_2809 : STD_LOGIC_VECTOR (7 downto 0);
    signal cos_results_sig_1_fu_2133_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal cos_results_sig_1_reg_2814 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_9_fu_2141_p19 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_2819 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_2180_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_2825 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_out_2_fu_2242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_out_2_reg_2833 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_out_2_fu_2249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_out_2_reg_2840 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_2302_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_ignoreCallOp102 : BOOLEAN;
    signal zext_ln378_fu_968_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln72_fu_1233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_2363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_354 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln16_fu_858_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ref_4oPi_table_1001_ce0_local : STD_LOGIC;
    signal cos_K02_ce0_local : STD_LOGIC;
    signal cos_K13_ce0_local : STD_LOGIC;
    signal cos_K24_ce0_local : STD_LOGIC;
    signal sin_K05_ce0_local : STD_LOGIC;
    signal sin_K16_ce0_local : STD_LOGIC;
    signal sin_K27_ce0_local : STD_LOGIC;
    signal in_1_ce0_local : STD_LOGIC;
    signal in_3_ce0_local : STD_LOGIC;
    signal in_5_ce0_local : STD_LOGIC;
    signal in_7_ce0_local : STD_LOGIC;
    signal in_9_ce0_local : STD_LOGIC;
    signal in_11_ce0_local : STD_LOGIC;
    signal in_13_ce0_local : STD_LOGIC;
    signal in_15_ce0_local : STD_LOGIC;
    signal in_0_ce0_local : STD_LOGIC;
    signal in_2_ce0_local : STD_LOGIC;
    signal in_4_ce0_local : STD_LOGIC;
    signal in_6_ce0_local : STD_LOGIC;
    signal in_8_ce0_local : STD_LOGIC;
    signal in_10_ce0_local : STD_LOGIC;
    signal in_12_ce0_local : STD_LOGIC;
    signal in_14_ce0_local : STD_LOGIC;
    signal out_4_we0_local : STD_LOGIC;
    signal out_4_ce0_local : STD_LOGIC;
    signal out_5_we0_local : STD_LOGIC;
    signal out_5_ce0_local : STD_LOGIC;
    signal out_2_we0_local : STD_LOGIC;
    signal out_2_ce0_local : STD_LOGIC;
    signal out_3_we0_local : STD_LOGIC;
    signal out_3_ce0_local : STD_LOGIC;
    signal out_0_we0_local : STD_LOGIC;
    signal out_0_ce0_local : STD_LOGIC;
    signal out_1_we0_local : STD_LOGIC;
    signal out_1_ce0_local : STD_LOGIC;
    signal out_6_we0_local : STD_LOGIC;
    signal out_6_ce0_local : STD_LOGIC;
    signal out_7_we0_local : STD_LOGIC;
    signal out_7_ce0_local : STD_LOGIC;
    signal grp_fu_776_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_776_p0_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_781_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_781_p0_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_786_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_786_p0_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_786_p1_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_790_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_790_p0_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_790_p1_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_794_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_794_p0_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_794_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_794_p1_keep : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_798_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal head_dim_fu_872_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_fu_915_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln376_fu_944_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_fu_950_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_958_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln379_fu_981_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal shl_ln379_fu_984_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal X_fu_998_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln179_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_1_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_1043_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_bits_fu_1033_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln491_fu_1060_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_1_fu_1064_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal Ex_fu_1086_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Mx_zeros_fu_1105_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal Mx_zeros_fu_1105_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln504_fu_1113_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln453_fu_1091_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln505_fu_1122_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln504_fu_1117_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal sub_ln506_fu_1155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln506_fu_1160_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln506_1_fu_1170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln506_fu_1166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln506_fu_1173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln506_fu_1179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln506_1_fu_1185_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln69_fu_1227_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln69_fu_1216_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln69_fu_1227_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln69_fu_1227_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln73_fu_1301_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln73_fu_1301_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln73_fu_1301_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln74_fu_1332_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln74_fu_1332_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln74_fu_1332_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln78_fu_1363_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln78_fu_1363_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln79_fu_1394_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln79_fu_1394_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln74_2_fu_1423_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln75_fu_1426_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_2_fu_1420_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln80_fu_1437_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln80_1_fu_1440_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln80_fu_1443_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln80_2_fu_1449_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln16_1_fu_1474_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln75_fu_1495_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_fu_1514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_3_fu_1534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1546_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_bits_4_fu_1556_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_1568_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_4_fu_1586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_2_fu_1598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln5_fu_1504_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal c_1_fu_1677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_fu_1677_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln291_fu_1689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln291_fu_1692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln281_1_fu_1685_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_shift_1_fu_1697_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln291_1_fu_1712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln292_fu_1701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_1_fu_1706_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_2_fu_1722_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln287_fu_1729_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal newexp_2_fu_1733_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln291_1_fu_1716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1743_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_1753_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln291_3_fu_1774_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln291_2_fu_1777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_shift_2_fu_1782_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln291_2_fu_1796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln292_1_fu_1786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_4_fu_1791_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_5_fu_1805_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln163_fu_1771_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln300_fu_1816_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln287_1_fu_1812_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal newexp_fu_1822_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_1828_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln291_3_fu_1800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1845_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_fu_1855_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal sin_results_sign_fu_1879_p33 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_fu_1873_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p33 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_results_sign_fu_1879_p35 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln186_fu_2023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln306_fu_1836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln186_fu_2041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln186_fu_2034_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_1841_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln186_2_fu_2054_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_673_fu_1865_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal cos_results_sign_fu_1951_p35 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_results_sign_1_fu_2028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_results_exp_fu_2046_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_results_sig_fu_2061_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal cos_results_sign_1_fu_2069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_and_ln179_fu_2095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_674_fu_2113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_results_exp_1_fu_2106_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_exp_fu_1739_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cos_results_sig_1_cast_fu_2125_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal significand_fu_1763_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_9_fu_2141_p17 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_2180_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_2180_p18 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_5_fu_2220_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_6_fu_2227_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_out_fu_2234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_out_fu_2238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_2302_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln73_fu_1301_p00 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln73_fu_1301_p10 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln74_fu_1332_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln74_fu_1332_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln78_fu_1363_p00 : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln79_fu_1394_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal Mx_zeros_fu_1105_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal Mx_zeros_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_3_fu_1534_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_3_fu_1534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_4_fu_1586_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_4_fu_1586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_fu_1598_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_2_fu_1598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_1677_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_fu_1677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_results_sign_fu_1879_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_results_sign_fu_1879_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_results_sign_fu_1951_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2141_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_2141_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_2141_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_2141_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_2141_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_2141_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_2141_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_2141_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_2180_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2180_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2180_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2180_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2180_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2180_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2180_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2180_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2302_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2302_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2302_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2302_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2302_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2302_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2302_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2302_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component llama_layer_pow_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        exp : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_fmul_32ns_32ns_32_1_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_sitofp_32ns_32_3_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_fmsub_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_mul_29ns_28ns_57_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;


    component llama_layer_mul_80s_24ns_80_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component llama_layer_ctlz_30_30_1_1 IS
    generic (
        din_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component llama_layer_mul_15ns_15ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component llama_layer_mul_22ns_22ns_44_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component llama_layer_mul_15ns_14ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component llama_layer_mul_22ns_21s_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component llama_layer_mul_15ns_13s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component llama_layer_ctlz_32_32_1_1 IS
    generic (
        din_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_sparsemux_33_4_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        def : IN STD_LOGIC_VECTOR (0 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component llama_layer_sparsemux_17_3_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        def : IN STD_LOGIC_VECTOR (0 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component llama_layer_sparsemux_17_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_RoPE_ref_4oPi_table_100_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component llama_layer_RoPE_second_order_float_cos_K0_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component llama_layer_RoPE_second_order_float_cos_K1_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component llama_layer_RoPE_second_order_float_cos_K2_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component llama_layer_RoPE_second_order_float_sin_K0_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component llama_layer_RoPE_second_order_float_sin_K1_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component llama_layer_RoPE_second_order_float_sin_K2_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    ref_4oPi_table_1001_U : component llama_layer_RoPE_ref_4oPi_table_100_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_1001_address0,
        ce0 => ref_4oPi_table_1001_ce0_local,
        q0 => ref_4oPi_table_1001_q0);

    cos_K02_U : component llama_layer_RoPE_second_order_float_cos_K0_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 28,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_K02_address0,
        ce0 => cos_K02_ce0_local,
        q0 => cos_K02_q0);

    cos_K13_U : component llama_layer_RoPE_second_order_float_cos_K1_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 22,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_K13_address0,
        ce0 => cos_K13_ce0_local,
        q0 => cos_K13_q0);

    cos_K24_U : component llama_layer_RoPE_second_order_float_cos_K2_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 14,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_K24_address0,
        ce0 => cos_K24_ce0_local,
        q0 => cos_K24_q0);

    sin_K05_U : component llama_layer_RoPE_second_order_float_sin_K0_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 29,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_K05_address0,
        ce0 => sin_K05_ce0_local,
        q0 => sin_K05_q0);

    sin_K16_U : component llama_layer_RoPE_second_order_float_sin_K1_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 21,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_K16_address0,
        ce0 => sin_K16_ce0_local,
        q0 => sin_K16_q0);

    sin_K27_U : component llama_layer_RoPE_second_order_float_sin_K2_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 13,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_K27_address0,
        ce0 => sin_K27_ce0_local,
        q0 => sin_K27_q0);

    ctlz_30_30_1_1_U561 : component llama_layer_ctlz_30_30_1_1
    generic map (
        din_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din => Mx_zeros_fu_1105_p1,
        dout => Mx_zeros_fu_1105_p3);

    mul_15ns_15ns_30_1_1_U562 : component llama_layer_mul_15ns_15ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln69_fu_1227_p0,
        din1 => mul_ln69_fu_1227_p1,
        dout => mul_ln69_fu_1227_p2);

    mul_22ns_22ns_44_1_1_U563 : component llama_layer_mul_22ns_22ns_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln73_fu_1301_p0,
        din1 => mul_ln73_fu_1301_p1,
        dout => mul_ln73_fu_1301_p2);

    mul_15ns_14ns_29_1_1_U564 : component llama_layer_mul_15ns_14ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln74_fu_1332_p0,
        din1 => mul_ln74_fu_1332_p1,
        dout => mul_ln74_fu_1332_p2);

    mul_22ns_21s_43_1_1_U565 : component llama_layer_mul_22ns_21s_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 21,
        dout_WIDTH => 43)
    port map (
        din0 => mul_ln78_fu_1363_p0,
        din1 => sin_K16_q0,
        dout => mul_ln78_fu_1363_p2);

    mul_15ns_13s_28_1_1_U566 : component llama_layer_mul_15ns_13s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln79_fu_1394_p0,
        din1 => sin_K27_q0,
        dout => mul_ln79_fu_1394_p2);

    ctlz_32_32_1_1_U567 : component llama_layer_ctlz_32_32_1_1
    generic map (
        din_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din => c_3_fu_1534_p1,
        dout => c_3_fu_1534_p3);

    ctlz_32_32_1_1_U568 : component llama_layer_ctlz_32_32_1_1
    generic map (
        din_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din => c_4_fu_1586_p1,
        dout => c_4_fu_1586_p3);

    ctlz_32_32_1_1_U569 : component llama_layer_ctlz_32_32_1_1
    generic map (
        din_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din => c_2_fu_1598_p1,
        dout => c_2_fu_1598_p3);

    ctlz_32_32_1_1_U570 : component llama_layer_ctlz_32_32_1_1
    generic map (
        din_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din => c_1_fu_1677_p1,
        dout => c_1_fu_1677_p3);

    sparsemux_33_4_1_1_1_U571 : component llama_layer_sparsemux_33_4_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 1,
        CASE1 => "0001",
        din1_WIDTH => 1,
        CASE2 => "0010",
        din2_WIDTH => 1,
        CASE3 => "0011",
        din3_WIDTH => 1,
        CASE4 => "0100",
        din4_WIDTH => 1,
        CASE5 => "0101",
        din5_WIDTH => 1,
        CASE6 => "0110",
        din6_WIDTH => 1,
        CASE7 => "0111",
        din7_WIDTH => 1,
        CASE8 => "1000",
        din8_WIDTH => 1,
        CASE9 => "1001",
        din9_WIDTH => 1,
        CASE10 => "1010",
        din10_WIDTH => 1,
        CASE11 => "1011",
        din11_WIDTH => 1,
        CASE12 => "1100",
        din12_WIDTH => 1,
        CASE13 => "1101",
        din13_WIDTH => 1,
        CASE14 => "1110",
        din14_WIDTH => 1,
        CASE15 => "1111",
        din15_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        def => sin_results_sign_fu_1879_p33,
        sel => index_fu_1873_p3,
        dout => sin_results_sign_fu_1879_p35);

    sparsemux_33_4_1_1_1_U572 : component llama_layer_sparsemux_33_4_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 1,
        CASE1 => "0001",
        din1_WIDTH => 1,
        CASE2 => "0010",
        din2_WIDTH => 1,
        CASE3 => "0011",
        din3_WIDTH => 1,
        CASE4 => "0100",
        din4_WIDTH => 1,
        CASE5 => "0101",
        din5_WIDTH => 1,
        CASE6 => "0110",
        din6_WIDTH => 1,
        CASE7 => "0111",
        din7_WIDTH => 1,
        CASE8 => "1000",
        din8_WIDTH => 1,
        CASE9 => "1001",
        din9_WIDTH => 1,
        CASE10 => "1010",
        din10_WIDTH => 1,
        CASE11 => "1011",
        din11_WIDTH => 1,
        CASE12 => "1100",
        din12_WIDTH => 1,
        CASE13 => "1101",
        din13_WIDTH => 1,
        CASE14 => "1110",
        din14_WIDTH => 1,
        CASE15 => "1111",
        din15_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        def => cos_results_sign_fu_1951_p33,
        sel => index_fu_1873_p3,
        dout => cos_results_sign_fu_1951_p35);

    sparsemux_17_3_1_1_1_U573 : component llama_layer_sparsemux_17_3_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 1,
        CASE1 => "001",
        din1_WIDTH => 1,
        CASE2 => "010",
        din2_WIDTH => 1,
        CASE3 => "011",
        din3_WIDTH => 1,
        CASE4 => "100",
        din4_WIDTH => 1,
        CASE5 => "101",
        din5_WIDTH => 1,
        CASE6 => "110",
        din6_WIDTH => 1,
        CASE7 => "111",
        din7_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        def => tmp_9_fu_2141_p17,
        sel => k_reg_2529_pp0_iter32_reg,
        dout => tmp_9_fu_2141_p19);

    sparsemux_17_4_32_1_1_U574 : component llama_layer_sparsemux_17_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0010",
        din1_WIDTH => 32,
        CASE2 => "0100",
        din2_WIDTH => 32,
        CASE3 => "0110",
        din3_WIDTH => 32,
        CASE4 => "1000",
        din4_WIDTH => 32,
        CASE5 => "1010",
        din5_WIDTH => 32,
        CASE6 => "1100",
        din6_WIDTH => 32,
        CASE7 => "1110",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => in_1_q0,
        din1 => in_3_q0,
        din2 => in_5_q0,
        din3 => in_7_q0,
        din4 => in_9_q0,
        din5 => in_11_q0,
        din6 => in_13_q0,
        din7 => in_15_q0,
        def => tmp_11_fu_2180_p17,
        sel => tmp_11_fu_2180_p18,
        dout => tmp_11_fu_2180_p19);

    sparsemux_17_4_32_1_1_U575 : component llama_layer_sparsemux_17_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0010",
        din1_WIDTH => 32,
        CASE2 => "0100",
        din2_WIDTH => 32,
        CASE3 => "0110",
        din3_WIDTH => 32,
        CASE4 => "1000",
        din4_WIDTH => 32,
        CASE5 => "1010",
        din5_WIDTH => 32,
        CASE6 => "1100",
        din6_WIDTH => 32,
        CASE7 => "1110",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => in_0_q0,
        din1 => in_2_q0,
        din2 => in_4_q0,
        din3 => in_6_q0,
        din4 => in_8_q0,
        din5 => in_10_q0,
        din6 => in_12_q0,
        din7 => in_14_q0,
        def => tmp_10_fu_2302_p17,
        sel => trunc_ln16_reg_2779_pp0_iter34_reg,
        dout => tmp_10_fu_2302_p19);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_354 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_852_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_354 <= add_ln16_fu_858_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                A_reg_2579 <= select_ln506_1_fu_1185_p3(28 downto 22);
                B_reg_2573 <= B_fu_1192_p1;
                B_reg_2573_pp0_iter28_reg <= B_reg_2573;
                B_trunc_reg_2584 <= select_ln506_1_fu_1185_p3(21 downto 7);
                Ex_1_reg_2545 <= Ex_1_fu_1126_p2;
                Ex_1_reg_2545_pp0_iter27_reg <= Ex_1_reg_2545;
                Ex_1_reg_2545_pp0_iter28_reg <= Ex_1_reg_2545_pp0_iter27_reg;
                Ex_1_reg_2545_pp0_iter29_reg <= Ex_1_reg_2545_pp0_iter28_reg;
                Ex_1_reg_2545_pp0_iter30_reg <= Ex_1_reg_2545_pp0_iter29_reg;
                Ex_1_reg_2545_pp0_iter31_reg <= Ex_1_reg_2545_pp0_iter30_reg;
                Ex_1_reg_2545_pp0_iter32_reg <= Ex_1_reg_2545_pp0_iter31_reg;
                Med_reg_2508 <= shl_ln379_fu_984_p2(99 downto 20);
                Mx_bits_3_reg_2535 <= Mx_bits_3_fu_1070_p3;
                add_ln75_1_reg_2655 <= add_ln75_1_fu_1431_p2;
                add_ln75_1_reg_2655_pp0_iter31_reg <= add_ln75_1_reg_2655;
                add_ln80_1_reg_2660 <= add_ln80_1_fu_1453_p2;
                and_ln179_reg_2519 <= and_ln179_fu_1027_p2;
                and_ln179_reg_2519_pp0_iter25_reg <= and_ln179_reg_2519;
                and_ln179_reg_2519_pp0_iter26_reg <= and_ln179_reg_2519_pp0_iter25_reg;
                and_ln179_reg_2519_pp0_iter27_reg <= and_ln179_reg_2519_pp0_iter26_reg;
                and_ln179_reg_2519_pp0_iter28_reg <= and_ln179_reg_2519_pp0_iter27_reg;
                and_ln179_reg_2519_pp0_iter29_reg <= and_ln179_reg_2519_pp0_iter28_reg;
                and_ln179_reg_2519_pp0_iter30_reg <= and_ln179_reg_2519_pp0_iter29_reg;
                and_ln179_reg_2519_pp0_iter31_reg <= and_ln179_reg_2519_pp0_iter30_reg;
                and_ln179_reg_2519_pp0_iter32_reg <= and_ln179_reg_2519_pp0_iter31_reg;
                c_2_reg_2719 <= c_2_fu_1598_p3;
                c_3_reg_2697 <= c_3_fu_1534_p3;
                c_4_reg_2708 <= c_4_fu_1586_p3;
                c_out_2_reg_2840 <= c_out_2_fu_2249_p3;
                closepath_reg_2492 <= closepath_fu_938_p2;
                closepath_reg_2492_pp0_iter23_reg <= closepath_reg_2492;
                closepath_reg_2492_pp0_iter24_reg <= closepath_reg_2492_pp0_iter23_reg;
                closepath_reg_2492_pp0_iter25_reg <= closepath_reg_2492_pp0_iter24_reg;
                cos_result_reg_2687 <= cos_result_fu_1498_p2;
                cos_results_exp_2_reg_2809 <= cos_results_exp_2_fu_2117_p3;
                cos_results_sig_1_reg_2814 <= cos_results_sig_1_fu_2133_p3;
                cos_results_sign_2_reg_2804 <= cos_results_sign_2_fu_2100_p2;
                din_exp_reg_2479 <= data_fu_915_p1(30 downto 23);
                din_exp_reg_2479_pp0_iter23_reg <= din_exp_reg_2479;
                din_exp_reg_2479_pp0_iter24_reg <= din_exp_reg_2479_pp0_iter23_reg;
                din_exp_reg_2479_pp0_iter25_reg <= din_exp_reg_2479_pp0_iter24_reg;
                din_sig_reg_2486 <= din_sig_fu_934_p1;
                din_sig_reg_2486_pp0_iter23_reg <= din_sig_reg_2486;
                din_sign_reg_2473 <= data_fu_915_p1(31 downto 31);
                din_sign_reg_2473_pp0_iter23_reg <= din_sign_reg_2473;
                din_sign_reg_2473_pp0_iter24_reg <= din_sign_reg_2473_pp0_iter23_reg;
                din_sign_reg_2473_pp0_iter25_reg <= din_sign_reg_2473_pp0_iter24_reg;
                din_sign_reg_2473_pp0_iter26_reg <= din_sign_reg_2473_pp0_iter25_reg;
                din_sign_reg_2473_pp0_iter27_reg <= din_sign_reg_2473_pp0_iter26_reg;
                din_sign_reg_2473_pp0_iter28_reg <= din_sign_reg_2473_pp0_iter27_reg;
                din_sign_reg_2473_pp0_iter29_reg <= din_sign_reg_2473_pp0_iter28_reg;
                din_sign_reg_2473_pp0_iter30_reg <= din_sign_reg_2473_pp0_iter29_reg;
                din_sign_reg_2473_pp0_iter31_reg <= din_sign_reg_2473_pp0_iter30_reg;
                din_sign_reg_2473_pp0_iter32_reg <= din_sign_reg_2473_pp0_iter31_reg;
                i_24_reg_2424_pp0_iter10_reg <= i_24_reg_2424_pp0_iter9_reg;
                i_24_reg_2424_pp0_iter11_reg <= i_24_reg_2424_pp0_iter10_reg;
                i_24_reg_2424_pp0_iter12_reg <= i_24_reg_2424_pp0_iter11_reg;
                i_24_reg_2424_pp0_iter13_reg <= i_24_reg_2424_pp0_iter12_reg;
                i_24_reg_2424_pp0_iter14_reg <= i_24_reg_2424_pp0_iter13_reg;
                i_24_reg_2424_pp0_iter15_reg <= i_24_reg_2424_pp0_iter14_reg;
                i_24_reg_2424_pp0_iter16_reg <= i_24_reg_2424_pp0_iter15_reg;
                i_24_reg_2424_pp0_iter17_reg <= i_24_reg_2424_pp0_iter16_reg;
                i_24_reg_2424_pp0_iter18_reg <= i_24_reg_2424_pp0_iter17_reg;
                i_24_reg_2424_pp0_iter19_reg <= i_24_reg_2424_pp0_iter18_reg;
                i_24_reg_2424_pp0_iter20_reg <= i_24_reg_2424_pp0_iter19_reg;
                i_24_reg_2424_pp0_iter21_reg <= i_24_reg_2424_pp0_iter20_reg;
                i_24_reg_2424_pp0_iter22_reg <= i_24_reg_2424_pp0_iter21_reg;
                i_24_reg_2424_pp0_iter23_reg <= i_24_reg_2424_pp0_iter22_reg;
                i_24_reg_2424_pp0_iter24_reg <= i_24_reg_2424_pp0_iter23_reg;
                i_24_reg_2424_pp0_iter25_reg <= i_24_reg_2424_pp0_iter24_reg;
                i_24_reg_2424_pp0_iter26_reg <= i_24_reg_2424_pp0_iter25_reg;
                i_24_reg_2424_pp0_iter27_reg <= i_24_reg_2424_pp0_iter26_reg;
                i_24_reg_2424_pp0_iter28_reg <= i_24_reg_2424_pp0_iter27_reg;
                i_24_reg_2424_pp0_iter29_reg <= i_24_reg_2424_pp0_iter28_reg;
                i_24_reg_2424_pp0_iter2_reg <= i_24_reg_2424_pp0_iter1_reg;
                i_24_reg_2424_pp0_iter30_reg <= i_24_reg_2424_pp0_iter29_reg;
                i_24_reg_2424_pp0_iter31_reg <= i_24_reg_2424_pp0_iter30_reg;
                i_24_reg_2424_pp0_iter32_reg <= i_24_reg_2424_pp0_iter31_reg;
                i_24_reg_2424_pp0_iter3_reg <= i_24_reg_2424_pp0_iter2_reg;
                i_24_reg_2424_pp0_iter4_reg <= i_24_reg_2424_pp0_iter3_reg;
                i_24_reg_2424_pp0_iter5_reg <= i_24_reg_2424_pp0_iter4_reg;
                i_24_reg_2424_pp0_iter6_reg <= i_24_reg_2424_pp0_iter5_reg;
                i_24_reg_2424_pp0_iter7_reg <= i_24_reg_2424_pp0_iter6_reg;
                i_24_reg_2424_pp0_iter8_reg <= i_24_reg_2424_pp0_iter7_reg;
                i_24_reg_2424_pp0_iter9_reg <= i_24_reg_2424_pp0_iter8_reg;
                icmp_ln186_reg_2564 <= icmp_ln186_fu_1150_p2;
                icmp_ln186_reg_2564_pp0_iter27_reg <= icmp_ln186_reg_2564;
                icmp_ln186_reg_2564_pp0_iter28_reg <= icmp_ln186_reg_2564_pp0_iter27_reg;
                icmp_ln186_reg_2564_pp0_iter29_reg <= icmp_ln186_reg_2564_pp0_iter28_reg;
                icmp_ln186_reg_2564_pp0_iter30_reg <= icmp_ln186_reg_2564_pp0_iter29_reg;
                icmp_ln186_reg_2564_pp0_iter31_reg <= icmp_ln186_reg_2564_pp0_iter30_reg;
                icmp_ln186_reg_2564_pp0_iter32_reg <= icmp_ln186_reg_2564_pp0_iter31_reg;
                icmp_ln306_reg_2734 <= icmp_ln306_fu_1620_p2;
                k_reg_2529 <= k_fu_1053_p3;
                k_reg_2529_pp0_iter26_reg <= k_reg_2529;
                k_reg_2529_pp0_iter27_reg <= k_reg_2529_pp0_iter26_reg;
                k_reg_2529_pp0_iter28_reg <= k_reg_2529_pp0_iter27_reg;
                k_reg_2529_pp0_iter29_reg <= k_reg_2529_pp0_iter28_reg;
                k_reg_2529_pp0_iter30_reg <= k_reg_2529_pp0_iter29_reg;
                k_reg_2529_pp0_iter31_reg <= k_reg_2529_pp0_iter30_reg;
                k_reg_2529_pp0_iter32_reg <= k_reg_2529_pp0_iter31_reg;
                lshr_ln1_reg_2784 <= i_24_reg_2424_pp0_iter32_reg(9 downto 3);
                lshr_ln1_reg_2784_pp0_iter34_reg <= lshr_ln1_reg_2784;
                lshr_ln1_reg_2784_pp0_iter35_reg <= lshr_ln1_reg_2784_pp0_iter34_reg;
                lshr_ln1_reg_2784_pp0_iter36_reg <= lshr_ln1_reg_2784_pp0_iter35_reg;
                mul_reg_2451 <= grp_fu_3553_p_dout0;
                s_out_2_reg_2833 <= s_out_2_fu_2242_p3;
                sin_results_exp_1_reg_2794 <= sin_results_exp_1_fu_2081_p3;
                sin_results_sig_1_reg_2799 <= sin_results_sig_1_fu_2088_p3;
                sin_results_sign_2_reg_2789 <= sin_results_sign_2_fu_2075_p3;
                tmp_11_reg_2825 <= tmp_11_fu_2180_p19;
                tmp_16_reg_2552 <= Ex_1_fu_1126_p2(7 downto 7);
                tmp_2_reg_2630 <= mul_ln73_fu_1301_p2(43 downto 23);
                tmp_3_reg_2599 <= mul_ln69_fu_1227_p2(29 downto 15);
                tmp_4_reg_2540 <= Mx_bits_3_fu_1070_p3(57 downto 29);
                tmp_6_reg_2635 <= mul_ln74_fu_1332_p2(28 downto 16);
                tmp_9_reg_2819 <= tmp_9_fu_2141_p19;
                tmp_s_reg_2558 <= shl_ln504_fu_1117_p2(57 downto 29);
                tmp_s_reg_2558_pp0_iter27_reg <= tmp_s_reg_2558;
                tmp_s_reg_2558_pp0_iter28_reg <= tmp_s_reg_2558_pp0_iter27_reg;
                tmp_s_reg_2558_pp0_iter29_reg <= tmp_s_reg_2558_pp0_iter28_reg;
                tmp_s_reg_2558_pp0_iter30_reg <= tmp_s_reg_2558_pp0_iter29_reg;
                trunc_ln16_1_reg_2437_pp0_iter10_reg <= trunc_ln16_1_reg_2437_pp0_iter9_reg;
                trunc_ln16_1_reg_2437_pp0_iter11_reg <= trunc_ln16_1_reg_2437_pp0_iter10_reg;
                trunc_ln16_1_reg_2437_pp0_iter12_reg <= trunc_ln16_1_reg_2437_pp0_iter11_reg;
                trunc_ln16_1_reg_2437_pp0_iter13_reg <= trunc_ln16_1_reg_2437_pp0_iter12_reg;
                trunc_ln16_1_reg_2437_pp0_iter14_reg <= trunc_ln16_1_reg_2437_pp0_iter13_reg;
                trunc_ln16_1_reg_2437_pp0_iter15_reg <= trunc_ln16_1_reg_2437_pp0_iter14_reg;
                trunc_ln16_1_reg_2437_pp0_iter16_reg <= trunc_ln16_1_reg_2437_pp0_iter15_reg;
                trunc_ln16_1_reg_2437_pp0_iter17_reg <= trunc_ln16_1_reg_2437_pp0_iter16_reg;
                trunc_ln16_1_reg_2437_pp0_iter18_reg <= trunc_ln16_1_reg_2437_pp0_iter17_reg;
                trunc_ln16_1_reg_2437_pp0_iter19_reg <= trunc_ln16_1_reg_2437_pp0_iter18_reg;
                trunc_ln16_1_reg_2437_pp0_iter20_reg <= trunc_ln16_1_reg_2437_pp0_iter19_reg;
                trunc_ln16_1_reg_2437_pp0_iter21_reg <= trunc_ln16_1_reg_2437_pp0_iter20_reg;
                trunc_ln16_1_reg_2437_pp0_iter22_reg <= trunc_ln16_1_reg_2437_pp0_iter21_reg;
                trunc_ln16_1_reg_2437_pp0_iter23_reg <= trunc_ln16_1_reg_2437_pp0_iter22_reg;
                trunc_ln16_1_reg_2437_pp0_iter24_reg <= trunc_ln16_1_reg_2437_pp0_iter23_reg;
                trunc_ln16_1_reg_2437_pp0_iter25_reg <= trunc_ln16_1_reg_2437_pp0_iter24_reg;
                trunc_ln16_1_reg_2437_pp0_iter26_reg <= trunc_ln16_1_reg_2437_pp0_iter25_reg;
                trunc_ln16_1_reg_2437_pp0_iter27_reg <= trunc_ln16_1_reg_2437_pp0_iter26_reg;
                trunc_ln16_1_reg_2437_pp0_iter28_reg <= trunc_ln16_1_reg_2437_pp0_iter27_reg;
                trunc_ln16_1_reg_2437_pp0_iter29_reg <= trunc_ln16_1_reg_2437_pp0_iter28_reg;
                trunc_ln16_1_reg_2437_pp0_iter2_reg <= trunc_ln16_1_reg_2437;
                trunc_ln16_1_reg_2437_pp0_iter30_reg <= trunc_ln16_1_reg_2437_pp0_iter29_reg;
                trunc_ln16_1_reg_2437_pp0_iter31_reg <= trunc_ln16_1_reg_2437_pp0_iter30_reg;
                trunc_ln16_1_reg_2437_pp0_iter32_reg <= trunc_ln16_1_reg_2437_pp0_iter31_reg;
                trunc_ln16_1_reg_2437_pp0_iter33_reg <= trunc_ln16_1_reg_2437_pp0_iter32_reg;
                trunc_ln16_1_reg_2437_pp0_iter34_reg <= trunc_ln16_1_reg_2437_pp0_iter33_reg;
                trunc_ln16_1_reg_2437_pp0_iter35_reg <= trunc_ln16_1_reg_2437_pp0_iter34_reg;
                trunc_ln16_1_reg_2437_pp0_iter36_reg <= trunc_ln16_1_reg_2437_pp0_iter35_reg;
                trunc_ln16_1_reg_2437_pp0_iter3_reg <= trunc_ln16_1_reg_2437_pp0_iter2_reg;
                trunc_ln16_1_reg_2437_pp0_iter4_reg <= trunc_ln16_1_reg_2437_pp0_iter3_reg;
                trunc_ln16_1_reg_2437_pp0_iter5_reg <= trunc_ln16_1_reg_2437_pp0_iter4_reg;
                trunc_ln16_1_reg_2437_pp0_iter6_reg <= trunc_ln16_1_reg_2437_pp0_iter5_reg;
                trunc_ln16_1_reg_2437_pp0_iter7_reg <= trunc_ln16_1_reg_2437_pp0_iter6_reg;
                trunc_ln16_1_reg_2437_pp0_iter8_reg <= trunc_ln16_1_reg_2437_pp0_iter7_reg;
                trunc_ln16_1_reg_2437_pp0_iter9_reg <= trunc_ln16_1_reg_2437_pp0_iter8_reg;
                trunc_ln16_reg_2779 <= trunc_ln16_fu_1658_p1;
                trunc_ln16_reg_2779_pp0_iter34_reg <= trunc_ln16_reg_2779;
                trunc_ln1_reg_2625 <= cos_K02_q0(27 downto 1);
                trunc_ln276_reg_2692 <= trunc_ln276_fu_1530_p1;
                trunc_ln281_2_reg_2713 <= trunc_ln281_2_fu_1594_p1;
                trunc_ln281_3_reg_2724 <= trunc_ln281_3_fu_1606_p1;
                trunc_ln281_reg_2702 <= trunc_ln281_fu_1542_p1;
                trunc_ln2_reg_2640 <= mul_ln78_fu_1363_p2(42 downto 23);
                trunc_ln379_reg_2503 <= trunc_ln379_fu_977_p1;
                trunc_ln3_reg_2645 <= mul_ln79_fu_1394_p2(27 downto 16);
                trunc_ln4_reg_2650 <= sin_K05_q0(28 downto 1);
                trunc_ln6_reg_2729 <= grp_fu_3588_p_dout0(55 downto 29);
                val_reg_2468 <= grp_fu_3561_p_dout0;
                y_assign_reg_2457 <= grp_fu_3557_p_dout0;
                    zext_ln16_1_reg_2675(5 downto 0) <= zext_ln16_1_fu_1483_p1(5 downto 0);
                    zext_ln16_1_reg_2675_pp0_iter33_reg(5 downto 0) <= zext_ln16_1_reg_2675(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                conv_reg_2418 <= grp_fu_3573_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                grp_fu_776_p0_keep <= grp_fu_3573_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                grp_fu_781_p0_keep <= mul_reg_2451;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                grp_fu_786_p0_keep <= conv_reg_2418;
                grp_fu_786_p1_keep <= tmp_reg_2462;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                grp_fu_790_p0_keep <= tmp_11_reg_2825;
                grp_fu_790_p1_keep <= s_out_2_fu_2242_p3;
                grp_fu_794_p0_keep <= tmp_11_reg_2825;
                grp_fu_794_p1_keep <= c_out_2_fu_2249_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_24_reg_2424 <= i_fu_354;
                i_24_reg_2424_pp0_iter1_reg <= i_24_reg_2424;
                trunc_ln16_1_reg_2437 <= trunc_ln16_1_fu_869_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp114)) then
                tmp_reg_2462 <= grp_pow_generic_float_s_fu_3596_p_dout0;
            end if;
        end if;
    end process;
    zext_ln16_1_reg_2675(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln16_1_reg_2675_pp0_iter33_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln16_fu_852_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_852_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_852_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    B_fu_1192_p1 <= select_ln506_1_fu_1185_p3(22 - 1 downto 0);
    Ex_1_fu_1126_p2 <= std_logic_vector(unsigned(select_ln453_fu_1091_p3) - unsigned(trunc_ln505_fu_1122_p1));
    Ex_fu_1086_p2 <= std_logic_vector(unsigned(din_exp_reg_2479_pp0_iter25_reg) + unsigned(ap_const_lv8_83));
    Mx_bits_1_fu_1064_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(Mx_bits_fu_1033_p4));
    Mx_bits_3_fu_1070_p3 <= 
        Mx_bits_1_fu_1064_p2 when (trunc_ln491_fu_1060_p1(0) = '1') else 
        Mx_bits_fu_1033_p4;
    Mx_bits_fu_1033_p4 <= grp_fu_3592_p_dout0(76 downto 19);
    Mx_zeros_fu_1105_p1 <= (tmp_4_reg_2540 & ap_const_lv1_1);
    X_fu_998_p3 <= (ap_const_lv1_1 & din_sig_reg_2486_pp0_iter23_reg);
    add_ln16_fu_858_p2 <= std_logic_vector(unsigned(i_fu_354) + unsigned(ap_const_lv10_2));
    add_ln300_fu_1816_p2 <= std_logic_vector(signed(sext_ln163_fu_1771_p1) + signed(ap_const_lv9_7F));
    add_ln376_fu_944_p2 <= std_logic_vector(unsigned(din_exp_fu_926_p3) + unsigned(ap_const_lv8_C2));
    add_ln75_1_fu_1431_p2 <= std_logic_vector(unsigned(add_ln75_fu_1426_p2) + unsigned(zext_ln73_2_fu_1420_p1));
    add_ln75_fu_1426_p2 <= std_logic_vector(unsigned(trunc_ln1_reg_2625) + unsigned(zext_ln74_2_fu_1423_p1));
    add_ln80_1_fu_1453_p2 <= std_logic_vector(signed(sext_ln80_2_fu_1449_p1) + signed(trunc_ln4_reg_2650));
    add_ln80_fu_1443_p2 <= std_logic_vector(signed(sext_ln80_fu_1437_p1) + signed(sext_ln80_1_fu_1440_p1));
    addr_fu_950_p3 <= 
        ap_const_lv8_3F when (closepath_fu_938_p2(0) = '1') else 
        add_ln376_fu_944_p2;
    and_ln179_fu_1027_p2 <= (icmp_ln179_fu_1017_p2 and icmp_ln179_1_fu_1022_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state42 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp114 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp102 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln16_fu_852_p2)
    begin
        if ((icmp_ln16_fu_852_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_1677_p1 <= (trunc_ln276_reg_2692 & ap_const_lv19_40000);
    c_2_fu_1598_p1 <= (tmp_8_fu_1568_p4 & ap_const_lv19_40000);
    c_3_fu_1534_p1 <= (tmp_5_fu_1514_p3 & ap_const_lv16_8000);
    c_4_fu_1586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_bits_4_fu_1556_p3),32));
    c_out_2_fu_2249_p3 <= 
        c_out_fu_2238_p1 when (tmp_9_reg_2819(0) = '1') else 
        s_out_fu_2234_p1;
    c_out_fu_2238_p1 <= t_6_fu_2227_p4;
    closepath_fu_938_p2 <= "1" when (unsigned(din_exp_fu_926_p3) < unsigned(ap_const_lv8_7E)) else "0";
    cos_K02_address0 <= zext_ln72_fu_1233_p1(7 - 1 downto 0);

    cos_K02_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_K02_ce0_local <= ap_const_logic_1;
        else 
            cos_K02_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    cos_K13_address0 <= zext_ln72_fu_1233_p1(7 - 1 downto 0);

    cos_K13_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_K13_ce0_local <= ap_const_logic_1;
        else 
            cos_K13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    cos_K24_address0 <= zext_ln72_fu_1233_p1(7 - 1 downto 0);

    cos_K24_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_K24_ce0_local <= ap_const_logic_1;
        else 
            cos_K24_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    cos_result_fu_1498_p2 <= std_logic_vector(signed(ap_const_lv29_10000000) - signed(zext_ln75_fu_1495_p1));
    cos_results_exp_1_fu_2106_p3 <= 
        ap_const_lv8_7F when (and_ln179_reg_2519_pp0_iter32_reg(0) = '1') else 
        ap_const_lv8_FF;
    cos_results_exp_2_fu_2117_p3 <= 
        cos_results_exp_1_fu_2106_p3 when (empty_674_fu_2113_p2(0) = '1') else 
        out_exp_fu_1739_p1;
    cos_results_sig_1_cast_fu_2125_p3 <= 
        ap_const_lv23_7FFFFF when (not_and_ln179_fu_2095_p2(0) = '1') else 
        ap_const_lv23_0;
    cos_results_sig_1_fu_2133_p3 <= 
        cos_results_sig_1_cast_fu_2125_p3 when (empty_674_fu_2113_p2(0) = '1') else 
        significand_fu_1763_p3;
    cos_results_sign_1_fu_2069_p2 <= (xor_ln186_fu_2023_p2 and cos_results_sign_fu_1951_p35);
    cos_results_sign_2_fu_2100_p2 <= (not_and_ln179_fu_2095_p2 and cos_results_sign_1_fu_2069_p2);
    cos_results_sign_fu_1951_p33 <= "X";
    data_fu_915_p1 <= val_reg_2468;
    din_exp_fu_926_p3 <= data_fu_915_p1(30 downto 23);
    din_sig_fu_934_p1 <= data_fu_915_p1(23 - 1 downto 0);
    empty_673_fu_1865_p3 <= 
        tmp_14_fu_1845_p4 when (icmp_ln292_1_fu_1786_p2(0) = '1') else 
        tmp_15_fu_1855_p4;
    empty_674_fu_2113_p2 <= (icmp_ln186_reg_2564_pp0_iter32_reg or and_ln179_reg_2519_pp0_iter32_reg);
    empty_fu_1841_p1 <= newexp_fu_1822_p2(8 - 1 downto 0);
    grp_fu_3553_p_din0 <= grp_fu_776_p0;
    grp_fu_3553_p_din1 <= grp_fu_776_p1;
    grp_fu_3557_p_din0 <= grp_fu_781_p0;
    grp_fu_3557_p_din1 <= grp_fu_781_p1;
    grp_fu_3561_p_din0 <= grp_fu_786_p0;
    grp_fu_3561_p_din1 <= grp_fu_786_p1;
    grp_fu_3565_p_din0 <= grp_fu_790_p0;
    grp_fu_3565_p_din1 <= grp_fu_790_p1;
    grp_fu_3569_p_din0 <= grp_fu_794_p0;
    grp_fu_3569_p_din1 <= grp_fu_794_p1;
    grp_fu_3573_p_ce <= ap_const_logic_1;
    grp_fu_3573_p_din0 <= grp_fu_798_p0;
    grp_fu_3576_p_ce <= ap_const_logic_1;
    grp_fu_3576_p_din0 <= ap_const_lv32_0;
    grp_fu_3576_p_din1 <= tmp_10_fu_2302_p19;
    grp_fu_3576_p_din2 <= s_out_2_reg_2833;
    grp_fu_3576_p_din3 <= grp_fu_3569_p_dout0;
    grp_fu_3582_p_ce <= ap_const_logic_1;
    grp_fu_3582_p_din0 <= ap_const_lv32_0;
    grp_fu_3582_p_din1 <= tmp_10_fu_2302_p19;
    grp_fu_3582_p_din2 <= c_out_2_reg_2840;
    grp_fu_3582_p_din3 <= grp_fu_3565_p_dout0;
    grp_fu_3588_p_ce <= ap_const_logic_1;
    grp_fu_3588_p_din0 <= zext_ln80_1_fu_1458_p1(29 - 1 downto 0);
    grp_fu_3588_p_din1 <= zext_ln80_fu_1462_p1(28 - 1 downto 0);
    grp_fu_3592_p_ce <= ap_const_logic_1;
    grp_fu_3592_p_din0 <= Med_reg_2508;
    grp_fu_3592_p_din1 <= zext_ln468_fu_1005_p1(24 - 1 downto 0);

    grp_fu_776_p0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3, grp_fu_776_p0_keep, grp_fu_3573_p_dout0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_776_p0 <= grp_fu_3573_p_dout0;
        else 
            grp_fu_776_p0 <= grp_fu_776_p0_keep;
        end if; 
    end process;

    grp_fu_776_p1 <= ap_const_lv32_C0000000;

    grp_fu_781_p0_assign_proc : process(ap_block_pp0_stage0_11001, mul_reg_2451, ap_enable_reg_pp0_iter5, grp_fu_781_p0_keep)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_781_p0 <= mul_reg_2451;
        else 
            grp_fu_781_p0 <= grp_fu_781_p0_keep;
        end if; 
    end process;

    grp_fu_781_p1 <= ap_const_lv32_3C800000;

    grp_fu_786_p0_assign_proc : process(conv_reg_2418, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20, grp_fu_786_p0_keep)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_786_p0 <= conv_reg_2418;
        else 
            grp_fu_786_p0 <= grp_fu_786_p0_keep;
        end if; 
    end process;


    grp_fu_786_p1_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_2462, ap_enable_reg_pp0_iter20, grp_fu_786_p1_keep)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_786_p1 <= tmp_reg_2462;
        else 
            grp_fu_786_p1 <= grp_fu_786_p1_keep;
        end if; 
    end process;


    grp_fu_790_p0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_11_reg_2825, ap_enable_reg_pp0_iter34, grp_fu_790_p0_keep)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_790_p0 <= tmp_11_reg_2825;
        else 
            grp_fu_790_p0 <= grp_fu_790_p0_keep;
        end if; 
    end process;


    grp_fu_790_p1_assign_proc : process(ap_block_pp0_stage0_11001, s_out_2_fu_2242_p3, ap_enable_reg_pp0_iter34, grp_fu_790_p1_keep)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_790_p1 <= s_out_2_fu_2242_p3;
        else 
            grp_fu_790_p1 <= grp_fu_790_p1_keep;
        end if; 
    end process;


    grp_fu_794_p0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_11_reg_2825, ap_enable_reg_pp0_iter34, grp_fu_794_p0_keep)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_794_p0 <= tmp_11_reg_2825;
        else 
            grp_fu_794_p0 <= grp_fu_794_p0_keep;
        end if; 
    end process;


    grp_fu_794_p1_assign_proc : process(ap_block_pp0_stage0_11001, c_out_2_fu_2249_p3, ap_enable_reg_pp0_iter34, grp_fu_794_p1_keep)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_794_p1 <= c_out_2_fu_2249_p3;
        else 
            grp_fu_794_p1 <= grp_fu_794_p1_keep;
        end if; 
    end process;


    grp_fu_798_p0_assign_proc : process(ap_CS_fsm_state1, pos_r, ap_CS_fsm_pp0_stage0, zext_ln18_fu_875_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_798_p0 <= zext_ln18_fu_875_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_798_p0 <= pos_r;
        else 
            grp_fu_798_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pow_generic_float_s_fu_3596_p_din1 <= y_assign_reg_2457;
    head_dim_fu_872_p1 <= i_24_reg_2424(6 - 1 downto 0);
    icmp_ln16_fu_852_p2 <= "1" when (unsigned(i_fu_354) < unsigned(ap_const_lv10_300)) else "0";
    icmp_ln179_1_fu_1022_p2 <= "1" when (din_sig_reg_2486_pp0_iter23_reg = ap_const_lv23_0) else "0";
    icmp_ln179_fu_1017_p2 <= "1" when (din_exp_reg_2479_pp0_iter23_reg = ap_const_lv8_0) else "0";
    icmp_ln186_fu_1150_p2 <= "1" when (din_exp_reg_2479_pp0_iter25_reg = ap_const_lv8_FF) else "0";
    icmp_ln292_1_fu_1786_p2 <= "1" when (trunc_ln281_2_reg_2713 = ap_const_lv6_10) else "0";
    icmp_ln292_fu_1701_p2 <= "1" when (trunc_ln281_reg_2702 = ap_const_lv6_10) else "0";
    icmp_ln306_fu_1620_p2 <= "1" when (trunc_ln5_fu_1504_p4 = ap_const_lv28_0) else "0";
    in_0_address0 <= zext_ln16_1_reg_2675_pp0_iter33_reg(6 - 1 downto 0);
    in_0_ce0 <= in_0_ce0_local;

    in_0_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_reg_2779, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (trunc_ln16_reg_2779 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_0_ce0_local <= ap_const_logic_1;
        else 
            in_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_10_address0 <= zext_ln16_1_reg_2675_pp0_iter33_reg(6 - 1 downto 0);
    in_10_ce0 <= in_10_ce0_local;

    in_10_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_reg_2779, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (trunc_ln16_reg_2779 = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_10_ce0_local <= ap_const_logic_1;
        else 
            in_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_11_address0 <= zext_ln16_1_fu_1483_p1(6 - 1 downto 0);
    in_11_ce0 <= in_11_ce0_local;

    in_11_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_11_ce0_local <= ap_const_logic_1;
        else 
            in_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_12_address0 <= zext_ln16_1_reg_2675_pp0_iter33_reg(6 - 1 downto 0);
    in_12_ce0 <= in_12_ce0_local;

    in_12_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_reg_2779, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (trunc_ln16_reg_2779 = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_12_ce0_local <= ap_const_logic_1;
        else 
            in_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_13_address0 <= zext_ln16_1_fu_1483_p1(6 - 1 downto 0);
    in_13_ce0 <= in_13_ce0_local;

    in_13_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_13_ce0_local <= ap_const_logic_1;
        else 
            in_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_14_address0 <= zext_ln16_1_reg_2675_pp0_iter33_reg(6 - 1 downto 0);
    in_14_ce0 <= in_14_ce0_local;

    in_14_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_reg_2779, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (trunc_ln16_reg_2779 = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_14_ce0_local <= ap_const_logic_1;
        else 
            in_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_15_address0 <= zext_ln16_1_fu_1483_p1(6 - 1 downto 0);
    in_15_ce0 <= in_15_ce0_local;

    in_15_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_15_ce0_local <= ap_const_logic_1;
        else 
            in_15_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_1_address0 <= zext_ln16_1_fu_1483_p1(6 - 1 downto 0);
    in_1_ce0 <= in_1_ce0_local;

    in_1_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_1_ce0_local <= ap_const_logic_1;
        else 
            in_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_2_address0 <= zext_ln16_1_reg_2675_pp0_iter33_reg(6 - 1 downto 0);
    in_2_ce0 <= in_2_ce0_local;

    in_2_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_reg_2779, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (trunc_ln16_reg_2779 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_2_ce0_local <= ap_const_logic_1;
        else 
            in_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_3_address0 <= zext_ln16_1_fu_1483_p1(6 - 1 downto 0);
    in_3_ce0 <= in_3_ce0_local;

    in_3_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_3_ce0_local <= ap_const_logic_1;
        else 
            in_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_4_address0 <= zext_ln16_1_reg_2675_pp0_iter33_reg(6 - 1 downto 0);
    in_4_ce0 <= in_4_ce0_local;

    in_4_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_reg_2779, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (trunc_ln16_reg_2779 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_4_ce0_local <= ap_const_logic_1;
        else 
            in_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_5_address0 <= zext_ln16_1_fu_1483_p1(6 - 1 downto 0);
    in_5_ce0 <= in_5_ce0_local;

    in_5_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_5_ce0_local <= ap_const_logic_1;
        else 
            in_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_6_address0 <= zext_ln16_1_reg_2675_pp0_iter33_reg(6 - 1 downto 0);
    in_6_ce0 <= in_6_ce0_local;

    in_6_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_reg_2779, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (trunc_ln16_reg_2779 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_6_ce0_local <= ap_const_logic_1;
        else 
            in_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_7_address0 <= zext_ln16_1_fu_1483_p1(6 - 1 downto 0);
    in_7_ce0 <= in_7_ce0_local;

    in_7_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_7_ce0_local <= ap_const_logic_1;
        else 
            in_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_8_address0 <= zext_ln16_1_reg_2675_pp0_iter33_reg(6 - 1 downto 0);
    in_8_ce0 <= in_8_ce0_local;

    in_8_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_reg_2779, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (trunc_ln16_reg_2779 = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_8_ce0_local <= ap_const_logic_1;
        else 
            in_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_9_address0 <= zext_ln16_1_fu_1483_p1(6 - 1 downto 0);
    in_9_ce0 <= in_9_ce0_local;

    in_9_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_9_ce0_local <= ap_const_logic_1;
        else 
            in_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_shift_1_fu_1697_p1 <= shl_ln291_fu_1692_p2(28 - 1 downto 0);
    in_shift_2_fu_1782_p1 <= shl_ln291_2_fu_1777_p2(28 - 1 downto 0);
    index_fu_1873_p3 <= (din_sign_reg_2473_pp0_iter32_reg & k_reg_2529_pp0_iter32_reg);
    k_fu_1053_p3 <= 
        ap_const_lv3_0 when (closepath_reg_2492_pp0_iter24_reg(0) = '1') else 
        trunc_ln_fu_1043_p4;
    lshr_ln16_1_fu_1474_p4 <= i_24_reg_2424_pp0_iter31_reg(9 downto 4);
    lshr_ln506_fu_1173_p2 <= std_logic_vector(shift_right(unsigned(zext_ln506_1_fu_1170_p1),to_integer(unsigned('0' & zext_ln506_fu_1166_p1(31-1 downto 0)))));
    lshr_ln_fu_958_p4 <= addr_fu_950_p3(7 downto 4);
    mul_ln69_fu_1227_p0 <= zext_ln69_fu_1216_p1(15 - 1 downto 0);
    mul_ln69_fu_1227_p1 <= zext_ln69_fu_1216_p1(15 - 1 downto 0);
    mul_ln73_fu_1301_p0 <= mul_ln73_fu_1301_p00(22 - 1 downto 0);
    mul_ln73_fu_1301_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cos_K13_q0),44));
    mul_ln73_fu_1301_p1 <= mul_ln73_fu_1301_p10(22 - 1 downto 0);
    mul_ln73_fu_1301_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_2573_pp0_iter28_reg),44));
    mul_ln74_fu_1332_p0 <= mul_ln74_fu_1332_p00(15 - 1 downto 0);
    mul_ln74_fu_1332_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_2599),29));
    mul_ln74_fu_1332_p1 <= mul_ln74_fu_1332_p10(14 - 1 downto 0);
    mul_ln74_fu_1332_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cos_K24_q0),29));
    mul_ln78_fu_1363_p0 <= mul_ln78_fu_1363_p00(22 - 1 downto 0);
    mul_ln78_fu_1363_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_2573_pp0_iter28_reg),43));
    mul_ln79_fu_1394_p0 <= mul_ln79_fu_1394_p00(15 - 1 downto 0);
    mul_ln79_fu_1394_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_2599),28));
    newexp_2_fu_1733_p2 <= (zext_ln287_fu_1729_p1 xor ap_const_lv7_7F);
    newexp_fu_1822_p2 <= std_logic_vector(unsigned(add_ln300_fu_1816_p2) - unsigned(zext_ln287_1_fu_1812_p1));
    not_and_ln179_fu_2095_p2 <= (ap_const_lv1_1 xor and_ln179_reg_2519_pp0_iter32_reg);
    or_ln186_fu_2041_p2 <= (or_ln306_fu_1836_p2 or icmp_ln186_reg_2564_pp0_iter32_reg);
    or_ln306_fu_1836_p2 <= (tmp_17_fu_1828_p3 or icmp_ln306_reg_2734);
    out_0_address0 <= zext_ln16_fu_2363_p1(7 - 1 downto 0);
    out_0_ce0 <= out_0_ce0_local;

    out_0_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_0_ce0_local <= ap_const_logic_1;
        else 
            out_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_0_d0 <= grp_fu_3582_p_dout0;
    out_0_we0 <= out_0_we0_local;

    out_0_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_0_we0_local <= ap_const_logic_1;
        else 
            out_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_1_address0 <= zext_ln16_fu_2363_p1(7 - 1 downto 0);
    out_1_ce0 <= out_1_ce0_local;

    out_1_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_1_ce0_local <= ap_const_logic_1;
        else 
            out_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_1_d0 <= grp_fu_3576_p_dout0;
    out_1_we0 <= out_1_we0_local;

    out_1_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_1_we0_local <= ap_const_logic_1;
        else 
            out_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_2_address0 <= zext_ln16_fu_2363_p1(7 - 1 downto 0);
    out_2_ce0 <= out_2_ce0_local;

    out_2_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_2_ce0_local <= ap_const_logic_1;
        else 
            out_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_2_d0 <= grp_fu_3582_p_dout0;
    out_2_we0 <= out_2_we0_local;

    out_2_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_2_we0_local <= ap_const_logic_1;
        else 
            out_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_3_address0 <= zext_ln16_fu_2363_p1(7 - 1 downto 0);
    out_3_ce0 <= out_3_ce0_local;

    out_3_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_3_ce0_local <= ap_const_logic_1;
        else 
            out_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_3_d0 <= grp_fu_3576_p_dout0;
    out_3_we0 <= out_3_we0_local;

    out_3_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_3_we0_local <= ap_const_logic_1;
        else 
            out_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_4_address0 <= zext_ln16_fu_2363_p1(7 - 1 downto 0);
    out_4_ce0 <= out_4_ce0_local;

    out_4_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_4_ce0_local <= ap_const_logic_1;
        else 
            out_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_4_d0 <= grp_fu_3582_p_dout0;
    out_4_we0 <= out_4_we0_local;

    out_4_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_4_we0_local <= ap_const_logic_1;
        else 
            out_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_5_address0 <= zext_ln16_fu_2363_p1(7 - 1 downto 0);
    out_5_ce0 <= out_5_ce0_local;

    out_5_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_5_ce0_local <= ap_const_logic_1;
        else 
            out_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_5_d0 <= grp_fu_3576_p_dout0;
    out_5_we0 <= out_5_we0_local;

    out_5_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_5_we0_local <= ap_const_logic_1;
        else 
            out_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_6_address0 <= zext_ln16_fu_2363_p1(7 - 1 downto 0);
    out_6_ce0 <= out_6_ce0_local;

    out_6_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if ((not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_2)) and not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_4)) and not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_0)) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_6_ce0_local <= ap_const_logic_1;
        else 
            out_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_6_d0 <= grp_fu_3582_p_dout0;
    out_6_we0 <= out_6_we0_local;

    out_6_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if ((not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_2)) and not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_4)) and not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_0)) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_6_we0_local <= ap_const_logic_1;
        else 
            out_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_7_address0 <= zext_ln16_fu_2363_p1(7 - 1 downto 0);
    out_7_ce0 <= out_7_ce0_local;

    out_7_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if ((not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_2)) and not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_4)) and not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_0)) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_7_ce0_local <= ap_const_logic_1;
        else 
            out_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_7_d0 <= grp_fu_3576_p_dout0;
    out_7_we0 <= out_7_we0_local;

    out_7_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln16_1_reg_2437_pp0_iter36_reg, ap_enable_reg_pp0_iter37)
    begin
        if ((not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_2)) and not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_4)) and not((trunc_ln16_1_reg_2437_pp0_iter36_reg = ap_const_lv3_0)) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_7_we0_local <= ap_const_logic_1;
        else 
            out_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_bits_4_fu_1556_p3 <= (tmp_7_fu_1546_p4 & ap_const_lv16_8000);
    out_exp_fu_1739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newexp_2_fu_1733_p2),8));
    ref_4oPi_table_1001_address0 <= zext_ln378_fu_968_p1(4 - 1 downto 0);

    ref_4oPi_table_1001_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ref_4oPi_table_1001_ce0_local <= ap_const_logic_1;
        else 
            ref_4oPi_table_1001_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_out_2_fu_2242_p3 <= 
        s_out_fu_2234_p1 when (tmp_9_reg_2819(0) = '1') else 
        c_out_fu_2238_p1;
    s_out_fu_2234_p1 <= t_5_fu_2220_p4;
    select_ln186_2_fu_2054_p3 <= 
        ap_const_lv23_7FFFFF when (icmp_ln186_reg_2564_pp0_iter32_reg(0) = '1') else 
        ap_const_lv23_0;
    select_ln186_fu_2034_p3 <= 
        ap_const_lv8_FF when (icmp_ln186_reg_2564_pp0_iter32_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln453_fu_1091_p3 <= 
        Ex_fu_1086_p2 when (closepath_reg_2492_pp0_iter25_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln506_1_fu_1185_p3 <= 
        lshr_ln506_fu_1173_p2 when (tmp_16_reg_2552(0) = '1') else 
        shl_ln506_fu_1179_p2;
    select_ln506_fu_1160_p3 <= 
        sub_ln506_fu_1155_p2 when (tmp_16_reg_2552(0) = '1') else 
        Ex_1_reg_2545;
        sext_ln163_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_1_reg_2545_pp0_iter32_reg),9));

        sext_ln80_1_fu_1440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_2645),21));

        sext_ln80_2_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln80_fu_1443_p2),28));

        sext_ln80_fu_1437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_2640),21));

    shift_1_fu_1706_p2 <= std_logic_vector(unsigned(trunc_ln281_1_fu_1685_p1) + unsigned(ap_const_lv6_10));
    shift_2_fu_1722_p3 <= 
        shift_1_fu_1706_p2 when (icmp_ln292_fu_1701_p2(0) = '1') else 
        trunc_ln281_reg_2702;
    shift_4_fu_1791_p2 <= std_logic_vector(unsigned(trunc_ln281_3_reg_2724) + unsigned(ap_const_lv6_10));
    shift_5_fu_1805_p3 <= 
        shift_4_fu_1791_p2 when (icmp_ln292_1_fu_1786_p2(0) = '1') else 
        trunc_ln281_2_reg_2713;
    shl_ln291_1_fu_1716_p2 <= std_logic_vector(shift_left(unsigned(zext_ln291_1_fu_1712_p1),to_integer(unsigned('0' & c_1_fu_1677_p3(31-1 downto 0)))));
    shl_ln291_2_fu_1777_p2 <= std_logic_vector(shift_left(unsigned(zext_ln291_3_fu_1774_p1),to_integer(unsigned('0' & c_4_reg_2708(31-1 downto 0)))));
    shl_ln291_3_fu_1800_p2 <= std_logic_vector(shift_left(unsigned(zext_ln291_2_fu_1796_p1),to_integer(unsigned('0' & c_2_reg_2719(31-1 downto 0)))));
    shl_ln291_fu_1692_p2 <= std_logic_vector(shift_left(unsigned(zext_ln291_fu_1689_p1),to_integer(unsigned('0' & c_3_reg_2697(31-1 downto 0)))));
    shl_ln379_fu_984_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_1001_q0),to_integer(unsigned('0' & zext_ln379_fu_981_p1(31-1 downto 0)))));
    shl_ln504_fu_1117_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_3_reg_2535),to_integer(unsigned('0' & zext_ln504_fu_1113_p1(31-1 downto 0)))));
    shl_ln506_fu_1179_p2 <= std_logic_vector(shift_left(unsigned(zext_ln506_1_fu_1170_p1),to_integer(unsigned('0' & zext_ln506_fu_1166_p1(31-1 downto 0)))));
    significand_fu_1763_p3 <= 
        tmp_12_fu_1743_p4 when (icmp_ln292_fu_1701_p2(0) = '1') else 
        tmp_13_fu_1753_p4;
    sin_K05_address0 <= zext_ln72_fu_1233_p1(7 - 1 downto 0);

    sin_K05_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_K05_ce0_local <= ap_const_logic_1;
        else 
            sin_K05_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    sin_K16_address0 <= zext_ln72_fu_1233_p1(7 - 1 downto 0);

    sin_K16_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_K16_ce0_local <= ap_const_logic_1;
        else 
            sin_K16_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    sin_K27_address0 <= zext_ln72_fu_1233_p1(7 - 1 downto 0);

    sin_K27_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_K27_ce0_local <= ap_const_logic_1;
        else 
            sin_K27_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    sin_results_exp_1_fu_2081_p3 <= 
        ap_const_lv8_0 when (and_ln179_reg_2519_pp0_iter32_reg(0) = '1') else 
        sin_results_exp_fu_2046_p3;
    sin_results_exp_fu_2046_p3 <= 
        select_ln186_fu_2034_p3 when (or_ln186_fu_2041_p2(0) = '1') else 
        empty_fu_1841_p1;
    sin_results_sig_1_fu_2088_p3 <= 
        ap_const_lv23_0 when (and_ln179_reg_2519_pp0_iter32_reg(0) = '1') else 
        sin_results_sig_fu_2061_p3;
    sin_results_sig_fu_2061_p3 <= 
        select_ln186_2_fu_2054_p3 when (or_ln186_fu_2041_p2(0) = '1') else 
        empty_673_fu_1865_p3;
    sin_results_sign_1_fu_2028_p2 <= (xor_ln186_fu_2023_p2 and sin_results_sign_fu_1879_p35);
    sin_results_sign_2_fu_2075_p3 <= 
        din_sign_reg_2473_pp0_iter32_reg when (and_ln179_reg_2519_pp0_iter32_reg(0) = '1') else 
        sin_results_sign_1_fu_2028_p2;
    sin_results_sign_fu_1879_p33 <= "X";
    sub_ln506_fu_1155_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(Ex_1_reg_2545));
    t_5_fu_2220_p4 <= ((cos_results_sign_2_reg_2804 & cos_results_exp_2_reg_2809) & cos_results_sig_1_reg_2814);
    t_6_fu_2227_p4 <= ((sin_results_sign_2_reg_2789 & sin_results_exp_1_reg_2794) & sin_results_sig_1_reg_2799);
    tmp_10_fu_2302_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_11_fu_2180_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_11_fu_2180_p18 <= i_24_reg_2424_pp0_iter32_reg(4 - 1 downto 0);
    tmp_12_fu_1743_p4 <= shl_ln291_1_fu_1716_p2(27 downto 5);
    tmp_13_fu_1753_p4 <= shl_ln291_fu_1692_p2(27 downto 5);
    tmp_14_fu_1845_p4 <= shl_ln291_3_fu_1800_p2(27 downto 5);
    tmp_15_fu_1855_p4 <= shl_ln291_2_fu_1777_p2(27 downto 5);
    tmp_17_fu_1828_p3 <= newexp_fu_1822_p2(8 downto 8);
    tmp_5_fu_1514_p3 <= cos_result_fu_1498_p2(28 downto 13);
    tmp_7_fu_1546_p4 <= grp_fu_3588_p_dout0(56 downto 42);
    tmp_8_fu_1568_p4 <= grp_fu_3588_p_dout0(41 downto 29);
    tmp_9_fu_2141_p17 <= "X";
    trunc_ln16_1_fu_869_p1 <= i_24_reg_2424(3 - 1 downto 0);
    trunc_ln16_fu_1658_p1 <= i_24_reg_2424_pp0_iter32_reg(4 - 1 downto 0);
    trunc_ln276_fu_1530_p1 <= cos_result_fu_1498_p2(13 - 1 downto 0);
    trunc_ln281_1_fu_1685_p1 <= c_1_fu_1677_p3(6 - 1 downto 0);
    trunc_ln281_2_fu_1594_p1 <= c_4_fu_1586_p3(6 - 1 downto 0);
    trunc_ln281_3_fu_1606_p1 <= c_2_fu_1598_p3(6 - 1 downto 0);
    trunc_ln281_fu_1542_p1 <= c_3_fu_1534_p3(6 - 1 downto 0);
    trunc_ln379_fu_977_p1 <= addr_fu_950_p3(4 - 1 downto 0);
    trunc_ln491_fu_1060_p1 <= k_fu_1053_p3(1 - 1 downto 0);
    trunc_ln505_fu_1122_p1 <= Mx_zeros_fu_1105_p3(8 - 1 downto 0);
    trunc_ln5_fu_1504_p4 <= grp_fu_3588_p_dout0(56 downto 29);
    trunc_ln_fu_1043_p4 <= grp_fu_3592_p_dout0(79 downto 77);
    xor_ln186_fu_2023_p2 <= (icmp_ln186_reg_2564_pp0_iter32_reg xor ap_const_lv1_1);
    zext_ln16_1_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln16_1_fu_1474_p4),64));
    zext_ln16_fu_2363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_2784_pp0_iter36_reg),64));
    zext_ln18_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(head_dim_fu_872_p1),32));
    zext_ln287_1_fu_1812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_5_fu_1805_p3),9));
    zext_ln287_fu_1729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_2_fu_1722_p3),7));
    zext_ln291_1_fu_1712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_shift_1_fu_1697_p1),32));
    zext_ln291_2_fu_1796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_shift_2_fu_1782_p1),32));
    zext_ln291_3_fu_1774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln6_reg_2729),32));
    zext_ln291_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cos_result_reg_2687),32));
    zext_ln378_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_958_p4),64));
    zext_ln379_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln379_reg_2503),100));
    zext_ln468_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_fu_998_p3),80));
    zext_ln504_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_fu_1105_p3),58));
    zext_ln506_1_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_2558),32));
    zext_ln506_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln506_fu_1160_p3),32));
    zext_ln69_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_reg_2584),30));
    zext_ln72_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_reg_2579),64));
    zext_ln73_2_fu_1420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_2630),27));
    zext_ln74_2_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_2635),27));
    zext_ln75_fu_1495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_reg_2655_pp0_iter31_reg),29));
    zext_ln80_1_fu_1458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_2558_pp0_iter30_reg),57));
    zext_ln80_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_1_reg_2660),57));
end behav;
