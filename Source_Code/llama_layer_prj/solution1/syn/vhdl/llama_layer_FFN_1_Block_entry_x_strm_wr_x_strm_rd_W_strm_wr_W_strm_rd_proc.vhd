-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity llama_layer_FFN_1_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_gmem2_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_0_WREADY : IN STD_LOGIC;
    m_axi_gmem2_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_RVALID : IN STD_LOGIC;
    m_axi_gmem2_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_0_RLAST : IN STD_LOGIC;
    m_axi_gmem2_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_gmem2_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_0_BVALID : IN STD_LOGIC;
    m_axi_gmem2_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    W1_vec : IN STD_LOGIC_VECTOR (63 downto 0);
    W2_vec : IN STD_LOGIC_VECTOR (63 downto 0);
    W3_vec : IN STD_LOGIC_VECTOR (63 downto 0);
    res_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_strm_full_n : IN STD_LOGIC;
    res_strm_write : OUT STD_LOGIC;
    res_strm_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    res_strm_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_ce0 : OUT STD_LOGIC;
    ffn_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ffn_input_44_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_44_ce0 : OUT STD_LOGIC;
    ffn_input_44_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ffn_input_45_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_45_ce0 : OUT STD_LOGIC;
    ffn_input_45_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ffn_input_46_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_46_ce0 : OUT STD_LOGIC;
    ffn_input_46_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ffn_input_47_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_47_ce0 : OUT STD_LOGIC;
    ffn_input_47_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ffn_input_48_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_48_ce0 : OUT STD_LOGIC;
    ffn_input_48_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ffn_input_49_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_49_ce0 : OUT STD_LOGIC;
    ffn_input_49_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ffn_input_50_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ffn_input_50_ce0 : OUT STD_LOGIC;
    ffn_input_50_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of llama_layer_FFN_1_Block_entry_x_strm_wr_x_strm_rd_W_strm_wr_W_strm_rd_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal W1_vec_read_reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal W2_vec_read_reg_287 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal W3_vec_read_reg_292 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_push_tensor1d_fu_136_ap_start : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ap_done : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ap_idle : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ap_ready : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_x_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor1d_fu_136_x_strm_write : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ffn_input_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_fu_136_ffn_input_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ffn_input_44_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_fu_136_ffn_input_44_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ffn_input_45_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_fu_136_ffn_input_45_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ffn_input_46_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_fu_136_ffn_input_46_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ffn_input_47_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_fu_136_ffn_input_47_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ffn_input_48_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_fu_136_ffn_input_48_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ffn_input_49_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_fu_136_ffn_input_49_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ffn_input_50_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_fu_136_ffn_input_50_ce0 : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_ap_start : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_ap_done : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_ap_idle : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_ap_ready : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WLAST : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_RREADY : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_BREADY : STD_LOGIC;
    signal grp_push_tensor2d_bycol_fu_157_W_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_fu_157_W_strm_write : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_ap_start : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_ap_done : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_ap_idle : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_ap_ready : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_z1_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_fu_166_z1_strm_write : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_x_strm_read : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_W_strm_read : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_grp_fu_297_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_fu_166_grp_fu_297_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_fu_166_grp_fu_297_p_din2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_fu_166_grp_fu_297_p_din3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_fu_166_grp_fu_297_p_ce : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ap_start : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ap_done : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ap_idle : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ap_ready : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_x_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor1d_2_fu_173_x_strm_write : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ffn_input_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_2_fu_173_ffn_input_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ffn_input_44_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_2_fu_173_ffn_input_44_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ffn_input_45_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_2_fu_173_ffn_input_45_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ffn_input_46_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_2_fu_173_ffn_input_46_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ffn_input_47_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_2_fu_173_ffn_input_47_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ffn_input_48_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_2_fu_173_ffn_input_48_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ffn_input_49_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_2_fu_173_ffn_input_49_ce0 : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ffn_input_50_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_push_tensor1d_2_fu_173_ffn_input_50_ce0 : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_ap_start : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_ap_done : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_ap_idle : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_ap_ready : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WLAST : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_RREADY : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_BREADY : STD_LOGIC;
    signal grp_push_tensor2d_bycol_3_fu_194_W_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_3_fu_194_W_strm_write : STD_LOGIC;
    signal grp_Multiply_VecMat_4_fu_203_ap_start : STD_LOGIC;
    signal grp_Multiply_VecMat_4_fu_203_ap_done : STD_LOGIC;
    signal grp_Multiply_VecMat_4_fu_203_ap_idle : STD_LOGIC;
    signal grp_Multiply_VecMat_4_fu_203_ap_ready : STD_LOGIC;
    signal grp_Multiply_VecMat_4_fu_203_z2_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_4_fu_203_z2_strm_write : STD_LOGIC;
    signal grp_Multiply_VecMat_4_fu_203_x_strm_read : STD_LOGIC;
    signal grp_Multiply_VecMat_4_fu_203_W_strm_read : STD_LOGIC;
    signal grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_ce : STD_LOGIC;
    signal grp_Swish_fu_210_ap_start : STD_LOGIC;
    signal grp_Swish_fu_210_ap_done : STD_LOGIC;
    signal grp_Swish_fu_210_ap_idle : STD_LOGIC;
    signal grp_Swish_fu_210_ap_ready : STD_LOGIC;
    signal grp_Swish_fu_210_z2_strm_read : STD_LOGIC;
    signal grp_Swish_fu_210_z2_Silu_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Swish_fu_210_z2_Silu_strm_write : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_ap_start : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_ap_done : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_ap_idle : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_ap_ready : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WLAST : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARVALID : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_RREADY : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_BREADY : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_W_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_push_tensor2d_bycol_5_fu_216_W_strm_write : STD_LOGIC;
    signal grp_Multiply_Vec_fu_225_ap_start : STD_LOGIC;
    signal grp_Multiply_Vec_fu_225_ap_done : STD_LOGIC;
    signal grp_Multiply_Vec_fu_225_ap_idle : STD_LOGIC;
    signal grp_Multiply_Vec_fu_225_ap_ready : STD_LOGIC;
    signal grp_Multiply_Vec_fu_225_z1_strm_read : STD_LOGIC;
    signal grp_Multiply_Vec_fu_225_z2_Silu_strm_read : STD_LOGIC;
    signal grp_Multiply_Vec_fu_225_z3_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_Vec_fu_225_z3_strm_write : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_ap_start : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_ap_done : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_ap_idle : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_ap_ready : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_res_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_6_fu_232_res_strm_write : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_z3_strm_read : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_W_strm_read : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_ce : STD_LOGIC;
    signal grp_push_tensor1d_fu_136_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call27 : BOOLEAN;
    signal x_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal x_strm_full_n : STD_LOGIC;
    signal x_strm_write : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_push_tensor2d_bycol_fu_157_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call28 : BOOLEAN;
    signal W_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal W_strm_full_n : STD_LOGIC;
    signal W_strm_write : STD_LOGIC;
    signal grp_Multiply_VecMat_fu_166_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal z1_strm_full_n : STD_LOGIC;
    signal z1_strm_write : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal x_strm_empty_n : STD_LOGIC;
    signal x_strm_read : STD_LOGIC;
    signal W_strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal W_strm_empty_n : STD_LOGIC;
    signal W_strm_read : STD_LOGIC;
    signal grp_push_tensor1d_2_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_push_tensor2d_bycol_3_fu_194_ap_start_reg : STD_LOGIC := '0';
    signal grp_Multiply_VecMat_4_fu_203_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal z2_strm_full_n : STD_LOGIC;
    signal z2_strm_write : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_Swish_fu_210_ap_start_reg : STD_LOGIC := '0';
    signal z2_Silu_strm_full_n : STD_LOGIC;
    signal z2_Silu_strm_write : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal z2_strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z2_strm_empty_n : STD_LOGIC;
    signal z2_strm_read : STD_LOGIC;
    signal grp_push_tensor2d_bycol_5_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal grp_Multiply_Vec_fu_225_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal z3_strm_full_n : STD_LOGIC;
    signal z3_strm_write : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal z1_strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z1_strm_empty_n : STD_LOGIC;
    signal z1_strm_read : STD_LOGIC;
    signal z2_Silu_strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z2_Silu_strm_empty_n : STD_LOGIC;
    signal z2_Silu_strm_read : STD_LOGIC;
    signal grp_Multiply_VecMat_6_fu_232_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal z3_strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z3_strm_empty_n : STD_LOGIC;
    signal z3_strm_read : STD_LOGIC;
    signal grp_fu_297_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_ce : STD_LOGIC;
    signal pre_grp_fu_297_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_297_p4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component llama_layer_push_tensor1d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_strm_full_n : IN STD_LOGIC;
        x_strm_write : OUT STD_LOGIC;
        ffn_input_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_ce0 : OUT STD_LOGIC;
        ffn_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_44_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_44_ce0 : OUT STD_LOGIC;
        ffn_input_44_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_45_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_45_ce0 : OUT STD_LOGIC;
        ffn_input_45_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_46_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_46_ce0 : OUT STD_LOGIC;
        ffn_input_46_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_47_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_47_ce0 : OUT STD_LOGIC;
        ffn_input_47_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_48_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_48_ce0 : OUT STD_LOGIC;
        ffn_input_48_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_49_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_49_ce0 : OUT STD_LOGIC;
        ffn_input_49_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_50_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_50_ce0 : OUT STD_LOGIC;
        ffn_input_50_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_push_tensor2d_bycol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_WREADY : IN STD_LOGIC;
        m_axi_gmem2_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RVALID : IN STD_LOGIC;
        m_axi_gmem2_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_RLAST : IN STD_LOGIC;
        m_axi_gmem2_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_gmem2_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_BVALID : IN STD_LOGIC;
        m_axi_gmem2_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        W_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_strm_full_n : IN STD_LOGIC;
        W_strm_write : OUT STD_LOGIC;
        tsor : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component llama_layer_Multiply_VecMat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z1_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z1_strm_full_n : IN STD_LOGIC;
        z1_strm_write : OUT STD_LOGIC;
        x_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        x_strm_empty_n : IN STD_LOGIC;
        x_strm_read : OUT STD_LOGIC;
        W_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        W_strm_empty_n : IN STD_LOGIC;
        W_strm_read : OUT STD_LOGIC;
        grp_fu_297_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_ce : OUT STD_LOGIC );
    end component;


    component llama_layer_push_tensor1d_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_strm_full_n : IN STD_LOGIC;
        x_strm_write : OUT STD_LOGIC;
        ffn_input_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_ce0 : OUT STD_LOGIC;
        ffn_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_44_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_44_ce0 : OUT STD_LOGIC;
        ffn_input_44_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_45_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_45_ce0 : OUT STD_LOGIC;
        ffn_input_45_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_46_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_46_ce0 : OUT STD_LOGIC;
        ffn_input_46_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_47_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_47_ce0 : OUT STD_LOGIC;
        ffn_input_47_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_48_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_48_ce0 : OUT STD_LOGIC;
        ffn_input_48_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_49_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_49_ce0 : OUT STD_LOGIC;
        ffn_input_49_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ffn_input_50_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ffn_input_50_ce0 : OUT STD_LOGIC;
        ffn_input_50_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_push_tensor2d_bycol_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_WREADY : IN STD_LOGIC;
        m_axi_gmem2_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RVALID : IN STD_LOGIC;
        m_axi_gmem2_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_RLAST : IN STD_LOGIC;
        m_axi_gmem2_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_gmem2_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_BVALID : IN STD_LOGIC;
        m_axi_gmem2_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        W_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_strm_full_n : IN STD_LOGIC;
        W_strm_write : OUT STD_LOGIC;
        tsor : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component llama_layer_Multiply_VecMat_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z2_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z2_strm_full_n : IN STD_LOGIC;
        z2_strm_write : OUT STD_LOGIC;
        x_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        x_strm_empty_n : IN STD_LOGIC;
        x_strm_read : OUT STD_LOGIC;
        W_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        W_strm_empty_n : IN STD_LOGIC;
        W_strm_read : OUT STD_LOGIC;
        grp_fu_297_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_ce : OUT STD_LOGIC );
    end component;


    component llama_layer_Swish IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z2_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z2_strm_empty_n : IN STD_LOGIC;
        z2_strm_read : OUT STD_LOGIC;
        z2_Silu_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z2_Silu_strm_full_n : IN STD_LOGIC;
        z2_Silu_strm_write : OUT STD_LOGIC );
    end component;


    component llama_layer_push_tensor2d_bycol_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_WREADY : IN STD_LOGIC;
        m_axi_gmem2_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RVALID : IN STD_LOGIC;
        m_axi_gmem2_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_RLAST : IN STD_LOGIC;
        m_axi_gmem2_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_gmem2_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_BVALID : IN STD_LOGIC;
        m_axi_gmem2_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        W_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_strm_full_n : IN STD_LOGIC;
        W_strm_write : OUT STD_LOGIC;
        tsor : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component llama_layer_Multiply_Vec IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z1_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z1_strm_empty_n : IN STD_LOGIC;
        z1_strm_read : OUT STD_LOGIC;
        z2_Silu_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z2_Silu_strm_empty_n : IN STD_LOGIC;
        z2_Silu_strm_read : OUT STD_LOGIC;
        z3_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z3_strm_full_n : IN STD_LOGIC;
        z3_strm_write : OUT STD_LOGIC );
    end component;


    component llama_layer_Multiply_VecMat_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_strm_full_n : IN STD_LOGIC;
        res_strm_write : OUT STD_LOGIC;
        res_strm_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        res_strm_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        z3_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z3_strm_empty_n : IN STD_LOGIC;
        z3_strm_read : OUT STD_LOGIC;
        W_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        W_strm_empty_n : IN STD_LOGIC;
        W_strm_read : OUT STD_LOGIC;
        grp_fu_297_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_ce : OUT STD_LOGIC );
    end component;


    component llama_layer_fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component llama_layer_fifo_w32_d64_A_x2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_push_tensor1d_fu_136 : component llama_layer_push_tensor1d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_push_tensor1d_fu_136_ap_start,
        ap_done => grp_push_tensor1d_fu_136_ap_done,
        ap_idle => grp_push_tensor1d_fu_136_ap_idle,
        ap_ready => grp_push_tensor1d_fu_136_ap_ready,
        x_strm_din => grp_push_tensor1d_fu_136_x_strm_din,
        x_strm_full_n => x_strm_full_n,
        x_strm_write => grp_push_tensor1d_fu_136_x_strm_write,
        ffn_input_address0 => grp_push_tensor1d_fu_136_ffn_input_address0,
        ffn_input_ce0 => grp_push_tensor1d_fu_136_ffn_input_ce0,
        ffn_input_q0 => ffn_input_q0,
        ffn_input_44_address0 => grp_push_tensor1d_fu_136_ffn_input_44_address0,
        ffn_input_44_ce0 => grp_push_tensor1d_fu_136_ffn_input_44_ce0,
        ffn_input_44_q0 => ffn_input_44_q0,
        ffn_input_45_address0 => grp_push_tensor1d_fu_136_ffn_input_45_address0,
        ffn_input_45_ce0 => grp_push_tensor1d_fu_136_ffn_input_45_ce0,
        ffn_input_45_q0 => ffn_input_45_q0,
        ffn_input_46_address0 => grp_push_tensor1d_fu_136_ffn_input_46_address0,
        ffn_input_46_ce0 => grp_push_tensor1d_fu_136_ffn_input_46_ce0,
        ffn_input_46_q0 => ffn_input_46_q0,
        ffn_input_47_address0 => grp_push_tensor1d_fu_136_ffn_input_47_address0,
        ffn_input_47_ce0 => grp_push_tensor1d_fu_136_ffn_input_47_ce0,
        ffn_input_47_q0 => ffn_input_47_q0,
        ffn_input_48_address0 => grp_push_tensor1d_fu_136_ffn_input_48_address0,
        ffn_input_48_ce0 => grp_push_tensor1d_fu_136_ffn_input_48_ce0,
        ffn_input_48_q0 => ffn_input_48_q0,
        ffn_input_49_address0 => grp_push_tensor1d_fu_136_ffn_input_49_address0,
        ffn_input_49_ce0 => grp_push_tensor1d_fu_136_ffn_input_49_ce0,
        ffn_input_49_q0 => ffn_input_49_q0,
        ffn_input_50_address0 => grp_push_tensor1d_fu_136_ffn_input_50_address0,
        ffn_input_50_ce0 => grp_push_tensor1d_fu_136_ffn_input_50_ce0,
        ffn_input_50_q0 => ffn_input_50_q0);

    grp_push_tensor2d_bycol_fu_157 : component llama_layer_push_tensor2d_bycol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_push_tensor2d_bycol_fu_157_ap_start,
        ap_done => grp_push_tensor2d_bycol_fu_157_ap_done,
        ap_idle => grp_push_tensor2d_bycol_fu_157_ap_idle,
        ap_ready => grp_push_tensor2d_bycol_fu_157_ap_ready,
        m_axi_gmem2_0_AWVALID => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWVALID,
        m_axi_gmem2_0_AWREADY => ap_const_logic_0,
        m_axi_gmem2_0_AWADDR => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWADDR,
        m_axi_gmem2_0_AWID => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWID,
        m_axi_gmem2_0_AWLEN => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWLEN,
        m_axi_gmem2_0_AWSIZE => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWSIZE,
        m_axi_gmem2_0_AWBURST => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWBURST,
        m_axi_gmem2_0_AWLOCK => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWLOCK,
        m_axi_gmem2_0_AWCACHE => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWCACHE,
        m_axi_gmem2_0_AWPROT => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWPROT,
        m_axi_gmem2_0_AWQOS => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWQOS,
        m_axi_gmem2_0_AWREGION => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWREGION,
        m_axi_gmem2_0_AWUSER => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_AWUSER,
        m_axi_gmem2_0_WVALID => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WVALID,
        m_axi_gmem2_0_WREADY => ap_const_logic_0,
        m_axi_gmem2_0_WDATA => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WDATA,
        m_axi_gmem2_0_WSTRB => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WSTRB,
        m_axi_gmem2_0_WLAST => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WLAST,
        m_axi_gmem2_0_WID => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WID,
        m_axi_gmem2_0_WUSER => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_WUSER,
        m_axi_gmem2_0_ARVALID => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARVALID,
        m_axi_gmem2_0_ARREADY => m_axi_gmem2_0_ARREADY,
        m_axi_gmem2_0_ARADDR => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARADDR,
        m_axi_gmem2_0_ARID => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARID,
        m_axi_gmem2_0_ARLEN => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARLEN,
        m_axi_gmem2_0_ARSIZE => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARSIZE,
        m_axi_gmem2_0_ARBURST => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARBURST,
        m_axi_gmem2_0_ARLOCK => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARLOCK,
        m_axi_gmem2_0_ARCACHE => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARCACHE,
        m_axi_gmem2_0_ARPROT => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARPROT,
        m_axi_gmem2_0_ARQOS => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARQOS,
        m_axi_gmem2_0_ARREGION => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARREGION,
        m_axi_gmem2_0_ARUSER => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARUSER,
        m_axi_gmem2_0_RVALID => m_axi_gmem2_0_RVALID,
        m_axi_gmem2_0_RREADY => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_RREADY,
        m_axi_gmem2_0_RDATA => m_axi_gmem2_0_RDATA,
        m_axi_gmem2_0_RLAST => m_axi_gmem2_0_RLAST,
        m_axi_gmem2_0_RID => m_axi_gmem2_0_RID,
        m_axi_gmem2_0_RFIFONUM => m_axi_gmem2_0_RFIFONUM,
        m_axi_gmem2_0_RUSER => m_axi_gmem2_0_RUSER,
        m_axi_gmem2_0_RRESP => m_axi_gmem2_0_RRESP,
        m_axi_gmem2_0_BVALID => ap_const_logic_0,
        m_axi_gmem2_0_BREADY => grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_BREADY,
        m_axi_gmem2_0_BRESP => ap_const_lv2_0,
        m_axi_gmem2_0_BID => ap_const_lv1_0,
        m_axi_gmem2_0_BUSER => ap_const_lv1_0,
        W_strm_din => grp_push_tensor2d_bycol_fu_157_W_strm_din,
        W_strm_full_n => W_strm_full_n,
        W_strm_write => grp_push_tensor2d_bycol_fu_157_W_strm_write,
        tsor => W1_vec_read_reg_240);

    grp_Multiply_VecMat_fu_166 : component llama_layer_Multiply_VecMat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Multiply_VecMat_fu_166_ap_start,
        ap_done => grp_Multiply_VecMat_fu_166_ap_done,
        ap_idle => grp_Multiply_VecMat_fu_166_ap_idle,
        ap_ready => grp_Multiply_VecMat_fu_166_ap_ready,
        z1_strm_din => grp_Multiply_VecMat_fu_166_z1_strm_din,
        z1_strm_full_n => z1_strm_full_n,
        z1_strm_write => grp_Multiply_VecMat_fu_166_z1_strm_write,
        x_strm_dout => x_strm_dout,
        x_strm_empty_n => x_strm_empty_n,
        x_strm_read => grp_Multiply_VecMat_fu_166_x_strm_read,
        W_strm_dout => W_strm_dout,
        W_strm_empty_n => W_strm_empty_n,
        W_strm_read => grp_Multiply_VecMat_fu_166_W_strm_read,
        grp_fu_297_p_din0 => grp_Multiply_VecMat_fu_166_grp_fu_297_p_din0,
        grp_fu_297_p_din1 => grp_Multiply_VecMat_fu_166_grp_fu_297_p_din1,
        grp_fu_297_p_din2 => grp_Multiply_VecMat_fu_166_grp_fu_297_p_din2,
        grp_fu_297_p_din3 => grp_Multiply_VecMat_fu_166_grp_fu_297_p_din3,
        grp_fu_297_p_dout0 => grp_fu_297_p4,
        grp_fu_297_p_ce => grp_Multiply_VecMat_fu_166_grp_fu_297_p_ce);

    grp_push_tensor1d_2_fu_173 : component llama_layer_push_tensor1d_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_push_tensor1d_2_fu_173_ap_start,
        ap_done => grp_push_tensor1d_2_fu_173_ap_done,
        ap_idle => grp_push_tensor1d_2_fu_173_ap_idle,
        ap_ready => grp_push_tensor1d_2_fu_173_ap_ready,
        x_strm_din => grp_push_tensor1d_2_fu_173_x_strm_din,
        x_strm_full_n => x_strm_full_n,
        x_strm_write => grp_push_tensor1d_2_fu_173_x_strm_write,
        ffn_input_address0 => grp_push_tensor1d_2_fu_173_ffn_input_address0,
        ffn_input_ce0 => grp_push_tensor1d_2_fu_173_ffn_input_ce0,
        ffn_input_q0 => ffn_input_q0,
        ffn_input_44_address0 => grp_push_tensor1d_2_fu_173_ffn_input_44_address0,
        ffn_input_44_ce0 => grp_push_tensor1d_2_fu_173_ffn_input_44_ce0,
        ffn_input_44_q0 => ffn_input_44_q0,
        ffn_input_45_address0 => grp_push_tensor1d_2_fu_173_ffn_input_45_address0,
        ffn_input_45_ce0 => grp_push_tensor1d_2_fu_173_ffn_input_45_ce0,
        ffn_input_45_q0 => ffn_input_45_q0,
        ffn_input_46_address0 => grp_push_tensor1d_2_fu_173_ffn_input_46_address0,
        ffn_input_46_ce0 => grp_push_tensor1d_2_fu_173_ffn_input_46_ce0,
        ffn_input_46_q0 => ffn_input_46_q0,
        ffn_input_47_address0 => grp_push_tensor1d_2_fu_173_ffn_input_47_address0,
        ffn_input_47_ce0 => grp_push_tensor1d_2_fu_173_ffn_input_47_ce0,
        ffn_input_47_q0 => ffn_input_47_q0,
        ffn_input_48_address0 => grp_push_tensor1d_2_fu_173_ffn_input_48_address0,
        ffn_input_48_ce0 => grp_push_tensor1d_2_fu_173_ffn_input_48_ce0,
        ffn_input_48_q0 => ffn_input_48_q0,
        ffn_input_49_address0 => grp_push_tensor1d_2_fu_173_ffn_input_49_address0,
        ffn_input_49_ce0 => grp_push_tensor1d_2_fu_173_ffn_input_49_ce0,
        ffn_input_49_q0 => ffn_input_49_q0,
        ffn_input_50_address0 => grp_push_tensor1d_2_fu_173_ffn_input_50_address0,
        ffn_input_50_ce0 => grp_push_tensor1d_2_fu_173_ffn_input_50_ce0,
        ffn_input_50_q0 => ffn_input_50_q0);

    grp_push_tensor2d_bycol_3_fu_194 : component llama_layer_push_tensor2d_bycol_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_push_tensor2d_bycol_3_fu_194_ap_start,
        ap_done => grp_push_tensor2d_bycol_3_fu_194_ap_done,
        ap_idle => grp_push_tensor2d_bycol_3_fu_194_ap_idle,
        ap_ready => grp_push_tensor2d_bycol_3_fu_194_ap_ready,
        m_axi_gmem2_0_AWVALID => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWVALID,
        m_axi_gmem2_0_AWREADY => ap_const_logic_0,
        m_axi_gmem2_0_AWADDR => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWADDR,
        m_axi_gmem2_0_AWID => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWID,
        m_axi_gmem2_0_AWLEN => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWLEN,
        m_axi_gmem2_0_AWSIZE => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWSIZE,
        m_axi_gmem2_0_AWBURST => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWBURST,
        m_axi_gmem2_0_AWLOCK => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWLOCK,
        m_axi_gmem2_0_AWCACHE => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWCACHE,
        m_axi_gmem2_0_AWPROT => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWPROT,
        m_axi_gmem2_0_AWQOS => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWQOS,
        m_axi_gmem2_0_AWREGION => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWREGION,
        m_axi_gmem2_0_AWUSER => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_AWUSER,
        m_axi_gmem2_0_WVALID => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WVALID,
        m_axi_gmem2_0_WREADY => ap_const_logic_0,
        m_axi_gmem2_0_WDATA => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WDATA,
        m_axi_gmem2_0_WSTRB => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WSTRB,
        m_axi_gmem2_0_WLAST => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WLAST,
        m_axi_gmem2_0_WID => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WID,
        m_axi_gmem2_0_WUSER => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_WUSER,
        m_axi_gmem2_0_ARVALID => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARVALID,
        m_axi_gmem2_0_ARREADY => m_axi_gmem2_0_ARREADY,
        m_axi_gmem2_0_ARADDR => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARADDR,
        m_axi_gmem2_0_ARID => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARID,
        m_axi_gmem2_0_ARLEN => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARLEN,
        m_axi_gmem2_0_ARSIZE => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARSIZE,
        m_axi_gmem2_0_ARBURST => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARBURST,
        m_axi_gmem2_0_ARLOCK => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARLOCK,
        m_axi_gmem2_0_ARCACHE => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARCACHE,
        m_axi_gmem2_0_ARPROT => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARPROT,
        m_axi_gmem2_0_ARQOS => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARQOS,
        m_axi_gmem2_0_ARREGION => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARREGION,
        m_axi_gmem2_0_ARUSER => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARUSER,
        m_axi_gmem2_0_RVALID => m_axi_gmem2_0_RVALID,
        m_axi_gmem2_0_RREADY => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_RREADY,
        m_axi_gmem2_0_RDATA => m_axi_gmem2_0_RDATA,
        m_axi_gmem2_0_RLAST => m_axi_gmem2_0_RLAST,
        m_axi_gmem2_0_RID => m_axi_gmem2_0_RID,
        m_axi_gmem2_0_RFIFONUM => m_axi_gmem2_0_RFIFONUM,
        m_axi_gmem2_0_RUSER => m_axi_gmem2_0_RUSER,
        m_axi_gmem2_0_RRESP => m_axi_gmem2_0_RRESP,
        m_axi_gmem2_0_BVALID => ap_const_logic_0,
        m_axi_gmem2_0_BREADY => grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_BREADY,
        m_axi_gmem2_0_BRESP => ap_const_lv2_0,
        m_axi_gmem2_0_BID => ap_const_lv1_0,
        m_axi_gmem2_0_BUSER => ap_const_lv1_0,
        W_strm_din => grp_push_tensor2d_bycol_3_fu_194_W_strm_din,
        W_strm_full_n => W_strm_full_n,
        W_strm_write => grp_push_tensor2d_bycol_3_fu_194_W_strm_write,
        tsor => W2_vec_read_reg_287);

    grp_Multiply_VecMat_4_fu_203 : component llama_layer_Multiply_VecMat_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Multiply_VecMat_4_fu_203_ap_start,
        ap_done => grp_Multiply_VecMat_4_fu_203_ap_done,
        ap_idle => grp_Multiply_VecMat_4_fu_203_ap_idle,
        ap_ready => grp_Multiply_VecMat_4_fu_203_ap_ready,
        z2_strm_din => grp_Multiply_VecMat_4_fu_203_z2_strm_din,
        z2_strm_full_n => z2_strm_full_n,
        z2_strm_write => grp_Multiply_VecMat_4_fu_203_z2_strm_write,
        x_strm_dout => x_strm_dout,
        x_strm_empty_n => x_strm_empty_n,
        x_strm_read => grp_Multiply_VecMat_4_fu_203_x_strm_read,
        W_strm_dout => W_strm_dout,
        W_strm_empty_n => W_strm_empty_n,
        W_strm_read => grp_Multiply_VecMat_4_fu_203_W_strm_read,
        grp_fu_297_p_din0 => grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din0,
        grp_fu_297_p_din1 => grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din1,
        grp_fu_297_p_din2 => grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din2,
        grp_fu_297_p_din3 => grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din3,
        grp_fu_297_p_dout0 => grp_fu_297_p4,
        grp_fu_297_p_ce => grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_ce);

    grp_Swish_fu_210 : component llama_layer_Swish
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Swish_fu_210_ap_start,
        ap_done => grp_Swish_fu_210_ap_done,
        ap_idle => grp_Swish_fu_210_ap_idle,
        ap_ready => grp_Swish_fu_210_ap_ready,
        z2_strm_dout => z2_strm_dout,
        z2_strm_empty_n => z2_strm_empty_n,
        z2_strm_read => grp_Swish_fu_210_z2_strm_read,
        z2_Silu_strm_din => grp_Swish_fu_210_z2_Silu_strm_din,
        z2_Silu_strm_full_n => z2_Silu_strm_full_n,
        z2_Silu_strm_write => grp_Swish_fu_210_z2_Silu_strm_write);

    grp_push_tensor2d_bycol_5_fu_216 : component llama_layer_push_tensor2d_bycol_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_push_tensor2d_bycol_5_fu_216_ap_start,
        ap_done => grp_push_tensor2d_bycol_5_fu_216_ap_done,
        ap_idle => grp_push_tensor2d_bycol_5_fu_216_ap_idle,
        ap_ready => grp_push_tensor2d_bycol_5_fu_216_ap_ready,
        m_axi_gmem2_0_AWVALID => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWVALID,
        m_axi_gmem2_0_AWREADY => ap_const_logic_0,
        m_axi_gmem2_0_AWADDR => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWADDR,
        m_axi_gmem2_0_AWID => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWID,
        m_axi_gmem2_0_AWLEN => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWLEN,
        m_axi_gmem2_0_AWSIZE => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWSIZE,
        m_axi_gmem2_0_AWBURST => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWBURST,
        m_axi_gmem2_0_AWLOCK => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWLOCK,
        m_axi_gmem2_0_AWCACHE => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWCACHE,
        m_axi_gmem2_0_AWPROT => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWPROT,
        m_axi_gmem2_0_AWQOS => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWQOS,
        m_axi_gmem2_0_AWREGION => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWREGION,
        m_axi_gmem2_0_AWUSER => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_AWUSER,
        m_axi_gmem2_0_WVALID => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WVALID,
        m_axi_gmem2_0_WREADY => ap_const_logic_0,
        m_axi_gmem2_0_WDATA => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WDATA,
        m_axi_gmem2_0_WSTRB => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WSTRB,
        m_axi_gmem2_0_WLAST => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WLAST,
        m_axi_gmem2_0_WID => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WID,
        m_axi_gmem2_0_WUSER => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_WUSER,
        m_axi_gmem2_0_ARVALID => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARVALID,
        m_axi_gmem2_0_ARREADY => m_axi_gmem2_0_ARREADY,
        m_axi_gmem2_0_ARADDR => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARADDR,
        m_axi_gmem2_0_ARID => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARID,
        m_axi_gmem2_0_ARLEN => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARLEN,
        m_axi_gmem2_0_ARSIZE => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARSIZE,
        m_axi_gmem2_0_ARBURST => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARBURST,
        m_axi_gmem2_0_ARLOCK => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARLOCK,
        m_axi_gmem2_0_ARCACHE => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARCACHE,
        m_axi_gmem2_0_ARPROT => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARPROT,
        m_axi_gmem2_0_ARQOS => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARQOS,
        m_axi_gmem2_0_ARREGION => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARREGION,
        m_axi_gmem2_0_ARUSER => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARUSER,
        m_axi_gmem2_0_RVALID => m_axi_gmem2_0_RVALID,
        m_axi_gmem2_0_RREADY => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_RREADY,
        m_axi_gmem2_0_RDATA => m_axi_gmem2_0_RDATA,
        m_axi_gmem2_0_RLAST => m_axi_gmem2_0_RLAST,
        m_axi_gmem2_0_RID => m_axi_gmem2_0_RID,
        m_axi_gmem2_0_RFIFONUM => m_axi_gmem2_0_RFIFONUM,
        m_axi_gmem2_0_RUSER => m_axi_gmem2_0_RUSER,
        m_axi_gmem2_0_RRESP => m_axi_gmem2_0_RRESP,
        m_axi_gmem2_0_BVALID => ap_const_logic_0,
        m_axi_gmem2_0_BREADY => grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_BREADY,
        m_axi_gmem2_0_BRESP => ap_const_lv2_0,
        m_axi_gmem2_0_BID => ap_const_lv1_0,
        m_axi_gmem2_0_BUSER => ap_const_lv1_0,
        W_strm_din => grp_push_tensor2d_bycol_5_fu_216_W_strm_din,
        W_strm_full_n => W_strm_full_n,
        W_strm_write => grp_push_tensor2d_bycol_5_fu_216_W_strm_write,
        tsor => W3_vec_read_reg_292);

    grp_Multiply_Vec_fu_225 : component llama_layer_Multiply_Vec
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Multiply_Vec_fu_225_ap_start,
        ap_done => grp_Multiply_Vec_fu_225_ap_done,
        ap_idle => grp_Multiply_Vec_fu_225_ap_idle,
        ap_ready => grp_Multiply_Vec_fu_225_ap_ready,
        z1_strm_dout => z1_strm_dout,
        z1_strm_empty_n => z1_strm_empty_n,
        z1_strm_read => grp_Multiply_Vec_fu_225_z1_strm_read,
        z2_Silu_strm_dout => z2_Silu_strm_dout,
        z2_Silu_strm_empty_n => z2_Silu_strm_empty_n,
        z2_Silu_strm_read => grp_Multiply_Vec_fu_225_z2_Silu_strm_read,
        z3_strm_din => grp_Multiply_Vec_fu_225_z3_strm_din,
        z3_strm_full_n => z3_strm_full_n,
        z3_strm_write => grp_Multiply_Vec_fu_225_z3_strm_write);

    grp_Multiply_VecMat_6_fu_232 : component llama_layer_Multiply_VecMat_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Multiply_VecMat_6_fu_232_ap_start,
        ap_done => grp_Multiply_VecMat_6_fu_232_ap_done,
        ap_idle => grp_Multiply_VecMat_6_fu_232_ap_idle,
        ap_ready => grp_Multiply_VecMat_6_fu_232_ap_ready,
        res_strm_din => grp_Multiply_VecMat_6_fu_232_res_strm_din,
        res_strm_full_n => res_strm_full_n,
        res_strm_write => grp_Multiply_VecMat_6_fu_232_res_strm_write,
        res_strm_num_data_valid => ap_const_lv7_0,
        res_strm_fifo_cap => ap_const_lv7_0,
        z3_strm_dout => z3_strm_dout,
        z3_strm_empty_n => z3_strm_empty_n,
        z3_strm_read => grp_Multiply_VecMat_6_fu_232_z3_strm_read,
        W_strm_dout => W_strm_dout,
        W_strm_empty_n => W_strm_empty_n,
        W_strm_read => grp_Multiply_VecMat_6_fu_232_W_strm_read,
        grp_fu_297_p_din0 => grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din0,
        grp_fu_297_p_din1 => grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din1,
        grp_fu_297_p_din2 => grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din2,
        grp_fu_297_p_din3 => grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din3,
        grp_fu_297_p_dout0 => grp_fu_297_p4,
        grp_fu_297_p_ce => grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_ce);

    fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1_U1500 : component llama_layer_fmadd_32ns_32ns_32ns_32ns_32_2_primitive_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        din2 => grp_fu_297_p2,
        din3 => grp_fu_297_p3,
        ce => grp_fu_297_ce,
        dout => pre_grp_fu_297_p4);

    z2_Silu_strm_fifo_U : component llama_layer_fifo_w32_d64_A_x2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Swish_fu_210_z2_Silu_strm_din,
        if_full_n => z2_Silu_strm_full_n,
        if_write => z2_Silu_strm_write,
        if_dout => z2_Silu_strm_dout,
        if_empty_n => z2_Silu_strm_empty_n,
        if_read => z2_Silu_strm_read);

    z3_strm_fifo_U : component llama_layer_fifo_w32_d64_A_x2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Multiply_Vec_fu_225_z3_strm_din,
        if_full_n => z3_strm_full_n,
        if_write => z3_strm_write,
        if_dout => z3_strm_dout,
        if_empty_n => z3_strm_empty_n,
        if_read => z3_strm_read);

    z2_strm_fifo_U : component llama_layer_fifo_w32_d64_A_x2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Multiply_VecMat_4_fu_203_z2_strm_din,
        if_full_n => z2_strm_full_n,
        if_write => z2_strm_write,
        if_dout => z2_strm_dout,
        if_empty_n => z2_strm_empty_n,
        if_read => z2_strm_read);

    z1_strm_fifo_U : component llama_layer_fifo_w32_d64_A_x2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Multiply_VecMat_fu_166_z1_strm_din,
        if_full_n => z1_strm_full_n,
        if_write => z1_strm_write,
        if_dout => z1_strm_dout,
        if_empty_n => z1_strm_empty_n,
        if_read => z1_strm_read);

    W_strm_fifo_U : component llama_layer_fifo_w32_d64_A_x2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => W_strm_din,
        if_full_n => W_strm_full_n,
        if_write => W_strm_write,
        if_dout => W_strm_dout,
        if_empty_n => W_strm_empty_n,
        if_read => W_strm_read);

    x_strm_fifo_U : component llama_layer_fifo_w32_d64_A_x2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => x_strm_din,
        if_full_n => x_strm_full_n,
        if_write => x_strm_write,
        if_dout => x_strm_dout,
        if_empty_n => x_strm_empty_n,
        if_read => x_strm_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_Multiply_VecMat_6_fu_232_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Multiply_VecMat_4_fu_203_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Multiply_VecMat_4_fu_203_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_Multiply_VecMat_4_fu_203_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Multiply_VecMat_4_fu_203_ap_ready = ap_const_logic_1)) then 
                    grp_Multiply_VecMat_4_fu_203_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Multiply_VecMat_6_fu_232_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Multiply_VecMat_6_fu_232_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_Multiply_VecMat_6_fu_232_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Multiply_VecMat_6_fu_232_ap_ready = ap_const_logic_1)) then 
                    grp_Multiply_VecMat_6_fu_232_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Multiply_VecMat_fu_166_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Multiply_VecMat_fu_166_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Multiply_VecMat_fu_166_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Multiply_VecMat_fu_166_ap_ready = ap_const_logic_1)) then 
                    grp_Multiply_VecMat_fu_166_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Multiply_Vec_fu_225_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Multiply_Vec_fu_225_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_Multiply_Vec_fu_225_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Multiply_Vec_fu_225_ap_ready = ap_const_logic_1)) then 
                    grp_Multiply_Vec_fu_225_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Swish_fu_210_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Swish_fu_210_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_Swish_fu_210_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Swish_fu_210_ap_ready = ap_const_logic_1)) then 
                    grp_Swish_fu_210_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_push_tensor1d_2_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_push_tensor1d_2_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_push_tensor1d_2_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_push_tensor1d_2_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_push_tensor1d_2_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_push_tensor1d_fu_136_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_push_tensor1d_fu_136_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call27))) then 
                    grp_push_tensor1d_fu_136_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_push_tensor1d_fu_136_ap_ready = ap_const_logic_1)) then 
                    grp_push_tensor1d_fu_136_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_push_tensor2d_bycol_3_fu_194_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_push_tensor2d_bycol_3_fu_194_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_push_tensor2d_bycol_3_fu_194_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_push_tensor2d_bycol_3_fu_194_ap_ready = ap_const_logic_1)) then 
                    grp_push_tensor2d_bycol_3_fu_194_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_push_tensor2d_bycol_5_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_push_tensor2d_bycol_5_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_push_tensor2d_bycol_5_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_push_tensor2d_bycol_5_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_push_tensor2d_bycol_5_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_push_tensor2d_bycol_fu_157_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_push_tensor2d_bycol_fu_157_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call28))) then 
                    grp_push_tensor2d_bycol_fu_157_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_push_tensor2d_bycol_fu_157_ap_ready = ap_const_logic_1)) then 
                    grp_push_tensor2d_bycol_fu_157_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fu_297_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                grp_fu_297_ce <= grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_ce;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                grp_fu_297_ce <= grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_ce;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                grp_fu_297_ce <= grp_Multiply_VecMat_fu_166_grp_fu_297_p_ce;
            elsif (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
                grp_fu_297_ce <= ap_const_logic_0;
            else 
                grp_fu_297_ce <= ap_const_logic_1;
            end if; 
        end if;
    end process;

    grp_fu_297_p0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                grp_fu_297_p0 <= grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                grp_fu_297_p0 <= grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                grp_fu_297_p0 <= grp_Multiply_VecMat_fu_166_grp_fu_297_p_din0;
            end if; 
        end if;
    end process;

    grp_fu_297_p1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                grp_fu_297_p1 <= grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                grp_fu_297_p1 <= grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                grp_fu_297_p1 <= grp_Multiply_VecMat_fu_166_grp_fu_297_p_din1;
            end if; 
        end if;
    end process;

    grp_fu_297_p2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                grp_fu_297_p2 <= grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                grp_fu_297_p2 <= grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                grp_fu_297_p2 <= grp_Multiply_VecMat_fu_166_grp_fu_297_p_din2;
            end if; 
        end if;
    end process;

    grp_fu_297_p3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                grp_fu_297_p3 <= grp_Multiply_VecMat_6_fu_232_grp_fu_297_p_din3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                grp_fu_297_p3 <= grp_Multiply_VecMat_4_fu_203_grp_fu_297_p_din3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                grp_fu_297_p3 <= grp_Multiply_VecMat_fu_166_grp_fu_297_p_din3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                W1_vec_read_reg_240 <= W1_vec;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                W2_vec_read_reg_287 <= W2_vec;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                W3_vec_read_reg_292 <= W3_vec;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_297_ce = ap_const_logic_1)) then
                pre_grp_fu_297_p4_reg <= pre_grp_fu_297_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_Multiply_VecMat_fu_166_ap_done, grp_Multiply_VecMat_4_fu_203_ap_done, grp_Multiply_Vec_fu_225_ap_done, grp_Multiply_VecMat_6_fu_232_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_block_state2_on_subcall_done, ap_block_state6_on_subcall_done, ap_block_state10_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_Multiply_VecMat_fu_166_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_Multiply_VecMat_4_fu_203_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_Multiply_Vec_fu_225_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_Multiply_VecMat_6_fu_232_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    W_strm_din_assign_proc : process(grp_push_tensor2d_bycol_fu_157_W_strm_din, grp_push_tensor2d_bycol_3_fu_194_W_strm_din, grp_push_tensor2d_bycol_5_fu_216_W_strm_din, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            W_strm_din <= grp_push_tensor2d_bycol_5_fu_216_W_strm_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W_strm_din <= grp_push_tensor2d_bycol_3_fu_194_W_strm_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W_strm_din <= grp_push_tensor2d_bycol_fu_157_W_strm_din;
        else 
            W_strm_din <= grp_push_tensor2d_bycol_5_fu_216_W_strm_din;
        end if; 
    end process;


    W_strm_read_assign_proc : process(grp_Multiply_VecMat_fu_166_W_strm_read, grp_Multiply_VecMat_4_fu_203_W_strm_read, grp_Multiply_VecMat_6_fu_232_W_strm_read, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            W_strm_read <= grp_Multiply_VecMat_6_fu_232_W_strm_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            W_strm_read <= grp_Multiply_VecMat_4_fu_203_W_strm_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W_strm_read <= grp_Multiply_VecMat_fu_166_W_strm_read;
        else 
            W_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    W_strm_write_assign_proc : process(grp_push_tensor2d_bycol_fu_157_W_strm_write, grp_push_tensor2d_bycol_3_fu_194_W_strm_write, grp_push_tensor2d_bycol_5_fu_216_W_strm_write, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            W_strm_write <= grp_push_tensor2d_bycol_5_fu_216_W_strm_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W_strm_write <= grp_push_tensor2d_bycol_3_fu_194_W_strm_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W_strm_write <= grp_push_tensor2d_bycol_fu_157_W_strm_write;
        else 
            W_strm_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state10_on_subcall_done)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_Multiply_Vec_fu_225_ap_done)
    begin
        if ((grp_Multiply_Vec_fu_225_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(grp_Multiply_VecMat_6_fu_232_ap_done)
    begin
        if ((grp_Multiply_VecMat_6_fu_232_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_Multiply_VecMat_fu_166_ap_done)
    begin
        if ((grp_Multiply_VecMat_fu_166_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state6_on_subcall_done)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_Multiply_VecMat_4_fu_203_ap_done)
    begin
        if ((grp_Multiply_VecMat_4_fu_203_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state10_on_subcall_done_assign_proc : process(grp_Swish_fu_210_ap_done, grp_push_tensor2d_bycol_5_fu_216_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_push_tensor2d_bycol_5_fu_216_ap_done = ap_const_logic_0) or (grp_Swish_fu_210_ap_done = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call27_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call27 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call28_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call28 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_push_tensor1d_fu_136_ap_done, grp_push_tensor2d_bycol_fu_157_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_push_tensor2d_bycol_fu_157_ap_done = ap_const_logic_0) or (grp_push_tensor1d_fu_136_ap_done = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_push_tensor1d_2_fu_173_ap_done, grp_push_tensor2d_bycol_3_fu_194_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_push_tensor2d_bycol_3_fu_194_ap_done = ap_const_logic_0) or (grp_push_tensor1d_2_fu_173_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_Multiply_VecMat_6_fu_232_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_Multiply_VecMat_6_fu_232_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ffn_input_44_address0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_44_address0, grp_push_tensor1d_2_fu_173_ffn_input_44_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_44_address0 <= grp_push_tensor1d_2_fu_173_ffn_input_44_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_44_address0 <= grp_push_tensor1d_fu_136_ffn_input_44_address0;
        else 
            ffn_input_44_address0 <= "XXXXXXX";
        end if; 
    end process;


    ffn_input_44_ce0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_44_ce0, grp_push_tensor1d_2_fu_173_ffn_input_44_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_44_ce0 <= grp_push_tensor1d_2_fu_173_ffn_input_44_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_44_ce0 <= grp_push_tensor1d_fu_136_ffn_input_44_ce0;
        else 
            ffn_input_44_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ffn_input_45_address0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_45_address0, grp_push_tensor1d_2_fu_173_ffn_input_45_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_45_address0 <= grp_push_tensor1d_2_fu_173_ffn_input_45_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_45_address0 <= grp_push_tensor1d_fu_136_ffn_input_45_address0;
        else 
            ffn_input_45_address0 <= "XXXXXXX";
        end if; 
    end process;


    ffn_input_45_ce0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_45_ce0, grp_push_tensor1d_2_fu_173_ffn_input_45_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_45_ce0 <= grp_push_tensor1d_2_fu_173_ffn_input_45_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_45_ce0 <= grp_push_tensor1d_fu_136_ffn_input_45_ce0;
        else 
            ffn_input_45_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ffn_input_46_address0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_46_address0, grp_push_tensor1d_2_fu_173_ffn_input_46_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_46_address0 <= grp_push_tensor1d_2_fu_173_ffn_input_46_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_46_address0 <= grp_push_tensor1d_fu_136_ffn_input_46_address0;
        else 
            ffn_input_46_address0 <= "XXXXXXX";
        end if; 
    end process;


    ffn_input_46_ce0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_46_ce0, grp_push_tensor1d_2_fu_173_ffn_input_46_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_46_ce0 <= grp_push_tensor1d_2_fu_173_ffn_input_46_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_46_ce0 <= grp_push_tensor1d_fu_136_ffn_input_46_ce0;
        else 
            ffn_input_46_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ffn_input_47_address0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_47_address0, grp_push_tensor1d_2_fu_173_ffn_input_47_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_47_address0 <= grp_push_tensor1d_2_fu_173_ffn_input_47_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_47_address0 <= grp_push_tensor1d_fu_136_ffn_input_47_address0;
        else 
            ffn_input_47_address0 <= "XXXXXXX";
        end if; 
    end process;


    ffn_input_47_ce0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_47_ce0, grp_push_tensor1d_2_fu_173_ffn_input_47_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_47_ce0 <= grp_push_tensor1d_2_fu_173_ffn_input_47_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_47_ce0 <= grp_push_tensor1d_fu_136_ffn_input_47_ce0;
        else 
            ffn_input_47_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ffn_input_48_address0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_48_address0, grp_push_tensor1d_2_fu_173_ffn_input_48_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_48_address0 <= grp_push_tensor1d_2_fu_173_ffn_input_48_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_48_address0 <= grp_push_tensor1d_fu_136_ffn_input_48_address0;
        else 
            ffn_input_48_address0 <= "XXXXXXX";
        end if; 
    end process;


    ffn_input_48_ce0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_48_ce0, grp_push_tensor1d_2_fu_173_ffn_input_48_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_48_ce0 <= grp_push_tensor1d_2_fu_173_ffn_input_48_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_48_ce0 <= grp_push_tensor1d_fu_136_ffn_input_48_ce0;
        else 
            ffn_input_48_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ffn_input_49_address0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_49_address0, grp_push_tensor1d_2_fu_173_ffn_input_49_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_49_address0 <= grp_push_tensor1d_2_fu_173_ffn_input_49_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_49_address0 <= grp_push_tensor1d_fu_136_ffn_input_49_address0;
        else 
            ffn_input_49_address0 <= "XXXXXXX";
        end if; 
    end process;


    ffn_input_49_ce0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_49_ce0, grp_push_tensor1d_2_fu_173_ffn_input_49_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_49_ce0 <= grp_push_tensor1d_2_fu_173_ffn_input_49_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_49_ce0 <= grp_push_tensor1d_fu_136_ffn_input_49_ce0;
        else 
            ffn_input_49_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ffn_input_50_address0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_50_address0, grp_push_tensor1d_2_fu_173_ffn_input_50_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_50_address0 <= grp_push_tensor1d_2_fu_173_ffn_input_50_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_50_address0 <= grp_push_tensor1d_fu_136_ffn_input_50_address0;
        else 
            ffn_input_50_address0 <= "XXXXXXX";
        end if; 
    end process;


    ffn_input_50_ce0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_50_ce0, grp_push_tensor1d_2_fu_173_ffn_input_50_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_50_ce0 <= grp_push_tensor1d_2_fu_173_ffn_input_50_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_50_ce0 <= grp_push_tensor1d_fu_136_ffn_input_50_ce0;
        else 
            ffn_input_50_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ffn_input_address0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_address0, grp_push_tensor1d_2_fu_173_ffn_input_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_address0 <= grp_push_tensor1d_2_fu_173_ffn_input_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_address0 <= grp_push_tensor1d_fu_136_ffn_input_address0;
        else 
            ffn_input_address0 <= "XXXXXXX";
        end if; 
    end process;


    ffn_input_ce0_assign_proc : process(grp_push_tensor1d_fu_136_ffn_input_ce0, grp_push_tensor1d_2_fu_173_ffn_input_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ffn_input_ce0 <= grp_push_tensor1d_2_fu_173_ffn_input_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ffn_input_ce0 <= grp_push_tensor1d_fu_136_ffn_input_ce0;
        else 
            ffn_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Multiply_VecMat_4_fu_203_ap_start <= grp_Multiply_VecMat_4_fu_203_ap_start_reg;
    grp_Multiply_VecMat_6_fu_232_ap_start <= grp_Multiply_VecMat_6_fu_232_ap_start_reg;
    grp_Multiply_VecMat_fu_166_ap_start <= grp_Multiply_VecMat_fu_166_ap_start_reg;
    grp_Multiply_Vec_fu_225_ap_start <= grp_Multiply_Vec_fu_225_ap_start_reg;
    grp_Swish_fu_210_ap_start <= grp_Swish_fu_210_ap_start_reg;

    grp_fu_297_p4_assign_proc : process(grp_fu_297_ce, pre_grp_fu_297_p4, pre_grp_fu_297_p4_reg)
    begin
        if ((grp_fu_297_ce = ap_const_logic_1)) then 
            grp_fu_297_p4 <= pre_grp_fu_297_p4;
        else 
            grp_fu_297_p4 <= pre_grp_fu_297_p4_reg;
        end if; 
    end process;

    grp_push_tensor1d_2_fu_173_ap_start <= grp_push_tensor1d_2_fu_173_ap_start_reg;
    grp_push_tensor1d_fu_136_ap_start <= grp_push_tensor1d_fu_136_ap_start_reg;
    grp_push_tensor2d_bycol_3_fu_194_ap_start <= grp_push_tensor2d_bycol_3_fu_194_ap_start_reg;
    grp_push_tensor2d_bycol_5_fu_216_ap_start <= grp_push_tensor2d_bycol_5_fu_216_ap_start_reg;
    grp_push_tensor2d_bycol_fu_157_ap_start <= grp_push_tensor2d_bycol_fu_157_ap_start_reg;

    internal_ap_ready_assign_proc : process(grp_Multiply_VecMat_6_fu_232_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_Multiply_VecMat_6_fu_232_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem2_0_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARADDR, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARADDR, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARADDR, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARADDR <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARADDR <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARADDR <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARADDR;
        else 
            m_axi_gmem2_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem2_0_ARBURST_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARBURST, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARBURST, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARBURST, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARBURST <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARBURST <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARBURST <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARBURST;
        else 
            m_axi_gmem2_0_ARBURST <= "XX";
        end if; 
    end process;


    m_axi_gmem2_0_ARCACHE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARCACHE, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARCACHE, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARCACHE, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARCACHE <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARCACHE <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARCACHE <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARCACHE;
        else 
            m_axi_gmem2_0_ARCACHE <= "XXXX";
        end if; 
    end process;


    m_axi_gmem2_0_ARID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARID, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARID, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARID, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARID <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARID <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARID <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARID;
        else 
            m_axi_gmem2_0_ARID <= "X";
        end if; 
    end process;


    m_axi_gmem2_0_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARLEN, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARLEN, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARLEN, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARLEN <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARLEN <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARLEN <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARLEN;
        else 
            m_axi_gmem2_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem2_0_ARLOCK_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARLOCK, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARLOCK, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARLOCK, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARLOCK <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARLOCK <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARLOCK <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARLOCK;
        else 
            m_axi_gmem2_0_ARLOCK <= "XX";
        end if; 
    end process;


    m_axi_gmem2_0_ARPROT_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARPROT, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARPROT, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARPROT, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARPROT <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARPROT <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARPROT <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARPROT;
        else 
            m_axi_gmem2_0_ARPROT <= "XXX";
        end if; 
    end process;


    m_axi_gmem2_0_ARQOS_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARQOS, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARQOS, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARQOS, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARQOS <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARQOS <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARQOS <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARQOS;
        else 
            m_axi_gmem2_0_ARQOS <= "XXXX";
        end if; 
    end process;


    m_axi_gmem2_0_ARREGION_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARREGION, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARREGION, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARREGION, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARREGION <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARREGION <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARREGION <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARREGION;
        else 
            m_axi_gmem2_0_ARREGION <= "XXXX";
        end if; 
    end process;


    m_axi_gmem2_0_ARSIZE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARSIZE, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARSIZE, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARSIZE, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARSIZE <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARSIZE <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARSIZE <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARSIZE;
        else 
            m_axi_gmem2_0_ARSIZE <= "XXX";
        end if; 
    end process;


    m_axi_gmem2_0_ARUSER_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARUSER, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARUSER, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARUSER, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARUSER <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARUSER <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARUSER <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARUSER;
        else 
            m_axi_gmem2_0_ARUSER <= "X";
        end if; 
    end process;


    m_axi_gmem2_0_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARVALID, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARVALID, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_ARVALID <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_ARVALID <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_ARVALID <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_ARVALID;
        else 
            m_axi_gmem2_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem2_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem2_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem2_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem2_0_AWID <= ap_const_lv1_0;
    m_axi_gmem2_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem2_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem2_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem2_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem2_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem2_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem2_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem2_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem2_0_BREADY <= ap_const_logic_0;

    m_axi_gmem2_0_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_RREADY, grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_RREADY, grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem2_0_RREADY <= grp_push_tensor2d_bycol_5_fu_216_m_axi_gmem2_0_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem2_0_RREADY <= grp_push_tensor2d_bycol_3_fu_194_m_axi_gmem2_0_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem2_0_RREADY <= grp_push_tensor2d_bycol_fu_157_m_axi_gmem2_0_RREADY;
        else 
            m_axi_gmem2_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem2_0_WDATA <= ap_const_lv32_0;
    m_axi_gmem2_0_WID <= ap_const_lv1_0;
    m_axi_gmem2_0_WLAST <= ap_const_logic_0;
    m_axi_gmem2_0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem2_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem2_0_WVALID <= ap_const_logic_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    res_strm_din <= grp_Multiply_VecMat_6_fu_232_res_strm_din;
    res_strm_write <= grp_Multiply_VecMat_6_fu_232_res_strm_write;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    x_strm_din_assign_proc : process(grp_push_tensor1d_fu_136_x_strm_din, grp_push_tensor1d_2_fu_173_x_strm_din, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_strm_din <= grp_push_tensor1d_2_fu_173_x_strm_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_strm_din <= grp_push_tensor1d_fu_136_x_strm_din;
        else 
            x_strm_din <= grp_push_tensor1d_2_fu_173_x_strm_din;
        end if; 
    end process;


    x_strm_read_assign_proc : process(grp_Multiply_VecMat_fu_166_x_strm_read, grp_Multiply_VecMat_4_fu_203_x_strm_read, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_strm_read <= grp_Multiply_VecMat_4_fu_203_x_strm_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_strm_read <= grp_Multiply_VecMat_fu_166_x_strm_read;
        else 
            x_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    x_strm_write_assign_proc : process(grp_push_tensor1d_fu_136_x_strm_write, grp_push_tensor1d_2_fu_173_x_strm_write, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_strm_write <= grp_push_tensor1d_2_fu_173_x_strm_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_strm_write <= grp_push_tensor1d_fu_136_x_strm_write;
        else 
            x_strm_write <= ap_const_logic_0;
        end if; 
    end process;


    z1_strm_read_assign_proc : process(grp_Multiply_Vec_fu_225_z1_strm_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            z1_strm_read <= grp_Multiply_Vec_fu_225_z1_strm_read;
        else 
            z1_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    z1_strm_write_assign_proc : process(grp_Multiply_VecMat_fu_166_z1_strm_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            z1_strm_write <= grp_Multiply_VecMat_fu_166_z1_strm_write;
        else 
            z1_strm_write <= ap_const_logic_0;
        end if; 
    end process;


    z2_Silu_strm_read_assign_proc : process(grp_Multiply_Vec_fu_225_z2_Silu_strm_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            z2_Silu_strm_read <= grp_Multiply_Vec_fu_225_z2_Silu_strm_read;
        else 
            z2_Silu_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    z2_Silu_strm_write_assign_proc : process(grp_Swish_fu_210_z2_Silu_strm_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z2_Silu_strm_write <= grp_Swish_fu_210_z2_Silu_strm_write;
        else 
            z2_Silu_strm_write <= ap_const_logic_0;
        end if; 
    end process;


    z2_strm_read_assign_proc : process(grp_Swish_fu_210_z2_strm_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z2_strm_read <= grp_Swish_fu_210_z2_strm_read;
        else 
            z2_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    z2_strm_write_assign_proc : process(grp_Multiply_VecMat_4_fu_203_z2_strm_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z2_strm_write <= grp_Multiply_VecMat_4_fu_203_z2_strm_write;
        else 
            z2_strm_write <= ap_const_logic_0;
        end if; 
    end process;


    z3_strm_read_assign_proc : process(grp_Multiply_VecMat_6_fu_232_z3_strm_read, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            z3_strm_read <= grp_Multiply_VecMat_6_fu_232_z3_strm_read;
        else 
            z3_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    z3_strm_write_assign_proc : process(grp_Multiply_Vec_fu_225_z3_strm_write, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            z3_strm_write <= grp_Multiply_Vec_fu_225_z3_strm_write;
        else 
            z3_strm_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
