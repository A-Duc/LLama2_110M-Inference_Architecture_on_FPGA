-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity llama_layer_kernel_mhsa_1_Block_entry_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer : IN STD_LOGIC_VECTOR (3 downto 0);
    position : IN STD_LOGIC_VECTOR (31 downto 0);
    key_cache : IN STD_LOGIC_VECTOR (63 downto 0);
    value_cache : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (22 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of llama_layer_kernel_mhsa_1_Block_entry_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal position_cast_fu_66_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_78_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl_fu_70_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl11_fu_86_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul7_out_0_fu_90_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_fu_100_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_259_fu_106_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_259_fu_106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_fu_112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_cast_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_124_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln54_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal position_cast_fu_66_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add126_out_0_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_136_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln54_2_fu_142_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_fu_148_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add126_out_0_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg(17) <= '0';
                ap_return_0_preg(18) <= '0';
                ap_return_0_preg(19) <= '0';
                ap_return_0_preg(20) <= '0';
                ap_return_0_preg(21) <= '0';
                ap_return_0_preg(22) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        ap_return_0_preg(22 downto 17) <= mul7_out_0_fu_90_p2(22 downto 17);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= add_ln54_fu_136_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv64_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_2_preg <= add_ln54_2_fu_142_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv33_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_3_preg <= add_ln67_fu_148_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_4_preg <= add126_out_0_fu_154_p2;
                end if; 
            end if;
        end if;
    end process;

    ap_return_0_preg(16 downto 0) <= "00000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add126_out_0_fu_154_p0 <= position;
    add126_out_0_fu_154_p2 <= std_logic_vector(signed(add126_out_0_fu_154_p0) + signed(ap_const_lv32_1));
    add_fu_118_p2 <= std_logic_vector(unsigned(mul8_fu_112_p2) + unsigned(mul7_cast_fu_96_p1));
    add_ln54_2_fu_142_p2 <= std_logic_vector(signed(sext_ln54_fu_132_p1) + signed(value_cache));
    add_ln54_fu_136_p2 <= std_logic_vector(signed(sext_ln54_fu_132_p1) + signed(key_cache));
    add_ln67_fu_148_p2 <= std_logic_vector(signed(position_cast_fu_66_p1) + signed(ap_const_lv33_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, mul7_out_0_fu_90_p2, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= mul7_out_0_fu_90_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, add_ln54_fu_136_p2, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= add_ln54_fu_136_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, add_ln54_2_fu_142_p2, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= add_ln54_2_fu_142_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, add_ln67_fu_148_p2, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_3 <= add_ln67_fu_148_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, add126_out_0_fu_154_p2, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_4 <= add126_out_0_fu_154_p2;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;

    empty_259_fu_106_p0 <= position;
    empty_259_fu_106_p2 <= std_logic_vector(shift_left(unsigned(empty_259_fu_106_p0),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    empty_fu_100_p0 <= position;
    empty_fu_100_p2 <= std_logic_vector(shift_left(unsigned(empty_fu_100_p0),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    mul7_cast_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul7_out_0_fu_90_p2),32));
    mul7_out_0_fu_90_p2 <= std_logic_vector(unsigned(p_shl_fu_70_p3) - unsigned(p_shl11_fu_86_p1));
    mul8_fu_112_p2 <= std_logic_vector(unsigned(empty_fu_100_p2) - unsigned(empty_259_fu_106_p2));
    p_shl11_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_78_p3),23));
    p_shl_fu_70_p3 <= (layer & ap_const_lv19_0);
    position_cast_fu_66_p0 <= position;
        position_cast_fu_66_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(position_cast_fu_66_p0),33));

        sext_ln54_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_124_p3),64));

    shl_ln_fu_124_p3 <= (add_fu_118_p2 & ap_const_lv2_0);
    tmp_fu_78_p3 <= (layer & ap_const_lv17_0);
end behav;
